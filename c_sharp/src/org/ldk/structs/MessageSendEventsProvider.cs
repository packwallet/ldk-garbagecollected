
using org.ldk.impl;
using org.ldk.enums;
using org.ldk.util;
using System;

namespace org { namespace ldk { namespace structs {



/** An implementation of MessageSendEventsProvider */
public interface IMessageSendEventsProvider {
	/**Gets the list of pending events which were generated by previous actions, clearing the list
	 * in the process.
	 */
	MessageSendEvent[] get_and_clear_pending_msg_events();
}

/**
 * A trait indicating an object may generate message send events
 */
public class MessageSendEventsProvider : CommonBase {
	internal Bindings.LDKMessageSendEventsProvider bindings_instance;
	internal long instance_idx;

	internal MessageSendEventsProvider(object _dummy, long ptr) : base(ptr) { bindings_instance = null; }
	~MessageSendEventsProvider() {
		if (ptr != 0) { Bindings.MessageSendEventsProviderFree(ptr); }
	}

	private class LDKMessageSendEventsProviderHolder { internal MessageSendEventsProvider held; }
	private class LDKMessageSendEventsProviderImpl : Bindings.LDKMessageSendEventsProvider {
		internal LDKMessageSendEventsProviderImpl(IMessageSendEventsProvider arg, LDKMessageSendEventsProviderHolder impl_holder) { this.arg = arg; this.impl_holder = impl_holder; }
		private IMessageSendEventsProvider arg;
		private LDKMessageSendEventsProviderHolder impl_holder;
		public long GetAndClearPendingMsgEvents() {
			MessageSendEvent[] ret = arg.get_and_clear_pending_msg_events();
				GC.KeepAlive(arg);
			long result = InternalUtils.EncodeUint64Array(InternalUtils.MapArray(ret, ret_conv_18 => ret_conv_18 == null ? 0 : ret_conv_18.clone_ptr()));
			foreach (MessageSendEvent ret_conv_18 in ret) { if (impl_holder.held != null) { impl_holder.held.ptrs_to.AddLast(ret_conv_18); }; };
			return result;
		}
	}

	/** Creates a new instance of MessageSendEventsProvider from a given implementation */
	public static MessageSendEventsProvider new_impl(IMessageSendEventsProvider arg) {
		LDKMessageSendEventsProviderHolder impl_holder = new LDKMessageSendEventsProviderHolder();
		LDKMessageSendEventsProviderImpl impl = new LDKMessageSendEventsProviderImpl(arg, impl_holder);
		long[] ptr_idx = Bindings.LDKMessageSendEventsProviderNew(impl);

		impl_holder.held = new MessageSendEventsProvider(null, ptr_idx[0]);
		impl_holder.held.instance_idx = ptr_idx[1];
		impl_holder.held.bindings_instance = impl;
		return impl_holder.held;
	}

	/**
	 * Gets the list of pending events which were generated by previous actions, clearing the list
	 * in the process.
	 */
	public MessageSendEvent[] get_and_clear_pending_msg_events() {
		long ret = Bindings.MessageSendEventsProviderGetAndClearPendingMsgEvents(this.ptr);
		GC.KeepAlive(this);
		if (ret >= 0 && ret <= 4096) { return null; }
		int ret_conv_18_len = InternalUtils.GetArrayLength(ret);
		MessageSendEvent[] ret_conv_18_arr = new MessageSendEvent[ret_conv_18_len];
		for (int s = 0; s < ret_conv_18_len; s++) {
			long ret_conv_18 = InternalUtils.GetU64ArrayElem(ret, s);
			org.ldk.structs.MessageSendEvent ret_conv_18_hu_conv = org.ldk.structs.MessageSendEvent.constr_from_ptr(ret_conv_18);
			if (ret_conv_18_hu_conv != null) { ret_conv_18_hu_conv.ptrs_to.AddLast(this); };
			ret_conv_18_arr[s] = ret_conv_18_hu_conv;
		}
		Bindings.FreeBuffer(ret);
		return ret_conv_18_arr;
	}

}
} } }
