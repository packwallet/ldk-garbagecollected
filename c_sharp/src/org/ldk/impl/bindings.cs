
using org.ldk.enums;
using org.ldk.impl;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace org { namespace ldk { namespace impl {

internal class Bindings {
	static List<WeakReference> js_objs = new List<WeakReference>();

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_lib_version_string")] public static extern string GetLibVersionString();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_c_bindings_version")] public static extern string GetLdkCBindingsVersion();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_version")] public static extern string GetLdkVersion();

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_allocate_buffer")] public static extern long AllocateBuffer(long buflen);

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_free_buffer")] public static extern void FreeBuffer(long buf);

	// struct LDKThirtyTwoBytes BigEndianScalar_get_bytes (struct LDKBigEndianScalar* thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_get_bytes")] public static extern long BigEndianScalarGetBytes(long _thing);
	// static void BigEndianScalar_free (struct LDKBigEndianScalar thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_free")] public static extern void BigEndianScalarFree(long _thing);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_ty_from_ptr")] public static extern long LDKBech32ErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidChar_get_invalid_char")] public static extern int LDKBech32ErrorInvalidCharGetInvalidChar(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidData_get_invalid_data")] public static extern byte LDKBech32ErrorInvalidDataGetInvalidData(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_ty_from_ptr")] public static extern long LDKCOptionU64ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_Some_get_some")] public static extern long LDKCOptionU64ZSomeGetSome(long ptr);
	// struct LDKRefund CResult_RefundBolt12ParseErrorZ_get_ok(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_get_ok")] public static extern long CResultRefundBolt12ParseErrorZGetOk(long _owner);
	// struct LDKBolt12ParseError CResult_RefundBolt12ParseErrorZ_get_err(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_get_err")] public static extern long CResultRefundBolt12ParseErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_ty_from_ptr")] public static extern long LDKRetryTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Attempts_get_attempts")] public static extern int LDKRetryAttemptsGetAttempts(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Timeout_get_timeout")] public static extern long LDKRetryTimeoutGetTimeout(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_ty_from_ptr")] public static extern long LDKDecodeErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_Io_get_io")] public static extern IOError LDKDecodeErrorIoGetIo(long ptr);
	// struct LDKRetry CResult_RetryDecodeErrorZ_get_ok(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_get_ok")] public static extern long CResultRetryDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RetryDecodeErrorZ_get_err(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_get_err")] public static extern long CResultRetryDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ty_from_ptr")] public static extern long LDKAPIErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_APIMisuseError_get_err")] public static extern long LDKAPIErrorAPIMisuseErrorGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_err")] public static extern long LDKAPIErrorFeeRateTooHighGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_feerate")] public static extern int LDKAPIErrorFeeRateTooHighGetFeerate(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_InvalidRoute_get_err")] public static extern long LDKAPIErrorInvalidRouteGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ChannelUnavailable_get_err")] public static extern long LDKAPIErrorChannelUnavailableGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_IncompatibleShutdownScript_get_script")] public static extern long LDKAPIErrorIncompatibleShutdownScriptGetScript(long ptr);
	// void CResult_NoneAPIErrorZ_get_ok(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_ok")] public static extern void CResultNoneAPIErrorZGetOk(long _owner);
	// struct LDKAPIError CResult_NoneAPIErrorZ_get_err(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_err")] public static extern long CResultNoneAPIErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ThirtyTwoBytesZ_ty_from_ptr")] public static extern long LDKCOptionThirtyTwoBytesZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ThirtyTwoBytesZ_Some_get_some")] public static extern long LDKCOptionThirtyTwoBytesZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_u8ZZ_ty_from_ptr")] public static extern long LDKCOptionCVecU8ZzTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_u8ZZ_Some_get_some")] public static extern long LDKCOptionCVecU8ZzSomeGetSome(long ptr);
	// struct LDKRecipientOnionFields CResult_RecipientOnionFieldsDecodeErrorZ_get_ok(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_get_ok")] public static extern long CResultRecipientOnionFieldsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RecipientOnionFieldsDecodeErrorZ_get_err(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_get_err")] public static extern long CResultRecipientOnionFieldsDecodeErrorZGetErr(long _owner);
	// uint64_t C2Tuple_u64CVec_u8ZZ_get_a(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_get_a")] public static extern long C2TupleU64CvecU8ZzGetA(long _owner);
	// struct LDKCVec_u8Z C2Tuple_u64CVec_u8ZZ_get_b(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_get_b")] public static extern long C2TupleU64CvecU8ZzGetB(long _owner);
	// struct LDKRecipientOnionFields CResult_RecipientOnionFieldsNoneZ_get_ok(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_get_ok")] public static extern long CResultRecipientOnionFieldsNoneZGetOk(long _owner);
	// void CResult_RecipientOnionFieldsNoneZ_get_err(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_get_err")] public static extern void CResultRecipientOnionFieldsNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_ThirtyTwoBytesZZ_ty_from_ptr")] public static extern long LDKCOptionCVecThirtyTwoBytesZZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_ThirtyTwoBytesZZ_Some_get_some")] public static extern long LDKCOptionCVecThirtyTwoBytesZZSomeGetSome(long ptr);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesNoneZ_get_ok(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_get_ok")] public static extern long CResultThirtyTwoBytesNoneZGetOk(long _owner);
	// void CResult_ThirtyTwoBytesNoneZ_get_err(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_get_err")] public static extern void CResultThirtyTwoBytesNoneZGetErr(long _owner);
	// struct LDKBlindedPayInfo CResult_BlindedPayInfoDecodeErrorZ_get_ok(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_get_ok")] public static extern long CResultBlindedPayInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedPayInfoDecodeErrorZ_get_err(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_get_err")] public static extern long CResultBlindedPayInfoDecodeErrorZGetErr(long _owner);
	// struct LDKDelayedPaymentOutputDescriptor CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZGetErr(long _owner);
	// struct LDKStaticPaymentOutputDescriptor CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_ty_from_ptr")] public static extern long LDKSpendableOutputDescriptorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_outpoint")] public static extern long LDKSpendableOutputDescriptorStaticOutputGetOutpoint(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_output")] public static extern long LDKSpendableOutputDescriptorStaticOutputGetOutput(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_channel_keys_id")] public static extern long LDKSpendableOutputDescriptorStaticOutputGetChannelKeysId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_DelayedPaymentOutput_get_delayed_payment_output")] public static extern long LDKSpendableOutputDescriptorDelayedPaymentOutputGetDelayedPaymentOutput(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticPaymentOutput_get_static_payment_output")] public static extern long LDKSpendableOutputDescriptorStaticPaymentOutputGetStaticPaymentOutput(long ptr);
	// struct LDKSpendableOutputDescriptor CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_ty_from_ptr")] public static extern long LDKCOptionU32ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_Some_get_some")] public static extern int LDKCOptionU32ZSomeGetSome(long ptr);
	// struct LDKCVec_u8Z C2Tuple_CVec_u8Zu64Z_get_a(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_get_a")] public static extern long C2TupleCVecU8Zu64ZGetA(long _owner);
	// uint64_t C2Tuple_CVec_u8Zu64Z_get_b(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_get_b")] public static extern long C2TupleCVecU8Zu64ZGetB(long _owner);
	// struct LDKC2Tuple_CVec_u8Zu64Z CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_ok(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_ok")] public static extern long CResultC2TupleCVecU8Zu64ZnonezGetOk(long _owner);
	// void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_err(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_err")] public static extern void CResultC2TupleCVecU8Zu64ZnonezGetErr(long _owner);
	// struct LDKChannelDerivationParameters CResult_ChannelDerivationParametersDecodeErrorZ_get_ok(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_get_ok")] public static extern long CResultChannelDerivationParametersDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelDerivationParametersDecodeErrorZ_get_err(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_get_err")] public static extern long CResultChannelDerivationParametersDecodeErrorZGetErr(long _owner);
	// struct LDKHTLCDescriptor CResult_HTLCDescriptorDecodeErrorZ_get_ok(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_get_ok")] public static extern long CResultHTLCDescriptorDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HTLCDescriptorDecodeErrorZ_get_err(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_get_err")] public static extern long CResultHTLCDescriptorDecodeErrorZGetErr(long _owner);
	// void CResult_NoneNoneZ_get_ok(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_ok")] public static extern void CResultNoneNoneZGetOk(long _owner);
	// void CResult_NoneNoneZ_get_err(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_err")] public static extern void CResultNoneNoneZGetErr(long _owner);
	// struct LDKPublicKey CResult_PublicKeyNoneZ_get_ok(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_ok")] public static extern long CResultPublicKeyNoneZGetOk(long _owner);
	// void CResult_PublicKeyNoneZ_get_err(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_err")] public static extern void CResultPublicKeyNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_BigEndianScalarZ_ty_from_ptr")] public static extern long LDKCOptionBigEndianScalarZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_BigEndianScalarZ_Some_get_some")] public static extern long LDKCOptionBigEndianScalarZSomeGetSome(long ptr);
	// struct LDKRecoverableSignature CResult_RecoverableSignatureNoneZ_get_ok(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_ok")] public static extern long CResultRecoverableSignatureNoneZGetOk(long _owner);
	// void CResult_RecoverableSignatureNoneZ_get_err(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_err")] public static extern void CResultRecoverableSignatureNoneZGetErr(long _owner);
	// struct LDKSchnorrSignature CResult_SchnorrSignatureNoneZ_get_ok(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_get_ok")] public static extern long CResultSchnorrSignatureNoneZGetOk(long _owner);
	// void CResult_SchnorrSignatureNoneZ_get_err(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_get_err")] public static extern void CResultSchnorrSignatureNoneZGetErr(long _owner);
	// struct LDKECDSASignature CResult_ECDSASignatureNoneZ_get_ok(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_get_ok")] public static extern long CResultECDSASignatureNoneZGetOk(long _owner);
	// void CResult_ECDSASignatureNoneZ_get_err(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_get_err")] public static extern void CResultECDSASignatureNoneZGetErr(long _owner);
	// struct LDKECDSASignature C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_a(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_a")] public static extern long C2TupleECDSASignatureCVecECDSASignatureZZGetA(long _owner);
	// struct LDKCVec_ECDSASignatureZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_b(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_b")] public static extern long C2TupleECDSASignatureCVecECDSASignatureZZGetB(long _owner);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_ok(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_ok")] public static extern long CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZGetOk(long _owner);
	// void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_err(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_err")] public static extern void CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZGetErr(long _owner);
	public interface LDKChannelSigner {
		long GetPerCommitmentPoint(long idx);
		long ReleaseCommitmentSecret(long idx);
		long ValidateHolderCommitment(long holder_tx, long outbound_htlc_preimages);
		long ValidateCounterpartyRevocation(long idx, long secret);
		long ChannelKeysId();
		void ProvideChannelParameters(long channel_parameters);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelSigner_new")] public static extern long LDKChannelSignerNewNative(long impl_idx, long pubkeys);
	public static long[] LDKChannelSignerNew(LDKChannelSigner impl, long pubkeys) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKChannelSignerNewNative(i, pubkeys);
		ret[1] = i;
		return ret;
	}
	// LDKPublicKey ChannelSigner_get_per_commitment_point LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_get_per_commitment_point")] public static extern long ChannelSignerGetPerCommitmentPoint(long _this_arg, long _idx);
	// LDKThirtyTwoBytes ChannelSigner_release_commitment_secret LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_release_commitment_secret")] public static extern long ChannelSignerReleaseCommitmentSecret(long _this_arg, long _idx);
	// LDKCResult_NoneNoneZ ChannelSigner_validate_holder_commitment LDKChannelSigner *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR holder_tx, struct LDKCVec_ThirtyTwoBytesZ outbound_htlc_preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_validate_holder_commitment")] public static extern long ChannelSignerValidateHolderCommitment(long _this_arg, long _holder_tx, long _outbound_htlc_preimages);
	// LDKCResult_NoneNoneZ ChannelSigner_validate_counterparty_revocation LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx, const uint8_t (*secret)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_validate_counterparty_revocation")] public static extern long ChannelSignerValidateCounterpartyRevocation(long _this_arg, long _idx, long _secret);
	// LDKThirtyTwoBytes ChannelSigner_channel_keys_id LDKChannelSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_channel_keys_id")] public static extern long ChannelSignerChannelKeysId(long _this_arg);
	// void ChannelSigner_provide_channel_parameters LDKChannelSigner *NONNULL_PTR this_arg, const struct LDKChannelTransactionParameters *NONNULL_PTR channel_parameters
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_provide_channel_parameters")] public static extern void ChannelSignerProvideChannelParameters(long _this_arg, long _channel_parameters);
	// LDKChannelPublicKeys ChannelSigner_get_pubkeys LDKChannelSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_get_pubkeys")] public static extern long ChannelSignerGetPubkeys(long _this_arg);
	public interface LDKEcdsaChannelSigner {
		long SignCounterpartyCommitment(long commitment_tx, long inbound_htlc_preimages, long outbound_htlc_preimages);
		long SignHolderCommitment(long commitment_tx);
		long SignJusticeRevokedOutput(long justice_tx, long input, long amount, long per_commitment_key);
		long SignJusticeRevokedHtlc(long justice_tx, long input, long amount, long per_commitment_key, long htlc);
		long SignHolderHtlcTransaction(long htlc_tx, long input, long htlc_descriptor);
		long SignCounterpartyHtlcTransaction(long htlc_tx, long input, long amount, long per_commitment_point, long htlc);
		long SignClosingTransaction(long closing_tx);
		long SignHolderAnchorInput(long anchor_tx, long input);
		long SignChannelAnnouncementWithFundingKey(long msg);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEcdsaChannelSigner_new")] public static extern long LDKEcdsaChannelSignerNewNative(long impl_idx, long ChannelSigner, long pubkeys);
	public static long[] LDKEcdsaChannelSignerNew(LDKEcdsaChannelSigner impl, long ChannelSigner, long pubkeys) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEcdsaChannelSignerNewNative(i, ChannelSigner, pubkeys);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ EcdsaChannelSigner_sign_counterparty_commitment LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKCommitmentTransaction *NONNULL_PTR commitment_tx, struct LDKCVec_ThirtyTwoBytesZ inbound_htlc_preimages, struct LDKCVec_ThirtyTwoBytesZ outbound_htlc_preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_counterparty_commitment")] public static extern long EcdsaChannelSignerSignCounterpartyCommitment(long _this_arg, long _commitment_tx, long _inbound_htlc_preimages, long _outbound_htlc_preimages);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_commitment LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR commitment_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_commitment")] public static extern long EcdsaChannelSignerSignHolderCommitment(long _this_arg, long _commitment_tx);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_justice_revoked_output LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_justice_revoked_output")] public static extern long EcdsaChannelSignerSignJusticeRevokedOutput(long _this_arg, long _justice_tx, long _input, long _amount, long _per_commitment_key);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_justice_revoked_htlc LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32], const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_justice_revoked_htlc")] public static extern long EcdsaChannelSignerSignJusticeRevokedHtlc(long _this_arg, long _justice_tx, long _input, long _amount, long _per_commitment_key, long _htlc);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_htlc_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction htlc_tx, uintptr_t input, const struct LDKHTLCDescriptor *NONNULL_PTR htlc_descriptor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_htlc_transaction")] public static extern long EcdsaChannelSignerSignHolderHtlcTransaction(long _this_arg, long _htlc_tx, long _input, long _htlc_descriptor);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_counterparty_htlc_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction htlc_tx, uintptr_t input, uint64_t amount, struct LDKPublicKey per_commitment_point, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_counterparty_htlc_transaction")] public static extern long EcdsaChannelSignerSignCounterpartyHtlcTransaction(long _this_arg, long _htlc_tx, long _input, long _amount, long _per_commitment_point, long _htlc);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_closing_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKClosingTransaction *NONNULL_PTR closing_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_closing_transaction")] public static extern long EcdsaChannelSignerSignClosingTransaction(long _this_arg, long _closing_tx);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_anchor_input LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction anchor_tx, uintptr_t input
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_anchor_input")] public static extern long EcdsaChannelSignerSignHolderAnchorInput(long _this_arg, long _anchor_tx, long _input);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_channel_announcement_with_funding_key LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_channel_announcement_with_funding_key")] public static extern long EcdsaChannelSignerSignChannelAnnouncementWithFundingKey(long _this_arg, long _msg);
	public interface LDKWriteableEcdsaChannelSigner {
		long Write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWriteableEcdsaChannelSigner_new")] public static extern long LDKWriteableEcdsaChannelSignerNewNative(long impl_idx, long EcdsaChannelSigner, long ChannelSigner, long pubkeys);
	public static long[] LDKWriteableEcdsaChannelSignerNew(LDKWriteableEcdsaChannelSigner impl, long EcdsaChannelSigner, long ChannelSigner, long pubkeys) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWriteableEcdsaChannelSignerNewNative(i, EcdsaChannelSigner, ChannelSigner, pubkeys);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_u8Z WriteableEcdsaChannelSigner_write LDKWriteableEcdsaChannelSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableEcdsaChannelSigner_write")] public static extern long WriteableEcdsaChannelSignerWrite(long _this_arg);
	// struct LDKWriteableEcdsaChannelSigner CResult_WriteableEcdsaChannelSignerDecodeErrorZ_get_ok(LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_get_ok")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_WriteableEcdsaChannelSignerDecodeErrorZ_get_err(LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_get_err")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZGetErr(long _owner);
	// struct LDKCVec_u8Z CResult_CVec_u8ZNoneZ_get_ok(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_get_ok")] public static extern long CResultCVecU8ZnonezGetOk(long _owner);
	// void CResult_CVec_u8ZNoneZ_get_err(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_get_err")] public static extern void CResultCVecU8ZnonezGetErr(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptNoneZ_get_ok(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_get_ok")] public static extern long CResultShutdownScriptNoneZGetOk(long _owner);
	// void CResult_ShutdownScriptNoneZ_get_err(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_get_err")] public static extern void CResultShutdownScriptNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_ty_from_ptr")] public static extern long LDKCOptionU16ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_Some_get_some")] public static extern short LDKCOptionU16ZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_boolZ_ty_from_ptr")] public static extern long LDKCOptionBoolzTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_boolZ_Some_get_some")] public static extern bool LDKCOptionBoolzSomeGetSome(long ptr);
	// struct LDKWitness CResult_WitnessNoneZ_get_ok(LDKCResult_WitnessNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_get_ok")] public static extern long CResultWitnessNoneZGetOk(long _owner);
	// void CResult_WitnessNoneZ_get_err(LDKCResult_WitnessNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_get_err")] public static extern void CResultWitnessNoneZGetErr(long _owner);
	// struct LDKInMemorySigner CResult_InMemorySignerDecodeErrorZ_get_ok(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_ok")] public static extern long CResultInMemorySignerDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_InMemorySignerDecodeErrorZ_get_err(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_err")] public static extern long CResultInMemorySignerDecodeErrorZGetErr(long _owner);
	// struct LDKTransaction CResult_TransactionNoneZ_get_ok(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_ok")] public static extern long CResultTransactionNoneZGetOk(long _owner);
	// void CResult_TransactionNoneZ_get_err(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_err")] public static extern void CResultTransactionNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_ty_from_ptr")] public static extern long LDKCandidateRouteHopTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_FirstHop_get_first_hop")] public static extern long LDKCandidateRouteHopFirstHopGetFirstHop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_PublicHop_get_public_hop")] public static extern long LDKCandidateRouteHopPublicHopGetPublicHop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_PrivateHop_get_private_hop")] public static extern long LDKCandidateRouteHopPrivateHopGetPrivateHop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_Blinded_get_blinded")] public static extern long LDKCandidateRouteHopBlindedGetBlinded(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_OneHopBlinded_get_one_hop_blinded")] public static extern long LDKCandidateRouteHopOneHopBlindedGetOneHopBlinded(long ptr);
	public interface LDKScoreLookUp {
		long ChannelPenaltyMsat(long candidate, long usage, long score_params);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScoreLookUp_new")] public static extern long LDKScoreLookUpNewNative(long impl_idx);
	public static long[] LDKScoreLookUpNew(LDKScoreLookUp impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScoreLookUpNewNative(i);
		ret[1] = i;
		return ret;
	}
	// uint64_t ScoreLookUp_channel_penalty_msat LDKScoreLookUp *NONNULL_PTR this_arg, const struct LDKCandidateRouteHop *NONNULL_PTR candidate, struct LDKChannelUsage usage, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR score_params
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreLookUp_channel_penalty_msat")] public static extern long ScoreLookUpChannelPenaltyMsat(long _this_arg, long _candidate, long _usage, long _score_params);
	public interface LDKScoreUpdate {
		void PaymentPathFailed(long path, long short_channel_id, long duration_since_epoch);
		void PaymentPathSuccessful(long path, long duration_since_epoch);
		void ProbeFailed(long path, long short_channel_id, long duration_since_epoch);
		void ProbeSuccessful(long path, long duration_since_epoch);
		void TimePassed(long duration_since_epoch);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScoreUpdate_new")] public static extern long LDKScoreUpdateNewNative(long impl_idx);
	public static long[] LDKScoreUpdateNew(LDKScoreUpdate impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScoreUpdateNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void ScoreUpdate_payment_path_failed LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t short_channel_id, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_payment_path_failed")] public static extern void ScoreUpdatePaymentPathFailed(long _this_arg, long _path, long _short_channel_id, long _duration_since_epoch);
	// void ScoreUpdate_payment_path_successful LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_payment_path_successful")] public static extern void ScoreUpdatePaymentPathSuccessful(long _this_arg, long _path, long _duration_since_epoch);
	// void ScoreUpdate_probe_failed LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t short_channel_id, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_probe_failed")] public static extern void ScoreUpdateProbeFailed(long _this_arg, long _path, long _short_channel_id, long _duration_since_epoch);
	// void ScoreUpdate_probe_successful LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_probe_successful")] public static extern void ScoreUpdateProbeSuccessful(long _this_arg, long _path, long _duration_since_epoch);
	// void ScoreUpdate_time_passed LDKScoreUpdate *NONNULL_PTR this_arg, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_time_passed")] public static extern void ScoreUpdateTimePassed(long _this_arg, long _duration_since_epoch);
	public interface LDKLockableScore {
		long ReadLock();
		long WriteLock();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLockableScore_new")] public static extern long LDKLockableScoreNewNative(long impl_idx);
	public static long[] LDKLockableScoreNew(LDKLockableScore impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKLockableScoreNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKScoreLookUp LockableScore_read_lock LDKLockableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_read_lock")] public static extern long LockableScoreReadLock(long _this_arg);
	// LDKScoreUpdate LockableScore_write_lock LDKLockableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_write_lock")] public static extern long LockableScoreWriteLock(long _this_arg);
	public interface LDKWriteableScore {
		long Write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWriteableScore_new")] public static extern long LDKWriteableScoreNewNative(long impl_idx, long LockableScore);
	public static long[] LDKWriteableScoreNew(LDKWriteableScore impl, long LockableScore) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWriteableScoreNewNative(i, LockableScore);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_u8Z WriteableScore_write LDKWriteableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_write")] public static extern long WriteableScoreWrite(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_ty_from_ptr")] public static extern long LDKCOptionWriteableScoreZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_Some_get_some")] public static extern long LDKCOptionWriteableScoreZSomeGetSome(long ptr);
	// void CResult_NoneIOErrorZ_get_ok(LDKCResult_NoneIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_get_ok")] public static extern void CResultNoneIOErrorZGetOk(long _owner);
	// enum LDKIOError CResult_NoneIOErrorZ_get_err(LDKCResult_NoneIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_get_err")] public static extern IOError CResultNoneIOErrorZGetErr(long _owner);
	// struct LDKRoute CResult_RouteLightningErrorZ_get_ok(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_ok")] public static extern long CResultRouteLightningErrorZGetOk(long _owner);
	// struct LDKLightningError CResult_RouteLightningErrorZ_get_err(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_err")] public static extern long CResultRouteLightningErrorZGetErr(long _owner);
	// struct LDKBlindedPayInfo C2Tuple_BlindedPayInfoBlindedPathZ_get_a(LDKC2Tuple_BlindedPayInfoBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_get_a")] public static extern long C2TupleBlindedPayInfoBlindedPathZGetA(long _owner);
	// struct LDKBlindedPath C2Tuple_BlindedPayInfoBlindedPathZ_get_b(LDKC2Tuple_BlindedPayInfoBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_get_b")] public static extern long C2TupleBlindedPayInfoBlindedPathZGetB(long _owner);
	// struct LDKCVec_C2Tuple_BlindedPayInfoBlindedPathZZ CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_get_ok(LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_get_ok")] public static extern long CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZGetOk(long _owner);
	// void CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_get_err(LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_get_err")] public static extern void CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZGetErr(long _owner);
	// struct LDKOnionMessagePath CResult_OnionMessagePathNoneZ_get_ok(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_get_ok")] public static extern long CResultOnionMessagePathNoneZGetOk(long _owner);
	// void CResult_OnionMessagePathNoneZ_get_err(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_get_err")] public static extern void CResultOnionMessagePathNoneZGetErr(long _owner);
	// struct LDKCVec_BlindedPathZ CResult_CVec_BlindedPathZNoneZ_get_ok(LDKCResult_CVec_BlindedPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_get_ok")] public static extern long CResultCVecBlindedPathZNoneZGetOk(long _owner);
	// void CResult_CVec_BlindedPathZNoneZ_get_err(LDKCResult_CVec_BlindedPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_get_err")] public static extern void CResultCVecBlindedPathZNoneZGetErr(long _owner);
	// struct LDKInFlightHtlcs CResult_InFlightHtlcsDecodeErrorZ_get_ok(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_ok")] public static extern long CResultInFlightHtlcsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_InFlightHtlcsDecodeErrorZ_get_err(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_err")] public static extern long CResultInFlightHtlcsDecodeErrorZGetErr(long _owner);
	// struct LDKRouteHop CResult_RouteHopDecodeErrorZ_get_ok(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_ok")] public static extern long CResultRouteHopDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RouteHopDecodeErrorZ_get_err(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_err")] public static extern long CResultRouteHopDecodeErrorZGetErr(long _owner);
	// struct LDKBlindedTail CResult_BlindedTailDecodeErrorZ_get_ok(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_get_ok")] public static extern long CResultBlindedTailDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedTailDecodeErrorZ_get_err(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_get_err")] public static extern long CResultBlindedTailDecodeErrorZGetErr(long _owner);
	// struct LDKRoute CResult_RouteDecodeErrorZ_get_ok(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_ok")] public static extern long CResultRouteDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RouteDecodeErrorZ_get_err(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_err")] public static extern long CResultRouteDecodeErrorZGetErr(long _owner);
	// struct LDKRouteParameters CResult_RouteParametersDecodeErrorZ_get_ok(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_ok")] public static extern long CResultRouteParametersDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RouteParametersDecodeErrorZ_get_err(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_err")] public static extern long CResultRouteParametersDecodeErrorZGetErr(long _owner);
	// struct LDKPaymentParameters CResult_PaymentParametersDecodeErrorZ_get_ok(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_ok")] public static extern long CResultPaymentParametersDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PaymentParametersDecodeErrorZ_get_err(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_err")] public static extern long CResultPaymentParametersDecodeErrorZGetErr(long _owner);
	// struct LDKRouteHint CResult_RouteHintDecodeErrorZ_get_ok(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_ok")] public static extern long CResultRouteHintDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RouteHintDecodeErrorZ_get_err(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_err")] public static extern long CResultRouteHintDecodeErrorZGetErr(long _owner);
	// struct LDKRouteHintHop CResult_RouteHintHopDecodeErrorZ_get_ok(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_ok")] public static extern long CResultRouteHintHopDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RouteHintHopDecodeErrorZ_get_err(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_err")] public static extern long CResultRouteHintHopDecodeErrorZGetErr(long _owner);
	// struct LDKFixedPenaltyScorer CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_ok")] public static extern long CResultFixedPenaltyScorerDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_FixedPenaltyScorerDecodeErrorZ_get_err(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_err")] public static extern long CResultFixedPenaltyScorerDecodeErrorZGetErr(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_a(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_a")] public static extern long C2TupleU64U64ZGetA(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_b(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_b")] public static extern long C2TupleU64U64ZGetB(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_ty_from_ptr")] public static extern long LDKCOptionC2TupleU64U64ZzTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_Some_get_some")] public static extern long LDKCOptionC2TupleU64U64ZzSomeGetSome(long ptr);
	// struct LDKThirtyTwoU16s C2Tuple_Z_get_a(LDKC2Tuple_Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_get_a")] public static extern long C2TupleZGetA(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple_Z_get_b(LDKC2Tuple_Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_get_b")] public static extern long C2TupleZGetB(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple__u1632_u1632Z_get_a(LDKC2Tuple__u1632_u1632Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_get_a")] public static extern long C2TupleU1632U1632ZGetA(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple__u1632_u1632Z_get_b(LDKC2Tuple__u1632_u1632Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_get_b")] public static extern long C2TupleU1632U1632ZGetB(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_ty_from_ptr")] public static extern long LDKCOptionC2TupleThirtyTwoU16sThirtyTwoU16sZZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_Some_get_some")] public static extern long LDKCOptionC2TupleThirtyTwoU16sThirtyTwoU16sZZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_f64Z_ty_from_ptr")] public static extern long LDKCOptionF64ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_f64Z_Some_get_some")] public static extern double LDKCOptionF64ZSomeGetSome(long ptr);
	public interface LDKLogger {
		void Log(long record);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLogger_new")] public static extern long LDKLoggerNewNative(long impl_idx);
	public static long[] LDKLoggerNew(LDKLogger impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKLoggerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// struct LDKProbabilisticScorer CResult_ProbabilisticScorerDecodeErrorZ_get_ok(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_ok")] public static extern long CResultProbabilisticScorerDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ProbabilisticScorerDecodeErrorZ_get_err(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_err")] public static extern long CResultProbabilisticScorerDecodeErrorZGetErr(long _owner);
	// uintptr_t C2Tuple_usizeTransactionZ_get_a(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_a")] public static extern long C2TupleUsizetransactionzGetA(long _owner);
	// struct LDKTransaction C2Tuple_usizeTransactionZ_get_b(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_b")] public static extern long C2TupleUsizetransactionzGetB(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_a(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_a")] public static extern long C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZGetA(long _owner);
	// uint32_t C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_b(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_b")] public static extern int C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZGetB(long _owner);
	// struct LDKCOption_ThirtyTwoBytesZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_c(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_c")] public static extern long C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZGetC(long _owner);
	// enum LDKChannelMonitorUpdateStatus CResult_ChannelMonitorUpdateStatusNoneZ_get_ok(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_get_ok")] public static extern ChannelMonitorUpdateStatus CResultChannelMonitorUpdateStatusNoneZGetOk(long _owner);
	// void CResult_ChannelMonitorUpdateStatusNoneZ_get_err(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_get_err")] public static extern void CResultChannelMonitorUpdateStatusNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_ty_from_ptr")] public static extern long LDKMonitorEventTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HTLCEvent_get_htlc_event")] public static extern long LDKMonitorEventHTLCEventGetHtlcEvent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HolderForceClosed_get_holder_force_closed")] public static extern long LDKMonitorEventHolderForceClosedGetHolderForceClosed(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_funding_txo")] public static extern long LDKMonitorEventCompletedGetFundingTxo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_monitor_update_id")] public static extern long LDKMonitorEventCompletedGetMonitorUpdateId(long ptr);
	// struct LDKOutPoint C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_a(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_a")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZGetA(long _owner);
	// struct LDKCVec_MonitorEventZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_b(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_b")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZGetB(long _owner);
	// struct LDKPublicKey C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_c(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_get_c")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZGetC(long _owner);
	// struct LDKInitFeatures CResult_InitFeaturesDecodeErrorZ_get_ok(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_ok")] public static extern long CResultInitFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_InitFeaturesDecodeErrorZ_get_err(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_err")] public static extern long CResultInitFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKChannelFeatures CResult_ChannelFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_ok")] public static extern long CResultChannelFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_err")] public static extern long CResultChannelFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKNodeFeatures CResult_NodeFeaturesDecodeErrorZ_get_ok(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_ok")] public static extern long CResultNodeFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeFeaturesDecodeErrorZ_get_err(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_err")] public static extern long CResultNodeFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKBolt11InvoiceFeatures CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_ok")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_err")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKBolt12InvoiceFeatures CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_ok")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_err")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKBlindedHopFeatures CResult_BlindedHopFeaturesDecodeErrorZ_get_ok(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_get_ok")] public static extern long CResultBlindedHopFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedHopFeaturesDecodeErrorZ_get_err(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_get_err")] public static extern long CResultBlindedHopFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKChannelTypeFeatures CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok")] public static extern long CResultChannelTypeFeaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_err")] public static extern long CResultChannelTypeFeaturesDecodeErrorZGetErr(long _owner);
	// struct LDKOffer CResult_OfferBolt12ParseErrorZ_get_ok(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_get_ok")] public static extern long CResultOfferBolt12ParseErrorZGetOk(long _owner);
	// struct LDKBolt12ParseError CResult_OfferBolt12ParseErrorZ_get_err(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_get_err")] public static extern long CResultOfferBolt12ParseErrorZGetErr(long _owner);
	// struct LDKPublicKey CResult_PublicKeySecp256k1ErrorZ_get_ok(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_get_ok")] public static extern long CResultPublicKeySecp256k1ErrorZGetOk(long _owner);
	// enum LDKSecp256k1Error CResult_PublicKeySecp256k1ErrorZ_get_err(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_get_err")] public static extern Secp256k1Error CResultPublicKeySecp256k1ErrorZGetErr(long _owner);
	// struct LDKNodeId CResult_NodeIdDecodeErrorZ_get_ok(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_ok")] public static extern long CResultNodeIdDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeIdDecodeErrorZ_get_err(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_err")] public static extern long CResultNodeIdDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ty_from_ptr")] public static extern long LDKNetworkUpdateTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelUpdateMessage_get_msg")] public static extern long LDKNetworkUpdateChannelUpdateMessageGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_short_channel_id")] public static extern long LDKNetworkUpdateChannelFailureGetShortChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_is_permanent")] public static extern bool LDKNetworkUpdateChannelFailureGetIsPermanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_node_id")] public static extern long LDKNetworkUpdateNodeFailureGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_is_permanent")] public static extern bool LDKNetworkUpdateNodeFailureGetIsPermanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_ty_from_ptr")] public static extern long LDKCOptionNetworkUpdateZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_Some_get_some")] public static extern long LDKCOptionNetworkUpdateZSomeGetSome(long ptr);
	// struct LDKCOption_NetworkUpdateZ CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_err")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZGetErr(long _owner);
	// struct LDKTxOut CResult_TxOutUtxoLookupErrorZ_get_ok(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_get_ok")] public static extern long CResultTxOutUtxoLookupErrorZGetOk(long _owner);
	// enum LDKUtxoLookupError CResult_TxOutUtxoLookupErrorZ_get_err(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_get_err")] public static extern UtxoLookupError CResultTxOutUtxoLookupErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_ty_from_ptr")] public static extern long LDKUtxoResultTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_Sync_get_sync")] public static extern long LDKUtxoResultSyncGetSync(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_Async_get_async")] public static extern long LDKUtxoResultAsyncGetAsync(long ptr);
	public interface LDKUtxoLookup {
		long GetUtxo(long chain_hash, long short_channel_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoLookup_new")] public static extern long LDKUtxoLookupNewNative(long impl_idx);
	public static long[] LDKUtxoLookupNew(LDKUtxoLookup impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKUtxoLookupNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKUtxoResult UtxoLookup_get_utxo LDKUtxoLookup *NONNULL_PTR this_arg, const uint8_t (*chain_hash)[32], uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookup_get_utxo")] public static extern long UtxoLookupGetUtxo(long _this_arg, long _chain_hash, long _short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_UtxoLookupZ_ty_from_ptr")] public static extern long LDKCOptionUtxoLookupZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_UtxoLookupZ_Some_get_some")] public static extern long LDKCOptionUtxoLookupZSomeGetSome(long ptr);
	// void CResult_NoneLightningErrorZ_get_ok(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_ok")] public static extern void CResultNoneLightningErrorZGetOk(long _owner);
	// struct LDKLightningError CResult_NoneLightningErrorZ_get_err(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_err")] public static extern long CResultNoneLightningErrorZGetErr(long _owner);
	// bool CResult_boolLightningErrorZ_get_ok(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_ok")] public static extern bool CResultBoollightningerrorzGetOk(long _owner);
	// struct LDKLightningError CResult_boolLightningErrorZ_get_err(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_err")] public static extern long CResultBoollightningerrorzGetErr(long _owner);
	// struct LDKChannelAnnouncement C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZGetA(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZGetB(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZGetC(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_ty_from_ptr")] public static extern long LDKCOptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_Some_get_some")] public static extern long LDKCOptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_ty_from_ptr")] public static extern long LDKErrorActionTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_DisconnectPeer_get_msg")] public static extern long LDKErrorActionDisconnectPeerGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_DisconnectPeerWithWarning_get_msg")] public static extern long LDKErrorActionDisconnectPeerWithWarningGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_IgnoreAndLog_get_ignore_and_log")] public static extern Level LDKErrorActionIgnoreAndLogGetIgnoreAndLog(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendErrorMessage_get_msg")] public static extern long LDKErrorActionSendErrorMessageGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_msg")] public static extern long LDKErrorActionSendWarningMessageGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_log_level")] public static extern Level LDKErrorActionSendWarningMessageGetLogLevel(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_ty_from_ptr")] public static extern long LDKMessageSendEventTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_node_id")] public static extern long LDKMessageSendEventSendAcceptChannelGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_msg")] public static extern long LDKMessageSendEventSendAcceptChannelGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannelV2_get_node_id")] public static extern long LDKMessageSendEventSendAcceptChannelV2GetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannelV2_get_msg")] public static extern long LDKMessageSendEventSendAcceptChannelV2GetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_node_id")] public static extern long LDKMessageSendEventSendOpenChannelGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_msg")] public static extern long LDKMessageSendEventSendOpenChannelGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannelV2_get_node_id")] public static extern long LDKMessageSendEventSendOpenChannelV2GetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannelV2_get_msg")] public static extern long LDKMessageSendEventSendOpenChannelV2GetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_node_id")] public static extern long LDKMessageSendEventSendFundingCreatedGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_msg")] public static extern long LDKMessageSendEventSendFundingCreatedGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_node_id")] public static extern long LDKMessageSendEventSendFundingSignedGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_msg")] public static extern long LDKMessageSendEventSendFundingSignedGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendStfu_get_node_id")] public static extern long LDKMessageSendEventSendStfuGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendStfu_get_msg")] public static extern long LDKMessageSendEventSendStfuGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSplice_get_node_id")] public static extern long LDKMessageSendEventSendSpliceGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSplice_get_msg")] public static extern long LDKMessageSendEventSendSpliceGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceAck_get_node_id")] public static extern long LDKMessageSendEventSendSpliceAckGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceAck_get_msg")] public static extern long LDKMessageSendEventSendSpliceAckGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceLocked_get_node_id")] public static extern long LDKMessageSendEventSendSpliceLockedGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceLocked_get_msg")] public static extern long LDKMessageSendEventSendSpliceLockedGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddInput_get_node_id")] public static extern long LDKMessageSendEventSendTxAddInputGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddInput_get_msg")] public static extern long LDKMessageSendEventSendTxAddInputGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddOutput_get_node_id")] public static extern long LDKMessageSendEventSendTxAddOutputGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddOutput_get_msg")] public static extern long LDKMessageSendEventSendTxAddOutputGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveInput_get_node_id")] public static extern long LDKMessageSendEventSendTxRemoveInputGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveInput_get_msg")] public static extern long LDKMessageSendEventSendTxRemoveInputGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveOutput_get_node_id")] public static extern long LDKMessageSendEventSendTxRemoveOutputGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveOutput_get_msg")] public static extern long LDKMessageSendEventSendTxRemoveOutputGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxComplete_get_node_id")] public static extern long LDKMessageSendEventSendTxCompleteGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxComplete_get_msg")] public static extern long LDKMessageSendEventSendTxCompleteGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxSignatures_get_node_id")] public static extern long LDKMessageSendEventSendTxSignaturesGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxSignatures_get_msg")] public static extern long LDKMessageSendEventSendTxSignaturesGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxInitRbf_get_node_id")] public static extern long LDKMessageSendEventSendTxInitRbfGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxInitRbf_get_msg")] public static extern long LDKMessageSendEventSendTxInitRbfGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAckRbf_get_node_id")] public static extern long LDKMessageSendEventSendTxAckRbfGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAckRbf_get_msg")] public static extern long LDKMessageSendEventSendTxAckRbfGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAbort_get_node_id")] public static extern long LDKMessageSendEventSendTxAbortGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAbort_get_msg")] public static extern long LDKMessageSendEventSendTxAbortGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_node_id")] public static extern long LDKMessageSendEventSendChannelReadyGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_msg")] public static extern long LDKMessageSendEventSendChannelReadyGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id")] public static extern long LDKMessageSendEventSendAnnouncementSignaturesGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_msg")] public static extern long LDKMessageSendEventSendAnnouncementSignaturesGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_node_id")] public static extern long LDKMessageSendEventUpdateHTLCsGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_updates")] public static extern long LDKMessageSendEventUpdateHTLCsGetUpdates(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_node_id")] public static extern long LDKMessageSendEventSendRevokeAndACKGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_msg")] public static extern long LDKMessageSendEventSendRevokeAndACKGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_node_id")] public static extern long LDKMessageSendEventSendClosingSignedGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_msg")] public static extern long LDKMessageSendEventSendClosingSignedGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_node_id")] public static extern long LDKMessageSendEventSendShutdownGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_msg")] public static extern long LDKMessageSendEventSendShutdownGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_node_id")] public static extern long LDKMessageSendEventSendChannelReestablishGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_msg")] public static extern long LDKMessageSendEventSendChannelReestablishGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_node_id")] public static extern long LDKMessageSendEventSendChannelAnnouncementGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEventSendChannelAnnouncementGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEventSendChannelAnnouncementGetUpdateMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEventBroadcastChannelAnnouncementGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEventBroadcastChannelAnnouncementGetUpdateMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelUpdate_get_msg")] public static extern long LDKMessageSendEventBroadcastChannelUpdateGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastNodeAnnouncement_get_msg")] public static extern long LDKMessageSendEventBroadcastNodeAnnouncementGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_node_id")] public static extern long LDKMessageSendEventSendChannelUpdateGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_msg")] public static extern long LDKMessageSendEventSendChannelUpdateGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_node_id")] public static extern long LDKMessageSendEventHandleErrorGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_action")] public static extern long LDKMessageSendEventHandleErrorGetAction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_node_id")] public static extern long LDKMessageSendEventSendChannelRangeQueryGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_msg")] public static extern long LDKMessageSendEventSendChannelRangeQueryGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_node_id")] public static extern long LDKMessageSendEventSendShortIdsQueryGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_msg")] public static extern long LDKMessageSendEventSendShortIdsQueryGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_node_id")] public static extern long LDKMessageSendEventSendReplyChannelRangeGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_msg")] public static extern long LDKMessageSendEventSendReplyChannelRangeGetMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id")] public static extern long LDKMessageSendEventSendGossipTimestampFilterGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_msg")] public static extern long LDKMessageSendEventSendGossipTimestampFilterGetMsg(long ptr);
	// struct LDKChannelUpdateInfo CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_ok")] public static extern long CResultChannelUpdateInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateInfoDecodeErrorZ_get_err(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_err")] public static extern long CResultChannelUpdateInfoDecodeErrorZGetErr(long _owner);
	// struct LDKChannelInfo CResult_ChannelInfoDecodeErrorZ_get_ok(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_ok")] public static extern long CResultChannelInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelInfoDecodeErrorZ_get_err(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_err")] public static extern long CResultChannelInfoDecodeErrorZGetErr(long _owner);
	// struct LDKRoutingFees CResult_RoutingFeesDecodeErrorZ_get_ok(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_ok")] public static extern long CResultRoutingFeesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RoutingFeesDecodeErrorZ_get_err(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_err")] public static extern long CResultRoutingFeesDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_ty_from_ptr")] public static extern long LDKSocketAddressTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV4_get_addr")] public static extern long LDKSocketAddressTcpIpV4GetAddr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV4_get_port")] public static extern short LDKSocketAddressTcpIpV4GetPort(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV6_get_addr")] public static extern long LDKSocketAddressTcpIpV6GetAddr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV6_get_port")] public static extern short LDKSocketAddressTcpIpV6GetPort(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV2_get_onion_v2")] public static extern long LDKSocketAddressOnionV2GetOnionV2(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_ed25519_pubkey")] public static extern long LDKSocketAddressOnionV3GetEd25519Pubkey(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_checksum")] public static extern short LDKSocketAddressOnionV3GetChecksum(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_version")] public static extern byte LDKSocketAddressOnionV3GetVersion(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_port")] public static extern short LDKSocketAddressOnionV3GetPort(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_Hostname_get_hostname")] public static extern long LDKSocketAddressHostnameGetHostname(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_Hostname_get_port")] public static extern short LDKSocketAddressHostnameGetPort(long ptr);
	// struct LDKNodeAnnouncementInfo CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_err")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZGetErr(long _owner);
	// struct LDKNodeAlias CResult_NodeAliasDecodeErrorZ_get_ok(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_ok")] public static extern long CResultNodeAliasDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeAliasDecodeErrorZ_get_err(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_err")] public static extern long CResultNodeAliasDecodeErrorZGetErr(long _owner);
	// struct LDKNodeInfo CResult_NodeInfoDecodeErrorZ_get_ok(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_ok")] public static extern long CResultNodeInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeInfoDecodeErrorZ_get_err(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_err")] public static extern long CResultNodeInfoDecodeErrorZGetErr(long _owner);
	// struct LDKNetworkGraph CResult_NetworkGraphDecodeErrorZ_get_ok(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_ok")] public static extern long CResultNetworkGraphDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NetworkGraphDecodeErrorZ_get_err(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_err")] public static extern long CResultNetworkGraphDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_SocketAddressZZ_ty_from_ptr")] public static extern long LDKCOptionCVecSocketAddressZZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_SocketAddressZZ_Some_get_some")] public static extern long LDKCOptionCVecSocketAddressZZSomeGetSome(long ptr);
	// struct LDKPendingHTLCInfo CResult_PendingHTLCInfoInboundHTLCErrZ_get_ok(LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_get_ok")] public static extern long CResultPendingHTLCInfoInboundHTLCErrZGetOk(long _owner);
	// struct LDKInboundHTLCErr CResult_PendingHTLCInfoInboundHTLCErrZ_get_err(LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_get_err")] public static extern long CResultPendingHTLCInfoInboundHTLCErrZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TxOutZ_ty_from_ptr")] public static extern long LDKCOptionTxOutZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TxOutZ_Some_get_some")] public static extern long LDKCOptionTxOutZSomeGetSome(long ptr);
	// struct LDKCoinSelection CResult_CoinSelectionNoneZ_get_ok(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_get_ok")] public static extern long CResultCoinSelectionNoneZGetOk(long _owner);
	// void CResult_CoinSelectionNoneZ_get_err(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_get_err")] public static extern void CResultCoinSelectionNoneZGetErr(long _owner);
	// struct LDKCVec_UtxoZ CResult_CVec_UtxoZNoneZ_get_ok(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_get_ok")] public static extern long CResultCVecUtxoZNoneZGetOk(long _owner);
	// void CResult_CVec_UtxoZNoneZ_get_err(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_get_err")] public static extern void CResultCVecUtxoZNoneZGetErr(long _owner);
	// uint64_t C2Tuple_u64u16Z_get_a(LDKC2Tuple_u64u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_get_a")] public static extern long C2TupleU64U16ZGetA(long _owner);
	// uint16_t C2Tuple_u64u16Z_get_b(LDKC2Tuple_u64u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_get_b")] public static extern short C2TupleU64U16ZGetB(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u16ZZ_ty_from_ptr")] public static extern long LDKCOptionC2TupleU64U16ZzTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u16ZZ_Some_get_some")] public static extern long LDKCOptionC2TupleU64U16ZzSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ChannelShutdownStateZ_ty_from_ptr")] public static extern long LDKCOptionChannelShutdownStateZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ChannelShutdownStateZ_Some_get_some")] public static extern ChannelShutdownState LDKCOptionChannelShutdownStateZSomeGetSome(long ptr);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesAPIErrorZ_get_ok(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_get_ok")] public static extern long CResultThirtyTwoBytesAPIErrorZGetOk(long _owner);
	// struct LDKAPIError CResult_ThirtyTwoBytesAPIErrorZ_get_err(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_get_err")] public static extern long CResultThirtyTwoBytesAPIErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_ty_from_ptr")] public static extern long LDKRecentPaymentDetailsTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_AwaitingInvoice_get_payment_id")] public static extern long LDKRecentPaymentDetailsAwaitingInvoiceGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_payment_id")] public static extern long LDKRecentPaymentDetailsPendingGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_payment_hash")] public static extern long LDKRecentPaymentDetailsPendingGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_total_msat")] public static extern long LDKRecentPaymentDetailsPendingGetTotalMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Fulfilled_get_payment_id")] public static extern long LDKRecentPaymentDetailsFulfilledGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Fulfilled_get_payment_hash")] public static extern long LDKRecentPaymentDetailsFulfilledGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Abandoned_get_payment_id")] public static extern long LDKRecentPaymentDetailsAbandonedGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Abandoned_get_payment_hash")] public static extern long LDKRecentPaymentDetailsAbandonedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_ty_from_ptr")] public static extern long LDKPaymentSendFailureTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_ParameterError_get_parameter_error")] public static extern long LDKPaymentSendFailureParameterErrorGetParameterError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PathParameterError_get_path_parameter_error")] public static extern long LDKPaymentSendFailurePathParameterErrorGetPathParameterError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_AllFailedResendSafe_get_all_failed_resend_safe")] public static extern long LDKPaymentSendFailureAllFailedResendSafeGetAllFailedResendSafe(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_results")] public static extern long LDKPaymentSendFailurePartialFailureGetResults(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_failed_paths_retry")] public static extern long LDKPaymentSendFailurePartialFailureGetFailedPathsRetry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentSendFailure_PartialFailure_get_payment_id")] public static extern long LDKPaymentSendFailurePartialFailureGetPaymentId(long ptr);
	// void CResult_NonePaymentSendFailureZ_get_ok(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_get_ok")] public static extern void CResultNonePaymentSendFailureZGetOk(long _owner);
	// struct LDKPaymentSendFailure CResult_NonePaymentSendFailureZ_get_err(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_get_err")] public static extern long CResultNonePaymentSendFailureZGetErr(long _owner);
	// void CResult_NoneRetryableSendFailureZ_get_ok(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_get_ok")] public static extern void CResultNoneRetryableSendFailureZGetOk(long _owner);
	// enum LDKRetryableSendFailure CResult_NoneRetryableSendFailureZ_get_err(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_get_err")] public static extern RetryableSendFailure CResultNoneRetryableSendFailureZGetErr(long _owner);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesPaymentSendFailureZ_get_ok(LDKCResult_ThirtyTwoBytesPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_get_ok")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZGetOk(long _owner);
	// struct LDKPaymentSendFailure CResult_ThirtyTwoBytesPaymentSendFailureZ_get_err(LDKCResult_ThirtyTwoBytesPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_get_err")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZGetErr(long _owner);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesRetryableSendFailureZ_get_ok(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_get_ok")] public static extern long CResultThirtyTwoBytesRetryableSendFailureZGetOk(long _owner);
	// enum LDKRetryableSendFailure CResult_ThirtyTwoBytesRetryableSendFailureZ_get_err(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_get_err")] public static extern RetryableSendFailure CResultThirtyTwoBytesRetryableSendFailureZGetErr(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_a(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_a")] public static extern long C2TupleThirtyTwoBytesThirtyTwoBytesZGetA(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_b(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_b")] public static extern long C2TupleThirtyTwoBytesThirtyTwoBytesZGetB(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_get_ok")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZGetOk(long _owner);
	// struct LDKPaymentSendFailure CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_get_err")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKProbeSendFailure_ty_from_ptr")] public static extern long LDKProbeSendFailureTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKProbeSendFailure_SendingFailed_get_sending_failed")] public static extern long LDKProbeSendFailureSendingFailedGetSendingFailed(long ptr);
	// struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_ok(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_ok")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZGetOk(long _owner);
	// struct LDKProbeSendFailure CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_err(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_err")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZGetErr(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesPublicKeyZ_get_a(LDKC2Tuple_ThirtyTwoBytesPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_get_a")] public static extern long C2TupleThirtyTwoBytesPublicKeyZGetA(long _owner);
	// struct LDKPublicKey C2Tuple_ThirtyTwoBytesPublicKeyZ_get_b(LDKC2Tuple_ThirtyTwoBytesPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_get_b")] public static extern long C2TupleThirtyTwoBytesPublicKeyZGetB(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_StrZ_ty_from_ptr")] public static extern long LDKCOptionStrZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_StrZ_Some_get_some")] public static extern long LDKCOptionStrZSomeGetSome(long ptr);
	// void CResult_NoneBolt12SemanticErrorZ_get_ok(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_get_ok")] public static extern void CResultNoneBolt12SemanticErrorZGetOk(long _owner);
	// enum LDKBolt12SemanticError CResult_NoneBolt12SemanticErrorZ_get_err(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResultNoneBolt12SemanticErrorZGetErr(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_ok")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZGetOk(long _owner);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_err")] public static extern void CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_ty_from_ptr")] public static extern long LDKOffersMessageTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_InvoiceRequest_get_invoice_request")] public static extern long LDKOffersMessageInvoiceRequestGetInvoiceRequest(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_Invoice_get_invoice")] public static extern long LDKOffersMessageInvoiceGetInvoice(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_InvoiceError_get_invoice_error")] public static extern long LDKOffersMessageInvoiceErrorGetInvoiceError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OffersMessageZ_ty_from_ptr")] public static extern long LDKCOptionOffersMessageZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OffersMessageZ_Some_get_some")] public static extern long LDKCOptionOffersMessageZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_ty_from_ptr")] public static extern long LDKDestinationTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_Node_get_node")] public static extern long LDKDestinationNodeGetNode(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_BlindedPath_get_blinded_path")] public static extern long LDKDestinationBlindedPathGetBlindedPath(long ptr);
	// struct LDKOffersMessage C3Tuple_OffersMessageDestinationBlindedPathZ_get_a(LDKC3Tuple_OffersMessageDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_get_a")] public static extern long C3TupleOffersMessageDestinationBlindedPathZGetA(long _owner);
	// struct LDKDestination C3Tuple_OffersMessageDestinationBlindedPathZ_get_b(LDKC3Tuple_OffersMessageDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_get_b")] public static extern long C3TupleOffersMessageDestinationBlindedPathZGetB(long _owner);
	// struct LDKBlindedPath C3Tuple_OffersMessageDestinationBlindedPathZ_get_c(LDKC3Tuple_OffersMessageDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_get_c")] public static extern long C3TupleOffersMessageDestinationBlindedPathZGetC(long _owner);
	// struct LDKCounterpartyForwardingInfo CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZGetErr(long _owner);
	// struct LDKChannelCounterparty CResult_ChannelCounterpartyDecodeErrorZ_get_ok(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_ok")] public static extern long CResultChannelCounterpartyDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelCounterpartyDecodeErrorZ_get_err(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_err")] public static extern long CResultChannelCounterpartyDecodeErrorZGetErr(long _owner);
	// struct LDKChannelDetails CResult_ChannelDetailsDecodeErrorZ_get_ok(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_ok")] public static extern long CResultChannelDetailsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelDetailsDecodeErrorZ_get_err(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_err")] public static extern long CResultChannelDetailsDecodeErrorZGetErr(long _owner);
	// struct LDKPhantomRouteHints CResult_PhantomRouteHintsDecodeErrorZ_get_ok(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_ok")] public static extern long CResultPhantomRouteHintsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PhantomRouteHintsDecodeErrorZ_get_err(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_err")] public static extern long CResultPhantomRouteHintsDecodeErrorZGetErr(long _owner);
	// struct LDKBlindedForward CResult_BlindedForwardDecodeErrorZ_get_ok(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_get_ok")] public static extern long CResultBlindedForwardDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedForwardDecodeErrorZ_get_err(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_get_err")] public static extern long CResultBlindedForwardDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ty_from_ptr")] public static extern long LDKPendingHTLCRoutingTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_onion_packet")] public static extern long LDKPendingHTLCRoutingForwardGetOnionPacket(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_short_channel_id")] public static extern long LDKPendingHTLCRoutingForwardGetShortChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_blinded")] public static extern long LDKPendingHTLCRoutingForwardGetBlinded(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_payment_data")] public static extern long LDKPendingHTLCRoutingReceiveGetPaymentData(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_payment_metadata")] public static extern long LDKPendingHTLCRoutingReceiveGetPaymentMetadata(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_incoming_cltv_expiry")] public static extern int LDKPendingHTLCRoutingReceiveGetIncomingCltvExpiry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_phantom_shared_secret")] public static extern long LDKPendingHTLCRoutingReceiveGetPhantomSharedSecret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_custom_tlvs")] public static extern long LDKPendingHTLCRoutingReceiveGetCustomTlvs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_requires_blinded_error")] public static extern bool LDKPendingHTLCRoutingReceiveGetRequiresBlindedError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_data")] public static extern long LDKPendingHTLCRoutingReceiveKeysendGetPaymentData(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_preimage")] public static extern long LDKPendingHTLCRoutingReceiveKeysendGetPaymentPreimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_metadata")] public static extern long LDKPendingHTLCRoutingReceiveKeysendGetPaymentMetadata(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_incoming_cltv_expiry")] public static extern int LDKPendingHTLCRoutingReceiveKeysendGetIncomingCltvExpiry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_custom_tlvs")] public static extern long LDKPendingHTLCRoutingReceiveKeysendGetCustomTlvs(long ptr);
	// struct LDKPendingHTLCRouting CResult_PendingHTLCRoutingDecodeErrorZ_get_ok(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_get_ok")] public static extern long CResultPendingHTLCRoutingDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PendingHTLCRoutingDecodeErrorZ_get_err(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_get_err")] public static extern long CResultPendingHTLCRoutingDecodeErrorZGetErr(long _owner);
	// struct LDKPendingHTLCInfo CResult_PendingHTLCInfoDecodeErrorZ_get_ok(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_get_ok")] public static extern long CResultPendingHTLCInfoDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PendingHTLCInfoDecodeErrorZ_get_err(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_get_err")] public static extern long CResultPendingHTLCInfoDecodeErrorZGetErr(long _owner);
	// enum LDKBlindedFailure CResult_BlindedFailureDecodeErrorZ_get_ok(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_get_ok")] public static extern BlindedFailure CResultBlindedFailureDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedFailureDecodeErrorZ_get_err(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_get_err")] public static extern long CResultBlindedFailureDecodeErrorZGetErr(long _owner);
	// enum LDKChannelShutdownState CResult_ChannelShutdownStateDecodeErrorZ_get_ok(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_get_ok")] public static extern ChannelShutdownState CResultChannelShutdownStateDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelShutdownStateDecodeErrorZ_get_err(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_get_err")] public static extern long CResultChannelShutdownStateDecodeErrorZGetErr(long _owner);
	public interface LDKWatch {
		long WatchChannel(long funding_txo, long monitor);
		ChannelMonitorUpdateStatus UpdateChannel(long funding_txo, long update);
		long ReleasePendingMonitorEvents();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWatch_new")] public static extern long LDKWatchNewNative(long impl_idx);
	public static long[] LDKWatchNew(LDKWatch impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWatchNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_ChannelMonitorUpdateStatusNoneZ Watch_watch_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKChannelMonitor monitor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_watch_channel")] public static extern long WatchWatchChannel(long _this_arg, long _funding_txo, long _monitor);
	// LDKChannelMonitorUpdateStatus Watch_update_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, const struct LDKChannelMonitorUpdate *NONNULL_PTR update
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_update_channel")] public static extern ChannelMonitorUpdateStatus WatchUpdateChannel(long _this_arg, long _funding_txo, long _update);
	// LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ Watch_release_pending_monitor_events LDKWatch *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_release_pending_monitor_events")] public static extern long WatchReleasePendingMonitorEvents(long _this_arg);
	public interface LDKBroadcasterInterface {
		void BroadcastTransactions(long txs);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBroadcasterInterface_new")] public static extern long LDKBroadcasterInterfaceNewNative(long impl_idx);
	public static long[] LDKBroadcasterInterfaceNew(LDKBroadcasterInterface impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKBroadcasterInterfaceNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void BroadcasterInterface_broadcast_transactions LDKBroadcasterInterface *NONNULL_PTR this_arg, struct LDKCVec_TransactionZ txs
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_broadcast_transactions")] public static extern void BroadcasterInterfaceBroadcastTransactions(long _this_arg, long _txs);
	public interface LDKEntropySource {
		long GetSecureRandomBytes();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEntropySource_new")] public static extern long LDKEntropySourceNewNative(long impl_idx);
	public static long[] LDKEntropySourceNew(LDKEntropySource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEntropySourceNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes EntropySource_get_secure_random_bytes LDKEntropySource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EntropySource_get_secure_random_bytes")] public static extern long EntropySourceGetSecureRandomBytes(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ty_from_ptr")] public static extern long LDKUnsignedGossipMessageTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ChannelAnnouncement_get_channel_announcement")] public static extern long LDKUnsignedGossipMessageChannelAnnouncementGetChannelAnnouncement(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ChannelUpdate_get_channel_update")] public static extern long LDKUnsignedGossipMessageChannelUpdateGetChannelUpdate(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_NodeAnnouncement_get_node_announcement")] public static extern long LDKUnsignedGossipMessageNodeAnnouncementGetNodeAnnouncement(long ptr);
	public interface LDKNodeSigner {
		long GetInboundPaymentKeyMaterial();
		long GetNodeId(Recipient recipient);
		long Ecdh(Recipient recipient, long other_key, long tweak);
		long SignInvoice(long hrp_bytes, long invoice_data, Recipient recipient);
		long SignBolt12InvoiceRequest(long invoice_request);
		long SignBolt12Invoice(long invoice);
		long SignGossipMessage(long msg);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeSigner_new")] public static extern long LDKNodeSignerNewNative(long impl_idx);
	public static long[] LDKNodeSignerNew(LDKNodeSigner impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKNodeSignerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes NodeSigner_get_inbound_payment_key_material LDKNodeSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_get_inbound_payment_key_material")] public static extern long NodeSignerGetInboundPaymentKeyMaterial(long _this_arg);
	// LDKCResult_PublicKeyNoneZ NodeSigner_get_node_id LDKNodeSigner *NONNULL_PTR this_arg, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_get_node_id")] public static extern long NodeSignerGetNodeId(long _this_arg, Recipient _recipient);
	// LDKCResult_ThirtyTwoBytesNoneZ NodeSigner_ecdh LDKNodeSigner *NONNULL_PTR this_arg, enum LDKRecipient recipient, struct LDKPublicKey other_key, struct LDKCOption_BigEndianScalarZ tweak
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_ecdh")] public static extern long NodeSignerEcdh(long _this_arg, Recipient _recipient, long _other_key, long _tweak);
	// LDKCResult_RecoverableSignatureNoneZ NodeSigner_sign_invoice LDKNodeSigner *NONNULL_PTR this_arg, struct LDKu8slice hrp_bytes, struct LDKCVec_U5Z invoice_data, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_invoice")] public static extern long NodeSignerSignInvoice(long _this_arg, long _hrp_bytes, long _invoice_data, Recipient _recipient);
	// LDKCResult_SchnorrSignatureNoneZ NodeSigner_sign_bolt12_invoice_request LDKNodeSigner *NONNULL_PTR this_arg, const struct LDKUnsignedInvoiceRequest *NONNULL_PTR invoice_request
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_bolt12_invoice_request")] public static extern long NodeSignerSignBolt12InvoiceRequest(long _this_arg, long _invoice_request);
	// LDKCResult_SchnorrSignatureNoneZ NodeSigner_sign_bolt12_invoice LDKNodeSigner *NONNULL_PTR this_arg, const struct LDKUnsignedBolt12Invoice *NONNULL_PTR invoice
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_bolt12_invoice")] public static extern long NodeSignerSignBolt12Invoice(long _this_arg, long _invoice);
	// LDKCResult_ECDSASignatureNoneZ NodeSigner_sign_gossip_message LDKNodeSigner *NONNULL_PTR this_arg, struct LDKUnsignedGossipMessage msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_gossip_message")] public static extern long NodeSignerSignGossipMessage(long _this_arg, long _msg);
	public interface LDKSignerProvider {
		long GenerateChannelKeysId(bool inbound, long channel_value_satoshis, long user_channel_id);
		long DeriveChannelSigner(long channel_value_satoshis, long channel_keys_id);
		long ReadChanSigner(long reader);
		long GetDestinationScript(long channel_keys_id);
		long GetShutdownScriptpubkey();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignerProvider_new")] public static extern long LDKSignerProviderNewNative(long impl_idx);
	public static long[] LDKSignerProviderNew(LDKSignerProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSignerProviderNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes SignerProvider_generate_channel_keys_id LDKSignerProvider *NONNULL_PTR this_arg, bool inbound, uint64_t channel_value_satoshis, struct LDKU128 user_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_generate_channel_keys_id")] public static extern long SignerProviderGenerateChannelKeysId(long _this_arg, bool _inbound, long _channel_value_satoshis, long _user_channel_id);
	// LDKWriteableEcdsaChannelSigner SignerProvider_derive_channel_signer LDKSignerProvider *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_derive_channel_signer")] public static extern long SignerProviderDeriveChannelSigner(long _this_arg, long _channel_value_satoshis, long _channel_keys_id);
	// LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ SignerProvider_read_chan_signer LDKSignerProvider *NONNULL_PTR this_arg, struct LDKu8slice reader
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_read_chan_signer")] public static extern long SignerProviderReadChanSigner(long _this_arg, long _reader);
	// LDKCResult_CVec_u8ZNoneZ SignerProvider_get_destination_script LDKSignerProvider *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes channel_keys_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_get_destination_script")] public static extern long SignerProviderGetDestinationScript(long _this_arg, long _channel_keys_id);
	// LDKCResult_ShutdownScriptNoneZ SignerProvider_get_shutdown_scriptpubkey LDKSignerProvider *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_get_shutdown_scriptpubkey")] public static extern long SignerProviderGetShutdownScriptpubkey(long _this_arg);
	public interface LDKFeeEstimator {
		int GetEstSatPer1000Weight(ConfirmationTarget confirmation_target);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFeeEstimator_new")] public static extern long LDKFeeEstimatorNewNative(long impl_idx);
	public static long[] LDKFeeEstimatorNew(LDKFeeEstimator impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFeeEstimatorNewNative(i);
		ret[1] = i;
		return ret;
	}
	// uint32_t FeeEstimator_get_est_sat_per_1000_weight LDKFeeEstimator *NONNULL_PTR this_arg, enum LDKConfirmationTarget confirmation_target
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_get_est_sat_per_1000_weight")] public static extern int FeeEstimatorGetEstSatPer1000Weight(long _this_arg, ConfirmationTarget _confirmation_target);
	public interface LDKMessageRouter {
		long FindPath(long sender, long peers, long destination);
		long CreateBlindedPaths(long recipient, long peers);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageRouter_new")] public static extern long LDKMessageRouterNewNative(long impl_idx);
	public static long[] LDKMessageRouterNew(LDKMessageRouter impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKMessageRouterNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_OnionMessagePathNoneZ MessageRouter_find_path LDKMessageRouter *NONNULL_PTR this_arg, struct LDKPublicKey sender, struct LDKCVec_PublicKeyZ peers, struct LDKDestination destination
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_find_path")] public static extern long MessageRouterFindPath(long _this_arg, long _sender, long _peers, long _destination);
	// LDKCResult_CVec_BlindedPathZNoneZ MessageRouter_create_blinded_paths LDKMessageRouter *NONNULL_PTR this_arg, struct LDKPublicKey recipient, struct LDKCVec_PublicKeyZ peers
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_create_blinded_paths")] public static extern long MessageRouterCreateBlindedPaths(long _this_arg, long _recipient, long _peers);
	public interface LDKRouter {
		long FindRoute(long payer, long route_params, long first_hops, long inflight_htlcs);
		long FindRouteWithId(long payer, long route_params, long first_hops, long inflight_htlcs, long _payment_hash, long _payment_id);
		long CreateBlindedPaymentPaths(long recipient, long first_hops, long tlvs, long amount_msats);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRouter_new")] public static extern long LDKRouterNewNative(long impl_idx, long MessageRouter);
	public static long[] LDKRouterNew(LDKRouter impl, long MessageRouter) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKRouterNewNative(i, MessageRouter);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_RouteLightningErrorZ Router_find_route LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route")] public static extern long RouterFindRoute(long _this_arg, long _payer, long _route_params, long _first_hops, long _inflight_htlcs);
	// LDKCResult_RouteLightningErrorZ Router_find_route_with_id LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs, struct LDKThirtyTwoBytes _payment_hash, struct LDKThirtyTwoBytes _payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route_with_id")] public static extern long RouterFindRouteWithId(long _this_arg, long _payer, long _route_params, long _first_hops, long _inflight_htlcs, long __payment_hash, long __payment_id);
	// LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ Router_create_blinded_payment_paths LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey recipient, struct LDKCVec_ChannelDetailsZ first_hops, struct LDKReceiveTlvs tlvs, uint64_t amount_msats
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_create_blinded_payment_paths")] public static extern long RouterCreateBlindedPaymentPaths(long _this_arg, long _recipient, long _first_hops, long _tlvs, long _amount_msats);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a(LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a")] public static extern long C2TupleThirtyTwoBytesChannelManagerZGetA(long _owner);
	// struct LDKChannelManager C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b(LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b")] public static extern long C2TupleThirtyTwoBytesChannelManagerZGetB(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_err")] public static extern long CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_ty_from_ptr")] public static extern long LDKMaxDustHTLCExposureTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_FixedLimitMsat_get_fixed_limit_msat")] public static extern long LDKMaxDustHTLCExposureFixedLimitMsatGetFixedLimitMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_FeeRateMultiplier_get_fee_rate_multiplier")] public static extern long LDKMaxDustHTLCExposureFeeRateMultiplierGetFeeRateMultiplier(long ptr);
	// struct LDKMaxDustHTLCExposure CResult_MaxDustHTLCExposureDecodeErrorZ_get_ok(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_get_ok")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_MaxDustHTLCExposureDecodeErrorZ_get_err(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_get_err")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZGetErr(long _owner);
	// struct LDKChannelConfig CResult_ChannelConfigDecodeErrorZ_get_ok(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_ok")] public static extern long CResultChannelConfigDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelConfigDecodeErrorZ_get_err(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_err")] public static extern long CResultChannelConfigDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MaxDustHTLCExposureZ_ty_from_ptr")] public static extern long LDKCOptionMaxDustHTLCExposureZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MaxDustHTLCExposureZ_Some_get_some")] public static extern long LDKCOptionMaxDustHTLCExposureZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_APIErrorZ_ty_from_ptr")] public static extern long LDKCOptionAPIErrorZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_APIErrorZ_Some_get_some")] public static extern long LDKCOptionAPIErrorZSomeGetSome(long ptr);
	// struct LDKCOption_APIErrorZ CResult_COption_APIErrorZDecodeErrorZ_get_ok(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_get_ok")] public static extern long CResultCOptionAPIErrorZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_APIErrorZDecodeErrorZ_get_err(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_get_err")] public static extern long CResultCOptionAPIErrorZDecodeErrorZGetErr(long _owner);
	// struct LDKChannelMonitorUpdate CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok")] public static extern long CResultChannelMonitorUpdateDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_err")] public static extern long CResultChannelMonitorUpdateDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_ty_from_ptr")] public static extern long LDKCOptionMonitorEventZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_Some_get_some")] public static extern long LDKCOptionMonitorEventZSomeGetSome(long ptr);
	// struct LDKCOption_MonitorEventZ CResult_COption_MonitorEventZDecodeErrorZ_get_ok(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_ok")] public static extern long CResultCOptionMonitorEventZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_MonitorEventZDecodeErrorZ_get_err(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_err")] public static extern long CResultCOptionMonitorEventZDecodeErrorZGetErr(long _owner);
	// struct LDKHTLCUpdate CResult_HTLCUpdateDecodeErrorZ_get_ok(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_ok")] public static extern long CResultHTLCUpdateDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HTLCUpdateDecodeErrorZ_get_err(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_err")] public static extern long CResultHTLCUpdateDecodeErrorZGetErr(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointCVec_u8ZZ_get_a(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_get_a")] public static extern long C2TupleOutPointCVecU8ZzGetA(long _owner);
	// struct LDKCVec_u8Z C2Tuple_OutPointCVec_u8ZZ_get_b(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_get_b")] public static extern long C2TupleOutPointCVecU8ZzGetB(long _owner);
	// uint32_t C2Tuple_u32CVec_u8ZZ_get_a(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_get_a")] public static extern int C2TupleU32CvecU8ZzGetA(long _owner);
	// struct LDKCVec_u8Z C2Tuple_u32CVec_u8ZZ_get_b(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_get_b")] public static extern long C2TupleU32CvecU8ZzGetB(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_a(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_a")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzGetA(long _owner);
	// struct LDKCVec_C2Tuple_u32CVec_u8ZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_b(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_b")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzGetB(long _owner);
	// uint32_t C2Tuple_u32TxOutZ_get_a(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_a")] public static extern int C2TupleU32TxoutzGetA(long _owner);
	// struct LDKTxOut C2Tuple_u32TxOutZ_get_b(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_b")] public static extern long C2TupleU32TxoutzGetB(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_a(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_a")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzGetA(long _owner);
	// struct LDKCVec_C2Tuple_u32TxOutZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_b(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_b")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzGetB(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ty_from_ptr")] public static extern long LDKBalanceTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_amount_satoshis")] public static extern long LDKBalanceClaimableOnChannelCloseGetAmountSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_amount_satoshis")] public static extern long LDKBalanceClaimableAwaitingConfirmationsGetAmountSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_confirmation_height")] public static extern int LDKBalanceClaimableAwaitingConfirmationsGetConfirmationHeight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_amount_satoshis")] public static extern long LDKBalanceContentiousClaimableGetAmountSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_timeout_height")] public static extern int LDKBalanceContentiousClaimableGetTimeoutHeight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_payment_hash")] public static extern long LDKBalanceContentiousClaimableGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_payment_preimage")] public static extern long LDKBalanceContentiousClaimableGetPaymentPreimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_amount_satoshis")] public static extern long LDKBalanceMaybeTimeoutClaimableHTLCGetAmountSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_height")] public static extern int LDKBalanceMaybeTimeoutClaimableHTLCGetClaimableHeight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_payment_hash")] public static extern long LDKBalanceMaybeTimeoutClaimableHTLCGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_amount_satoshis")] public static extern long LDKBalanceMaybePreimageClaimableHTLCGetAmountSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_expiry_height")] public static extern int LDKBalanceMaybePreimageClaimableHTLCGetExpiryHeight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_payment_hash")] public static extern long LDKBalanceMaybePreimageClaimableHTLCGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_CounterpartyRevokedOutputClaimable_get_amount_satoshis")] public static extern long LDKBalanceCounterpartyRevokedOutputClaimableGetAmountSatoshis(long ptr);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_a(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_a")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZGetA(long _owner);
	// struct LDKChannelMonitor C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_b(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_b")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZGetB(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_err")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZGetErr(long _owner);
	public interface LDKType {
		short TypeId();
		long DebugStr();
		long Write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKType_new")] public static extern long LDKTypeNewNative(long impl_idx);
	public static long[] LDKTypeNew(LDKType impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKTypeNewNative(i);
		ret[1] = i;
		return ret;
	}
	// uint16_t Type_type_id LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_type_id")] public static extern short TypeTypeId(long _this_arg);
	// LDKStr Type_debug_str LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_debug_str")] public static extern long TypeDebugStr(long _this_arg);
	// LDKCVec_u8Z Type_write LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_write")] public static extern long TypeWrite(long _this_arg);
	// struct LDKPublicKey C2Tuple_PublicKeyTypeZ_get_a(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_a")] public static extern long C2TuplePublicKeyTypeZGetA(long _owner);
	// struct LDKType C2Tuple_PublicKeyTypeZ_get_b(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_b")] public static extern long C2TuplePublicKeyTypeZGetB(long _owner);
	// struct LDKPublicKey C2Tuple_PublicKeyCVec_SocketAddressZZ_get_a(LDKC2Tuple_PublicKeyCVec_SocketAddressZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_get_a")] public static extern long C2TuplePublicKeyCVecSocketAddressZZGetA(long _owner);
	// struct LDKCVec_SocketAddressZ C2Tuple_PublicKeyCVec_SocketAddressZZ_get_b(LDKC2Tuple_PublicKeyCVec_SocketAddressZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_get_b")] public static extern long C2TuplePublicKeyCVecSocketAddressZZGetB(long _owner);
	public interface LDKOnionMessageContents {
		long TlvType();
		long Write();
		long DebugStr();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageContents_new")] public static extern long LDKOnionMessageContentsNewNative(long impl_idx);
	public static long[] LDKOnionMessageContentsNew(LDKOnionMessageContents impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOnionMessageContentsNewNative(i);
		ret[1] = i;
		return ret;
	}
	// uint64_t OnionMessageContents_tlv_type LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_tlv_type")] public static extern long OnionMessageContentsTlvType(long _this_arg);
	// LDKCVec_u8Z OnionMessageContents_write LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_write")] public static extern long OnionMessageContentsWrite(long _this_arg);
	// LDKStr OnionMessageContents_debug_str LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_debug_str")] public static extern long OnionMessageContentsDebugStr(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OnionMessageContentsZ_ty_from_ptr")] public static extern long LDKCOptionOnionMessageContentsZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OnionMessageContentsZ_Some_get_some")] public static extern long LDKCOptionOnionMessageContentsZSomeGetSome(long ptr);
	// struct LDKCOption_OnionMessageContentsZ CResult_COption_OnionMessageContentsZDecodeErrorZ_get_ok(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_get_ok")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_OnionMessageContentsZDecodeErrorZ_get_err(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_get_err")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZGetErr(long _owner);
	// struct LDKOnionMessageContents C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_a(LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_a")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZGetA(long _owner);
	// struct LDKDestination C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_b(LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_b")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZGetB(long _owner);
	// struct LDKBlindedPath C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_c(LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_get_c")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZGetC(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_ty_from_ptr")] public static extern long LDKCOptionTypeZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_Some_get_some")] public static extern long LDKCOptionTypeZSomeGetSome(long ptr);
	// struct LDKCOption_TypeZ CResult_COption_TypeZDecodeErrorZ_get_ok(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_ok")] public static extern long CResultCOptionTypeZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_TypeZDecodeErrorZ_get_err(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_err")] public static extern long CResultCOptionTypeZDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SocketAddressZ_ty_from_ptr")] public static extern long LDKCOptionSocketAddressZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SocketAddressZ_Some_get_some")] public static extern long LDKCOptionSocketAddressZSomeGetSome(long ptr);
	// struct LDKPublicKey C2Tuple_PublicKeyCOption_SocketAddressZZ_get_a(LDKC2Tuple_PublicKeyCOption_SocketAddressZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_get_a")] public static extern long C2TuplePublicKeyCOptionSocketAddressZZGetA(long _owner);
	// struct LDKCOption_SocketAddressZ C2Tuple_PublicKeyCOption_SocketAddressZZ_get_b(LDKC2Tuple_PublicKeyCOption_SocketAddressZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_get_b")] public static extern long C2TuplePublicKeyCOptionSocketAddressZZGetB(long _owner);
	// struct LDKCVec_u8Z CResult_CVec_u8ZPeerHandleErrorZ_get_ok(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_ok")] public static extern long CResultCVecU8ZpeerhandleerrorzGetOk(long _owner);
	// struct LDKPeerHandleError CResult_CVec_u8ZPeerHandleErrorZ_get_err(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_err")] public static extern long CResultCVecU8ZpeerhandleerrorzGetErr(long _owner);
	// void CResult_NonePeerHandleErrorZ_get_ok(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_ok")] public static extern void CResultNonePeerHandleErrorZGetOk(long _owner);
	// struct LDKPeerHandleError CResult_NonePeerHandleErrorZ_get_err(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_err")] public static extern long CResultNonePeerHandleErrorZGetErr(long _owner);
	// bool CResult_boolPeerHandleErrorZ_get_ok(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_ok")] public static extern bool CResultBoolpeerhandleerrorzGetOk(long _owner);
	// struct LDKPeerHandleError CResult_boolPeerHandleErrorZ_get_err(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_err")] public static extern long CResultBoolpeerhandleerrorzGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_ty_from_ptr")] public static extern long LDKGraphSyncErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_DecodeError_get_decode_error")] public static extern long LDKGraphSyncErrorDecodeErrorGetDecodeError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_LightningError_get_lightning_error")] public static extern long LDKGraphSyncErrorLightningErrorGetLightningError(long ptr);
	// uint32_t CResult_u32GraphSyncErrorZ_get_ok(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_ok")] public static extern int CResultU32GraphsyncerrorzGetOk(long _owner);
	// struct LDKGraphSyncError CResult_u32GraphSyncErrorZ_get_err(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_err")] public static extern long CResultU32GraphsyncerrorzGetErr(long _owner);
	// struct LDKCVec_u8Z CResult_CVec_u8ZIOErrorZ_get_ok(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_get_ok")] public static extern long CResultCVecU8ZioerrorzGetOk(long _owner);
	// enum LDKIOError CResult_CVec_u8ZIOErrorZ_get_err(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_get_err")] public static extern IOError CResultCVecU8ZioerrorzGetErr(long _owner);
	// struct LDKCVec_StrZ CResult_CVec_StrZIOErrorZ_get_ok(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_get_ok")] public static extern long CResultCVecStrZIOErrorZGetOk(long _owner);
	// enum LDKIOError CResult_CVec_StrZIOErrorZ_get_err(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_get_err")] public static extern IOError CResultCVecStrZIOErrorZGetErr(long _owner);
	// struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_ok(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_ok")] public static extern long CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZGetOk(long _owner);
	// enum LDKIOError CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_err(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_err")] public static extern IOError CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZGetErr(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZGetOk(long _owner);
	// enum LDKIOError CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_err")] public static extern IOError CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SecretKeyZ_ty_from_ptr")] public static extern long LDKCOptionSecretKeyZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SecretKeyZ_Some_get_some")] public static extern long LDKCOptionSecretKeyZSomeGetSome(long ptr);
	// struct LDKVerifiedInvoiceRequest CResult_VerifiedInvoiceRequestNoneZ_get_ok(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_get_ok")] public static extern long CResultVerifiedInvoiceRequestNoneZGetOk(long _owner);
	// void CResult_VerifiedInvoiceRequestNoneZ_get_err(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_get_err")] public static extern void CResultVerifiedInvoiceRequestNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_i64Z_ty_from_ptr")] public static extern long LDKCOptionI64ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_i64Z_Some_get_some")] public static extern long LDKCOptionI64ZSomeGetSome(long ptr);
	// struct LDKSocketAddress CResult_SocketAddressDecodeErrorZ_get_ok(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_get_ok")] public static extern long CResultSocketAddressDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_SocketAddressDecodeErrorZ_get_err(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_get_err")] public static extern long CResultSocketAddressDecodeErrorZGetErr(long _owner);
	// struct LDKSocketAddress CResult_SocketAddressSocketAddressParseErrorZ_get_ok(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_get_ok")] public static extern long CResultSocketAddressSocketAddressParseErrorZGetOk(long _owner);
	// enum LDKSocketAddressParseError CResult_SocketAddressSocketAddressParseErrorZ_get_err(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_get_err")] public static extern SocketAddressParseError CResultSocketAddressSocketAddressParseErrorZGetErr(long _owner);
	// struct LDKAcceptChannel CResult_AcceptChannelDecodeErrorZ_get_ok(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_ok")] public static extern long CResultAcceptChannelDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_AcceptChannelDecodeErrorZ_get_err(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_err")] public static extern long CResultAcceptChannelDecodeErrorZGetErr(long _owner);
	// struct LDKAcceptChannelV2 CResult_AcceptChannelV2DecodeErrorZ_get_ok(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_get_ok")] public static extern long CResultAcceptChannelV2DecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_AcceptChannelV2DecodeErrorZ_get_err(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_get_err")] public static extern long CResultAcceptChannelV2DecodeErrorZGetErr(long _owner);
	// struct LDKStfu CResult_StfuDecodeErrorZ_get_ok(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_get_ok")] public static extern long CResultStfuDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_StfuDecodeErrorZ_get_err(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_get_err")] public static extern long CResultStfuDecodeErrorZGetErr(long _owner);
	// struct LDKSplice CResult_SpliceDecodeErrorZ_get_ok(LDKCResult_SpliceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_get_ok")] public static extern long CResultSpliceDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_SpliceDecodeErrorZ_get_err(LDKCResult_SpliceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_get_err")] public static extern long CResultSpliceDecodeErrorZGetErr(long _owner);
	// struct LDKSpliceAck CResult_SpliceAckDecodeErrorZ_get_ok(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_get_ok")] public static extern long CResultSpliceAckDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_SpliceAckDecodeErrorZ_get_err(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_get_err")] public static extern long CResultSpliceAckDecodeErrorZGetErr(long _owner);
	// struct LDKSpliceLocked CResult_SpliceLockedDecodeErrorZ_get_ok(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_get_ok")] public static extern long CResultSpliceLockedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_SpliceLockedDecodeErrorZ_get_err(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_get_err")] public static extern long CResultSpliceLockedDecodeErrorZGetErr(long _owner);
	// struct LDKTxAddInput CResult_TxAddInputDecodeErrorZ_get_ok(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_get_ok")] public static extern long CResultTxAddInputDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxAddInputDecodeErrorZ_get_err(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_get_err")] public static extern long CResultTxAddInputDecodeErrorZGetErr(long _owner);
	// struct LDKTxAddOutput CResult_TxAddOutputDecodeErrorZ_get_ok(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_get_ok")] public static extern long CResultTxAddOutputDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxAddOutputDecodeErrorZ_get_err(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_get_err")] public static extern long CResultTxAddOutputDecodeErrorZGetErr(long _owner);
	// struct LDKTxRemoveInput CResult_TxRemoveInputDecodeErrorZ_get_ok(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_get_ok")] public static extern long CResultTxRemoveInputDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxRemoveInputDecodeErrorZ_get_err(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_get_err")] public static extern long CResultTxRemoveInputDecodeErrorZGetErr(long _owner);
	// struct LDKTxRemoveOutput CResult_TxRemoveOutputDecodeErrorZ_get_ok(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_get_ok")] public static extern long CResultTxRemoveOutputDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxRemoveOutputDecodeErrorZ_get_err(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_get_err")] public static extern long CResultTxRemoveOutputDecodeErrorZGetErr(long _owner);
	// struct LDKTxComplete CResult_TxCompleteDecodeErrorZ_get_ok(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_get_ok")] public static extern long CResultTxCompleteDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxCompleteDecodeErrorZ_get_err(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_get_err")] public static extern long CResultTxCompleteDecodeErrorZGetErr(long _owner);
	// struct LDKTxSignatures CResult_TxSignaturesDecodeErrorZ_get_ok(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_get_ok")] public static extern long CResultTxSignaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxSignaturesDecodeErrorZ_get_err(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_get_err")] public static extern long CResultTxSignaturesDecodeErrorZGetErr(long _owner);
	// struct LDKTxInitRbf CResult_TxInitRbfDecodeErrorZ_get_ok(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_get_ok")] public static extern long CResultTxInitRbfDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxInitRbfDecodeErrorZ_get_err(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_get_err")] public static extern long CResultTxInitRbfDecodeErrorZGetErr(long _owner);
	// struct LDKTxAckRbf CResult_TxAckRbfDecodeErrorZ_get_ok(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_get_ok")] public static extern long CResultTxAckRbfDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxAckRbfDecodeErrorZ_get_err(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_get_err")] public static extern long CResultTxAckRbfDecodeErrorZGetErr(long _owner);
	// struct LDKTxAbort CResult_TxAbortDecodeErrorZ_get_ok(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_get_ok")] public static extern long CResultTxAbortDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxAbortDecodeErrorZ_get_err(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_get_err")] public static extern long CResultTxAbortDecodeErrorZGetErr(long _owner);
	// struct LDKAnnouncementSignatures CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_ok")] public static extern long CResultAnnouncementSignaturesDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_AnnouncementSignaturesDecodeErrorZ_get_err(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_err")] public static extern long CResultAnnouncementSignaturesDecodeErrorZGetErr(long _owner);
	// struct LDKChannelReestablish CResult_ChannelReestablishDecodeErrorZ_get_ok(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_ok")] public static extern long CResultChannelReestablishDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelReestablishDecodeErrorZ_get_err(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_err")] public static extern long CResultChannelReestablishDecodeErrorZGetErr(long _owner);
	// struct LDKClosingSigned CResult_ClosingSignedDecodeErrorZ_get_ok(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_ok")] public static extern long CResultClosingSignedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedDecodeErrorZ_get_err(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_err")] public static extern long CResultClosingSignedDecodeErrorZGetErr(long _owner);
	// struct LDKClosingSignedFeeRange CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZGetErr(long _owner);
	// struct LDKCommitmentSigned CResult_CommitmentSignedDecodeErrorZ_get_ok(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_ok")] public static extern long CResultCommitmentSignedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_CommitmentSignedDecodeErrorZ_get_err(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_err")] public static extern long CResultCommitmentSignedDecodeErrorZGetErr(long _owner);
	// struct LDKFundingCreated CResult_FundingCreatedDecodeErrorZ_get_ok(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_ok")] public static extern long CResultFundingCreatedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_FundingCreatedDecodeErrorZ_get_err(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_err")] public static extern long CResultFundingCreatedDecodeErrorZGetErr(long _owner);
	// struct LDKFundingSigned CResult_FundingSignedDecodeErrorZ_get_ok(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_ok")] public static extern long CResultFundingSignedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_FundingSignedDecodeErrorZ_get_err(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_err")] public static extern long CResultFundingSignedDecodeErrorZGetErr(long _owner);
	// struct LDKChannelReady CResult_ChannelReadyDecodeErrorZ_get_ok(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_ok")] public static extern long CResultChannelReadyDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelReadyDecodeErrorZ_get_err(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_err")] public static extern long CResultChannelReadyDecodeErrorZGetErr(long _owner);
	// struct LDKInit CResult_InitDecodeErrorZ_get_ok(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_ok")] public static extern long CResultInitDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_InitDecodeErrorZ_get_err(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_err")] public static extern long CResultInitDecodeErrorZGetErr(long _owner);
	// struct LDKOpenChannel CResult_OpenChannelDecodeErrorZ_get_ok(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_ok")] public static extern long CResultOpenChannelDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OpenChannelDecodeErrorZ_get_err(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_err")] public static extern long CResultOpenChannelDecodeErrorZGetErr(long _owner);
	// struct LDKOpenChannelV2 CResult_OpenChannelV2DecodeErrorZ_get_ok(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_get_ok")] public static extern long CResultOpenChannelV2DecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OpenChannelV2DecodeErrorZ_get_err(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_get_err")] public static extern long CResultOpenChannelV2DecodeErrorZGetErr(long _owner);
	// struct LDKRevokeAndACK CResult_RevokeAndACKDecodeErrorZ_get_ok(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_ok")] public static extern long CResultRevokeAndACKDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RevokeAndACKDecodeErrorZ_get_err(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_err")] public static extern long CResultRevokeAndACKDecodeErrorZGetErr(long _owner);
	// struct LDKShutdown CResult_ShutdownDecodeErrorZ_get_ok(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_ok")] public static extern long CResultShutdownDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ShutdownDecodeErrorZ_get_err(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_err")] public static extern long CResultShutdownDecodeErrorZGetErr(long _owner);
	// struct LDKUpdateFailHTLC CResult_UpdateFailHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_ok")] public static extern long CResultUpdateFailHTLCDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UpdateFailHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_err")] public static extern long CResultUpdateFailHTLCDecodeErrorZGetErr(long _owner);
	// struct LDKUpdateFailMalformedHTLC CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZGetErr(long _owner);
	// struct LDKUpdateFee CResult_UpdateFeeDecodeErrorZ_get_ok(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_ok")] public static extern long CResultUpdateFeeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UpdateFeeDecodeErrorZ_get_err(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_err")] public static extern long CResultUpdateFeeDecodeErrorZGetErr(long _owner);
	// struct LDKUpdateFulfillHTLC CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_err")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZGetErr(long _owner);
	// struct LDKOnionPacket CResult_OnionPacketDecodeErrorZ_get_ok(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_get_ok")] public static extern long CResultOnionPacketDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OnionPacketDecodeErrorZ_get_err(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_get_err")] public static extern long CResultOnionPacketDecodeErrorZGetErr(long _owner);
	// struct LDKUpdateAddHTLC CResult_UpdateAddHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_ok")] public static extern long CResultUpdateAddHTLCDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UpdateAddHTLCDecodeErrorZ_get_err(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_err")] public static extern long CResultUpdateAddHTLCDecodeErrorZGetErr(long _owner);
	// struct LDKOnionMessage CResult_OnionMessageDecodeErrorZ_get_ok(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_ok")] public static extern long CResultOnionMessageDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OnionMessageDecodeErrorZ_get_err(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_err")] public static extern long CResultOnionMessageDecodeErrorZGetErr(long _owner);
	// struct LDKFinalOnionHopData CResult_FinalOnionHopDataDecodeErrorZ_get_ok(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_get_ok")] public static extern long CResultFinalOnionHopDataDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_FinalOnionHopDataDecodeErrorZ_get_err(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_get_err")] public static extern long CResultFinalOnionHopDataDecodeErrorZGetErr(long _owner);
	// struct LDKPing CResult_PingDecodeErrorZ_get_ok(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_ok")] public static extern long CResultPingDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PingDecodeErrorZ_get_err(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_err")] public static extern long CResultPingDecodeErrorZGetErr(long _owner);
	// struct LDKPong CResult_PongDecodeErrorZ_get_ok(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_ok")] public static extern long CResultPongDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PongDecodeErrorZ_get_err(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_err")] public static extern long CResultPongDecodeErrorZGetErr(long _owner);
	// struct LDKUnsignedChannelAnnouncement CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZGetErr(long _owner);
	// struct LDKChannelAnnouncement CResult_ChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResultChannelAnnouncementDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResultChannelAnnouncementDecodeErrorZGetErr(long _owner);
	// struct LDKUnsignedChannelUpdate CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_err")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZGetErr(long _owner);
	// struct LDKChannelUpdate CResult_ChannelUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResultChannelUpdateDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateDecodeErrorZ_get_err(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_err")] public static extern long CResultChannelUpdateDecodeErrorZGetErr(long _owner);
	// struct LDKErrorMessage CResult_ErrorMessageDecodeErrorZ_get_ok(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_ok")] public static extern long CResultErrorMessageDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ErrorMessageDecodeErrorZ_get_err(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_err")] public static extern long CResultErrorMessageDecodeErrorZGetErr(long _owner);
	// struct LDKWarningMessage CResult_WarningMessageDecodeErrorZ_get_ok(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_ok")] public static extern long CResultWarningMessageDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_WarningMessageDecodeErrorZ_get_err(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_err")] public static extern long CResultWarningMessageDecodeErrorZGetErr(long _owner);
	// struct LDKUnsignedNodeAnnouncement CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZGetErr(long _owner);
	// struct LDKNodeAnnouncement CResult_NodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResultNodeAnnouncementDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResultNodeAnnouncementDecodeErrorZGetErr(long _owner);
	// struct LDKQueryShortChannelIds CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_ok")] public static extern long CResultQueryShortChannelIdsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_QueryShortChannelIdsDecodeErrorZ_get_err(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_err")] public static extern long CResultQueryShortChannelIdsDecodeErrorZGetErr(long _owner);
	// struct LDKReplyShortChannelIdsEnd CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZGetErr(long _owner);
	// struct LDKQueryChannelRange CResult_QueryChannelRangeDecodeErrorZ_get_ok(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_ok")] public static extern long CResultQueryChannelRangeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_QueryChannelRangeDecodeErrorZ_get_err(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_err")] public static extern long CResultQueryChannelRangeDecodeErrorZGetErr(long _owner);
	// struct LDKReplyChannelRange CResult_ReplyChannelRangeDecodeErrorZ_get_ok(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_ok")] public static extern long CResultReplyChannelRangeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ReplyChannelRangeDecodeErrorZ_get_err(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_err")] public static extern long CResultReplyChannelRangeDecodeErrorZGetErr(long _owner);
	// struct LDKGossipTimestampFilter CResult_GossipTimestampFilterDecodeErrorZ_get_ok(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_ok")] public static extern long CResultGossipTimestampFilterDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_GossipTimestampFilterDecodeErrorZ_get_err(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_err")] public static extern long CResultGossipTimestampFilterDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_ty_from_ptr")] public static extern long LDKSignOrCreationErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_CreationError_get_creation_error")] public static extern CreationError LDKSignOrCreationErrorCreationErrorGetCreationError(long ptr);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceSignOrCreationErrorZ_get_ok(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_get_ok")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZGetOk(long _owner);
	// struct LDKSignOrCreationError CResult_Bolt11InvoiceSignOrCreationErrorZ_get_err(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_get_err")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZGetErr(long _owner);
	// struct LDKOffersMessage CResult_OffersMessageDecodeErrorZ_get_ok(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_get_ok")] public static extern long CResultOffersMessageDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OffersMessageDecodeErrorZ_get_err(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_get_err")] public static extern long CResultOffersMessageDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_ty_from_ptr")] public static extern long LDKCOptionHTLCClaimZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_Some_get_some")] public static extern HTLCClaim LDKCOptionHTLCClaimZSomeGetSome(long ptr);
	// struct LDKCounterpartyCommitmentSecrets CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZGetErr(long _owner);
	// struct LDKTxCreationKeys CResult_TxCreationKeysDecodeErrorZ_get_ok(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_ok")] public static extern long CResultTxCreationKeysDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TxCreationKeysDecodeErrorZ_get_err(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_err")] public static extern long CResultTxCreationKeysDecodeErrorZGetErr(long _owner);
	// struct LDKChannelPublicKeys CResult_ChannelPublicKeysDecodeErrorZ_get_ok(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_ok")] public static extern long CResultChannelPublicKeysDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelPublicKeysDecodeErrorZ_get_err(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_err")] public static extern long CResultChannelPublicKeysDecodeErrorZGetErr(long _owner);
	// struct LDKHTLCOutputInCommitment CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZGetErr(long _owner);
	// struct LDKCounterpartyChannelTransactionParameters CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZGetErr(long _owner);
	// struct LDKChannelTransactionParameters CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResultChannelTransactionParametersDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResultChannelTransactionParametersDecodeErrorZGetErr(long _owner);
	// struct LDKHolderCommitmentTransaction CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZGetErr(long _owner);
	// struct LDKBuiltCommitmentTransaction CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZGetErr(long _owner);
	// struct LDKTrustedClosingTransaction CResult_TrustedClosingTransactionNoneZ_get_ok(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_ok")] public static extern long CResultTrustedClosingTransactionNoneZGetOk(long _owner);
	// void CResult_TrustedClosingTransactionNoneZ_get_err(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_err")] public static extern void CResultTrustedClosingTransactionNoneZGetErr(long _owner);
	// struct LDKCommitmentTransaction CResult_CommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResultCommitmentTransactionDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_CommitmentTransactionDecodeErrorZ_get_err(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResultCommitmentTransactionDecodeErrorZGetErr(long _owner);
	// struct LDKTrustedCommitmentTransaction CResult_TrustedCommitmentTransactionNoneZ_get_ok(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_ok")] public static extern long CResultTrustedCommitmentTransactionNoneZGetOk(long _owner);
	// void CResult_TrustedCommitmentTransactionNoneZ_get_err(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_err")] public static extern void CResultTrustedCommitmentTransactionNoneZGetErr(long _owner);
	// struct LDKCVec_ECDSASignatureZ CResult_CVec_ECDSASignatureZNoneZ_get_ok(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_get_ok")] public static extern long CResultCVecECDSASignatureZNoneZGetOk(long _owner);
	// void CResult_CVec_ECDSASignatureZNoneZ_get_err(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_get_err")] public static extern void CResultCVecECDSASignatureZNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_usizeZ_ty_from_ptr")] public static extern long LDKCOptionUsizezTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_usizeZ_Some_get_some")] public static extern long LDKCOptionUsizezSomeGetSome(long ptr);
	// struct LDKShutdownScript CResult_ShutdownScriptDecodeErrorZ_get_ok(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_ok")] public static extern long CResultShutdownScriptDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ShutdownScriptDecodeErrorZ_get_err(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_err")] public static extern long CResultShutdownScriptDecodeErrorZGetErr(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok")] public static extern long CResultShutdownScriptInvalidShutdownScriptZGetOk(long _owner);
	// struct LDKInvalidShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_err")] public static extern long CResultShutdownScriptInvalidShutdownScriptZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_ty_from_ptr")] public static extern long LDKPaymentPurposeTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_InvoicePayment_get_payment_preimage")] public static extern long LDKPaymentPurposeInvoicePaymentGetPaymentPreimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_InvoicePayment_get_payment_secret")] public static extern long LDKPaymentPurposeInvoicePaymentGetPaymentSecret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_SpontaneousPayment_get_spontaneous_payment")] public static extern long LDKPaymentPurposeSpontaneousPaymentGetSpontaneousPayment(long ptr);
	// struct LDKPaymentPurpose CResult_PaymentPurposeDecodeErrorZ_get_ok(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_ok")] public static extern long CResultPaymentPurposeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PaymentPurposeDecodeErrorZ_get_err(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_err")] public static extern long CResultPaymentPurposeDecodeErrorZGetErr(long _owner);
	// struct LDKClaimedHTLC CResult_ClaimedHTLCDecodeErrorZ_get_ok(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_get_ok")] public static extern long CResultClaimedHTLCDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_ClaimedHTLCDecodeErrorZ_get_err(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_get_err")] public static extern long CResultClaimedHTLCDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_ty_from_ptr")] public static extern long LDKPathFailureTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_InitialSend_get_err")] public static extern long LDKPathFailureInitialSendGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_OnPath_get_network_update")] public static extern long LDKPathFailureOnPathGetNetworkUpdate(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PathFailureZ_ty_from_ptr")] public static extern long LDKCOptionPathFailureZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PathFailureZ_Some_get_some")] public static extern long LDKCOptionPathFailureZSomeGetSome(long ptr);
	// struct LDKCOption_PathFailureZ CResult_COption_PathFailureZDecodeErrorZ_get_ok(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_get_ok")] public static extern long CResultCOptionPathFailureZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_PathFailureZDecodeErrorZ_get_err(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_get_err")] public static extern long CResultCOptionPathFailureZDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ty_from_ptr")] public static extern long LDKClosureReasonTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_CounterpartyForceClosed_get_peer_msg")] public static extern long LDKClosureReasonCounterpartyForceClosedGetPeerMsg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ProcessingError_get_err")] public static extern long LDKClosureReasonProcessingErrorGetErr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_ty_from_ptr")] public static extern long LDKCOptionClosureReasonZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_Some_get_some")] public static extern long LDKCOptionClosureReasonZSomeGetSome(long ptr);
	// struct LDKCOption_ClosureReasonZ CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_ok")] public static extern long CResultCOptionClosureReasonZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_ClosureReasonZDecodeErrorZ_get_err(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_err")] public static extern long CResultCOptionClosureReasonZDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_ty_from_ptr")] public static extern long LDKHTLCDestinationTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_node_id")] public static extern long LDKHTLCDestinationNextHopChannelGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_channel_id")] public static extern long LDKHTLCDestinationNextHopChannelGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_UnknownNextHop_get_requested_forward_scid")] public static extern long LDKHTLCDestinationUnknownNextHopGetRequestedForwardScid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_InvalidForward_get_requested_forward_scid")] public static extern long LDKHTLCDestinationInvalidForwardGetRequestedForwardScid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_FailedPayment_get_payment_hash")] public static extern long LDKHTLCDestinationFailedPaymentGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_ty_from_ptr")] public static extern long LDKCOptionHTLCDestinationZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_Some_get_some")] public static extern long LDKCOptionHTLCDestinationZSomeGetSome(long ptr);
	// struct LDKCOption_HTLCDestinationZ CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_HTLCDestinationZDecodeErrorZ_get_err(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_err")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZGetErr(long _owner);
	// enum LDKPaymentFailureReason CResult_PaymentFailureReasonDecodeErrorZ_get_ok(LDKCResult_PaymentFailureReasonDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_get_ok")] public static extern PaymentFailureReason CResultPaymentFailureReasonDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PaymentFailureReasonDecodeErrorZ_get_err(LDKCResult_PaymentFailureReasonDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_get_err")] public static extern long CResultPaymentFailureReasonDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_U128Z_ty_from_ptr")] public static extern long LDKCOptionU128ZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_U128Z_Some_get_some")] public static extern long LDKCOptionU128ZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentFailureReasonZ_ty_from_ptr")] public static extern long LDKCOptionPaymentFailureReasonZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentFailureReasonZ_Some_get_some")] public static extern PaymentFailureReason LDKCOptionPaymentFailureReasonZSomeGetSome(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ty_from_ptr")] public static extern long LDKBumpTransactionEventTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_claim_id")] public static extern long LDKBumpTransactionEventChannelCloseGetClaimId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_package_target_feerate_sat_per_1000_weight")] public static extern int LDKBumpTransactionEventChannelCloseGetPackageTargetFeerateSatPer1000Weight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_commitment_tx")] public static extern long LDKBumpTransactionEventChannelCloseGetCommitmentTx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_commitment_tx_fee_satoshis")] public static extern long LDKBumpTransactionEventChannelCloseGetCommitmentTxFeeSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_anchor_descriptor")] public static extern long LDKBumpTransactionEventChannelCloseGetAnchorDescriptor(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_pending_htlcs")] public static extern long LDKBumpTransactionEventChannelCloseGetPendingHtlcs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_claim_id")] public static extern long LDKBumpTransactionEventHTLCResolutionGetClaimId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_target_feerate_sat_per_1000_weight")] public static extern int LDKBumpTransactionEventHTLCResolutionGetTargetFeerateSatPer1000Weight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_htlc_descriptors")] public static extern long LDKBumpTransactionEventHTLCResolutionGetHtlcDescriptors(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_tx_lock_time")] public static extern int LDKBumpTransactionEventHTLCResolutionGetTxLockTime(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ty_from_ptr")] public static extern long LDKEventTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_temporary_channel_id")] public static extern long LDKEventFundingGenerationReadyGetTemporaryChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_counterparty_node_id")] public static extern long LDKEventFundingGenerationReadyGetCounterpartyNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_channel_value_satoshis")] public static extern long LDKEventFundingGenerationReadyGetChannelValueSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_output_script")] public static extern long LDKEventFundingGenerationReadyGetOutputScript(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_user_channel_id")] public static extern long LDKEventFundingGenerationReadyGetUserChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_receiver_node_id")] public static extern long LDKEventPaymentClaimableGetReceiverNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_payment_hash")] public static extern long LDKEventPaymentClaimableGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_onion_fields")] public static extern long LDKEventPaymentClaimableGetOnionFields(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_amount_msat")] public static extern long LDKEventPaymentClaimableGetAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_counterparty_skimmed_fee_msat")] public static extern long LDKEventPaymentClaimableGetCounterpartySkimmedFeeMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_purpose")] public static extern long LDKEventPaymentClaimableGetPurpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_channel_id")] public static extern long LDKEventPaymentClaimableGetViaChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_user_channel_id")] public static extern long LDKEventPaymentClaimableGetViaUserChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_claim_deadline")] public static extern long LDKEventPaymentClaimableGetClaimDeadline(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_receiver_node_id")] public static extern long LDKEventPaymentClaimedGetReceiverNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_payment_hash")] public static extern long LDKEventPaymentClaimedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_amount_msat")] public static extern long LDKEventPaymentClaimedGetAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_purpose")] public static extern long LDKEventPaymentClaimedGetPurpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_htlcs")] public static extern long LDKEventPaymentClaimedGetHtlcs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_sender_intended_total_msat")] public static extern long LDKEventPaymentClaimedGetSenderIntendedTotalMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ConnectionNeeded_get_node_id")] public static extern long LDKEventConnectionNeededGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ConnectionNeeded_get_addresses")] public static extern long LDKEventConnectionNeededGetAddresses(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_InvoiceRequestFailed_get_payment_id")] public static extern long LDKEventInvoiceRequestFailedGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_id")] public static extern long LDKEventPaymentSentGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_preimage")] public static extern long LDKEventPaymentSentGetPaymentPreimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_hash")] public static extern long LDKEventPaymentSentGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_fee_paid_msat")] public static extern long LDKEventPaymentSentGetFeePaidMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_id")] public static extern long LDKEventPaymentFailedGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_hash")] public static extern long LDKEventPaymentFailedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_reason")] public static extern long LDKEventPaymentFailedGetReason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_id")] public static extern long LDKEventPaymentPathSuccessfulGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_hash")] public static extern long LDKEventPaymentPathSuccessfulGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_path")] public static extern long LDKEventPaymentPathSuccessfulGetPath(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_id")] public static extern long LDKEventPaymentPathFailedGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_hash")] public static extern long LDKEventPaymentPathFailedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_failed_permanently")] public static extern bool LDKEventPaymentPathFailedGetPaymentFailedPermanently(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_failure")] public static extern long LDKEventPaymentPathFailedGetFailure(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_path")] public static extern long LDKEventPaymentPathFailedGetPath(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_short_channel_id")] public static extern long LDKEventPaymentPathFailedGetShortChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_id")] public static extern long LDKEventProbeSuccessfulGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_hash")] public static extern long LDKEventProbeSuccessfulGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_path")] public static extern long LDKEventProbeSuccessfulGetPath(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_id")] public static extern long LDKEventProbeFailedGetPaymentId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_hash")] public static extern long LDKEventProbeFailedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_path")] public static extern long LDKEventProbeFailedGetPath(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_short_channel_id")] public static extern long LDKEventProbeFailedGetShortChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PendingHTLCsForwardable_get_time_forwardable")] public static extern long LDKEventPendingHTLCsForwardableGetTimeForwardable(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_intercept_id")] public static extern long LDKEventHTLCInterceptedGetInterceptId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_requested_next_hop_scid")] public static extern long LDKEventHTLCInterceptedGetRequestedNextHopScid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_payment_hash")] public static extern long LDKEventHTLCInterceptedGetPaymentHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_inbound_amount_msat")] public static extern long LDKEventHTLCInterceptedGetInboundAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat")] public static extern long LDKEventHTLCInterceptedGetExpectedOutboundAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_SpendableOutputs_get_outputs")] public static extern long LDKEventSpendableOutputsGetOutputs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_SpendableOutputs_get_channel_id")] public static extern long LDKEventSpendableOutputsGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_prev_channel_id")] public static extern long LDKEventPaymentForwardedGetPrevChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_next_channel_id")] public static extern long LDKEventPaymentForwardedGetNextChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_fee_earned_msat")] public static extern long LDKEventPaymentForwardedGetFeeEarnedMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_claim_from_onchain_tx")] public static extern bool LDKEventPaymentForwardedGetClaimFromOnchainTx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_outbound_amount_forwarded_msat")] public static extern long LDKEventPaymentForwardedGetOutboundAmountForwardedMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_channel_id")] public static extern long LDKEventChannelPendingGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_user_channel_id")] public static extern long LDKEventChannelPendingGetUserChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_former_temporary_channel_id")] public static extern long LDKEventChannelPendingGetFormerTemporaryChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_counterparty_node_id")] public static extern long LDKEventChannelPendingGetCounterpartyNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_funding_txo")] public static extern long LDKEventChannelPendingGetFundingTxo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_id")] public static extern long LDKEventChannelReadyGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_user_channel_id")] public static extern long LDKEventChannelReadyGetUserChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_counterparty_node_id")] public static extern long LDKEventChannelReadyGetCounterpartyNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_type")] public static extern long LDKEventChannelReadyGetChannelType(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_id")] public static extern long LDKEventChannelClosedGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_user_channel_id")] public static extern long LDKEventChannelClosedGetUserChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_reason")] public static extern long LDKEventChannelClosedGetReason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_counterparty_node_id")] public static extern long LDKEventChannelClosedGetCounterpartyNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_capacity_sats")] public static extern long LDKEventChannelClosedGetChannelCapacitySats(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_funding_txo")] public static extern long LDKEventChannelClosedGetChannelFundingTxo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_channel_id")] public static extern long LDKEventDiscardFundingGetChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_transaction")] public static extern long LDKEventDiscardFundingGetTransaction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_temporary_channel_id")] public static extern long LDKEventOpenChannelRequestGetTemporaryChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_counterparty_node_id")] public static extern long LDKEventOpenChannelRequestGetCounterpartyNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_funding_satoshis")] public static extern long LDKEventOpenChannelRequestGetFundingSatoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_push_msat")] public static extern long LDKEventOpenChannelRequestGetPushMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_channel_type")] public static extern long LDKEventOpenChannelRequestGetChannelType(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_prev_channel_id")] public static extern long LDKEventHTLCHandlingFailedGetPrevChannelId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_failed_next_destination")] public static extern long LDKEventHTLCHandlingFailedGetFailedNextDestination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_BumpTransaction_get_bump_transaction")] public static extern long LDKEventBumpTransactionGetBumpTransaction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_ty_from_ptr")] public static extern long LDKCOptionEventZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_Some_get_some")] public static extern long LDKCOptionEventZSomeGetSome(long ptr);
	// struct LDKCOption_EventZ CResult_COption_EventZDecodeErrorZ_get_ok(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_ok")] public static extern long CResultCOptionEventZDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_COption_EventZDecodeErrorZ_get_err(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_err")] public static extern long CResultCOptionEventZDecodeErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_ty_from_ptr")] public static extern long LDKBolt11ParseErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_Bech32Error_get_bech32_error")] public static extern long LDKBolt11ParseErrorBech32ErrorGetBech32Error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_ParseAmountError_get_parse_amount_error")] public static extern int LDKBolt11ParseErrorParseAmountErrorGetParseAmountError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_MalformedSignature_get_malformed_signature")] public static extern Secp256k1Error LDKBolt11ParseErrorMalformedSignatureGetMalformedSignature(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_DescriptionDecodeError_get_description_decode_error")] public static extern int LDKBolt11ParseErrorDescriptionDecodeErrorGetDescriptionDecodeError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11ParseError_InvalidSliceLength_get_invalid_slice_length")] public static extern long LDKBolt11ParseErrorInvalidSliceLengthGetInvalidSliceLength(long ptr);
	// enum LDKSiPrefix CResult_SiPrefixBolt11ParseErrorZ_get_ok(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_get_ok")] public static extern SiPrefix CResultSiPrefixBolt11ParseErrorZGetOk(long _owner);
	// struct LDKBolt11ParseError CResult_SiPrefixBolt11ParseErrorZ_get_err(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_get_err")] public static extern long CResultSiPrefixBolt11ParseErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ty_from_ptr")] public static extern long LDKParseOrSemanticErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ParseError_get_parse_error")] public static extern long LDKParseOrSemanticErrorParseErrorGetParseError(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_SemanticError_get_semantic_error")] public static extern Bolt11SemanticError LDKParseOrSemanticErrorSemanticErrorGetSemanticError(long ptr);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_ok(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_ok")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZGetOk(long _owner);
	// struct LDKParseOrSemanticError CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_err(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_err")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZGetErr(long _owner);
	// struct LDKSignedRawBolt11Invoice CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_ok(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_ok")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZGetOk(long _owner);
	// struct LDKBolt11ParseError CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_err(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_err")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZGetErr(long _owner);
	// struct LDKRawBolt11Invoice C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_a(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_a")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezGetA(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_b(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_b")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezGetB(long _owner);
	// struct LDKBolt11InvoiceSignature C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_c(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_c")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezGetC(long _owner);
	// struct LDKPayeePubKey CResult_PayeePubKeySecp256k1ErrorZ_get_ok(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_get_ok")] public static extern long CResultPayeePubKeySecp256k1ErrorZGetOk(long _owner);
	// enum LDKSecp256k1Error CResult_PayeePubKeySecp256k1ErrorZ_get_err(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_get_err")] public static extern Secp256k1Error CResultPayeePubKeySecp256k1ErrorZGetErr(long _owner);
	// struct LDKPositiveTimestamp CResult_PositiveTimestampCreationErrorZ_get_ok(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_ok")] public static extern long CResultPositiveTimestampCreationErrorZGetOk(long _owner);
	// enum LDKCreationError CResult_PositiveTimestampCreationErrorZ_get_err(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_err")] public static extern CreationError CResultPositiveTimestampCreationErrorZGetErr(long _owner);
	// void CResult_NoneBolt11SemanticErrorZ_get_ok(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_get_ok")] public static extern void CResultNoneBolt11SemanticErrorZGetOk(long _owner);
	// enum LDKBolt11SemanticError CResult_NoneBolt11SemanticErrorZ_get_err(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_get_err")] public static extern Bolt11SemanticError CResultNoneBolt11SemanticErrorZGetErr(long _owner);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_ok(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_ok")] public static extern long CResultBolt11InvoiceBolt11SemanticErrorZGetOk(long _owner);
	// enum LDKBolt11SemanticError CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_err(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_err")] public static extern Bolt11SemanticError CResultBolt11InvoiceBolt11SemanticErrorZGetErr(long _owner);
	// struct LDKDescription CResult_DescriptionCreationErrorZ_get_ok(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_ok")] public static extern long CResultDescriptionCreationErrorZGetOk(long _owner);
	// enum LDKCreationError CResult_DescriptionCreationErrorZ_get_err(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_err")] public static extern CreationError CResultDescriptionCreationErrorZGetErr(long _owner);
	// struct LDKPrivateRoute CResult_PrivateRouteCreationErrorZ_get_ok(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_ok")] public static extern long CResultPrivateRouteCreationErrorZGetOk(long _owner);
	// enum LDKCreationError CResult_PrivateRouteCreationErrorZ_get_err(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_err")] public static extern CreationError CResultPrivateRouteCreationErrorZGetErr(long _owner);
	// struct LDKOutPoint CResult_OutPointDecodeErrorZ_get_ok(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_ok")] public static extern long CResultOutPointDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_OutPointDecodeErrorZ_get_err(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_err")] public static extern long CResultOutPointDecodeErrorZGetErr(long _owner);
	// struct LDKBigSize CResult_BigSizeDecodeErrorZ_get_ok(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_get_ok")] public static extern long CResultBigSizeDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BigSizeDecodeErrorZ_get_err(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_get_err")] public static extern long CResultBigSizeDecodeErrorZGetErr(long _owner);
	// struct LDKHostname CResult_HostnameDecodeErrorZ_get_ok(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_get_ok")] public static extern long CResultHostnameDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HostnameDecodeErrorZ_get_err(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_get_err")] public static extern long CResultHostnameDecodeErrorZGetErr(long _owner);
	// struct LDKTransactionU16LenLimited CResult_TransactionU16LenLimitedNoneZ_get_ok(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_get_ok")] public static extern long CResultTransactionU16LenLimitedNoneZGetOk(long _owner);
	// void CResult_TransactionU16LenLimitedNoneZ_get_err(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_get_err")] public static extern void CResultTransactionU16LenLimitedNoneZGetErr(long _owner);
	// struct LDKTransactionU16LenLimited CResult_TransactionU16LenLimitedDecodeErrorZ_get_ok(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_get_ok")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_TransactionU16LenLimitedDecodeErrorZ_get_err(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_get_err")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZGetErr(long _owner);
	// struct LDKUntrustedString CResult_UntrustedStringDecodeErrorZ_get_ok(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_get_ok")] public static extern long CResultUntrustedStringDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_UntrustedStringDecodeErrorZ_get_err(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_get_err")] public static extern long CResultUntrustedStringDecodeErrorZGetErr(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple__u832u16Z_get_a(LDKC2Tuple__u832u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_get_a")] public static extern long C2TupleU832U16ZGetA(long _owner);
	// uint16_t C2Tuple__u832u16Z_get_b(LDKC2Tuple__u832u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_get_b")] public static extern short C2TupleU832U16ZGetB(long _owner);
	// struct LDKPaymentRelay CResult_PaymentRelayDecodeErrorZ_get_ok(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_get_ok")] public static extern long CResultPaymentRelayDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PaymentRelayDecodeErrorZ_get_err(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_get_err")] public static extern long CResultPaymentRelayDecodeErrorZGetErr(long _owner);
	// struct LDKPaymentConstraints CResult_PaymentConstraintsDecodeErrorZ_get_ok(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_get_ok")] public static extern long CResultPaymentConstraintsDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_PaymentConstraintsDecodeErrorZ_get_err(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_get_err")] public static extern long CResultPaymentConstraintsDecodeErrorZGetErr(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_a(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_a")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZGetA(long _owner);
	// struct LDKRecipientOnionFields C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_b(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_b")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZGetB(long _owner);
	// struct LDKRouteParameters C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_c(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_c")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZGetC(long _owner);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_ok(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_ok")] public static extern long CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZGetOk(long _owner);
	// void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_err(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_err")] public static extern void CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZGetErr(long _owner);
	// struct LDKStr CResult_StrSecp256k1ErrorZ_get_ok(LDKCResult_StrSecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_get_ok")] public static extern long CResultStrSecp256k1ErrorZGetOk(long _owner);
	// enum LDKSecp256k1Error CResult_StrSecp256k1ErrorZ_get_err(LDKCResult_StrSecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_get_err")] public static extern Secp256k1Error CResultStrSecp256k1ErrorZGetErr(long _owner);
	// struct LDKPublicKey C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_a(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_a")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZGetA(long _owner);
	// struct LDKOnionMessage C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_b(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_b")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZGetB(long _owner);
	// struct LDKCOption_CVec_SocketAddressZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_c(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_c")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZGetC(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_ty_from_ptr")] public static extern long LDKSendErrorTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_Secp256k1_get_secp256k1")] public static extern Secp256k1Error LDKSendErrorSecp256k1GetSecp256K1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_InvalidFirstHop_get_invalid_first_hop")] public static extern long LDKSendErrorInvalidFirstHopGetInvalidFirstHop(long ptr);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_ok(LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_ok")] public static extern long CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZGetOk(long _owner);
	// struct LDKSendError CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_err(LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_err")] public static extern long CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_ty_from_ptr")] public static extern long LDKParsedOnionMessageContentsTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_Offers_get_offers")] public static extern long LDKParsedOnionMessageContentsOffersGetOffers(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_Custom_get_custom")] public static extern long LDKParsedOnionMessageContentsCustomGetCustom(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_ty_from_ptr")] public static extern long LDKPeeledOnionTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Forward_get__0")] public static extern long LDKPeeledOnionForwardGet0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Forward_get__1")] public static extern long LDKPeeledOnionForwardGet1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__0")] public static extern long LDKPeeledOnionReceiveGet0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__1")] public static extern long LDKPeeledOnionReceiveGet1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__2")] public static extern long LDKPeeledOnionReceiveGet2(long ptr);
	// struct LDKPeeledOnion CResult_PeeledOnionNoneZ_get_ok(LDKCResult_PeeledOnionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_get_ok")] public static extern long CResultPeeledOnionNoneZGetOk(long _owner);
	// void CResult_PeeledOnionNoneZ_get_err(LDKCResult_PeeledOnionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_get_err")] public static extern void CResultPeeledOnionNoneZGetErr(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendSuccess_ty_from_ptr")] public static extern long LDKSendSuccessTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendSuccess_BufferedAwaitingConnection_get_buffered_awaiting_connection")] public static extern long LDKSendSuccessBufferedAwaitingConnectionGetBufferedAwaitingConnection(long ptr);
	// struct LDKSendSuccess CResult_SendSuccessSendErrorZ_get_ok(LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_get_ok")] public static extern long CResultSendSuccessSendErrorZGetOk(long _owner);
	// struct LDKSendError CResult_SendSuccessSendErrorZ_get_err(LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_get_err")] public static extern long CResultSendSuccessSendErrorZGetErr(long _owner);
	// struct LDKBlindedPath CResult_BlindedPathNoneZ_get_ok(LDKCResult_BlindedPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_get_ok")] public static extern long CResultBlindedPathNoneZGetOk(long _owner);
	// void CResult_BlindedPathNoneZ_get_err(LDKCResult_BlindedPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_get_err")] public static extern void CResultBlindedPathNoneZGetErr(long _owner);
	// struct LDKC2Tuple_BlindedPayInfoBlindedPathZ CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_get_ok(LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_get_ok")] public static extern long CResultC2TupleBlindedPayInfoBlindedPathZNoneZGetOk(long _owner);
	// void CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_get_err(LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_get_err")] public static extern void CResultC2TupleBlindedPayInfoBlindedPathZNoneZGetErr(long _owner);
	// struct LDKBlindedPath CResult_BlindedPathDecodeErrorZ_get_ok(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_get_ok")] public static extern long CResultBlindedPathDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedPathDecodeErrorZ_get_err(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_get_err")] public static extern long CResultBlindedPathDecodeErrorZGetErr(long _owner);
	// struct LDKBlindedHop CResult_BlindedHopDecodeErrorZ_get_ok(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_ok")] public static extern long CResultBlindedHopDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_BlindedHopDecodeErrorZ_get_err(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_err")] public static extern long CResultBlindedHopDecodeErrorZGetErr(long _owner);
	// struct LDKInvoiceError CResult_InvoiceErrorDecodeErrorZ_get_ok(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_get_ok")] public static extern long CResultInvoiceErrorDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_InvoiceErrorDecodeErrorZ_get_err(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_get_err")] public static extern long CResultInvoiceErrorDecodeErrorZGetErr(long _owner);
	// struct LDKDelayedPaymentBasepoint CResult_DelayedPaymentBasepointDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_get_ok")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentBasepointDecodeErrorZ_get_err(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_get_err")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZGetErr(long _owner);
	// struct LDKDelayedPaymentKey CResult_DelayedPaymentKeyDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_get_ok")] public static extern long CResultDelayedPaymentKeyDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentKeyDecodeErrorZ_get_err(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_get_err")] public static extern long CResultDelayedPaymentKeyDecodeErrorZGetErr(long _owner);
	// struct LDKHtlcBasepoint CResult_HtlcBasepointDecodeErrorZ_get_ok(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_get_ok")] public static extern long CResultHtlcBasepointDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HtlcBasepointDecodeErrorZ_get_err(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_get_err")] public static extern long CResultHtlcBasepointDecodeErrorZGetErr(long _owner);
	// struct LDKHtlcKey CResult_HtlcKeyDecodeErrorZ_get_ok(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_get_ok")] public static extern long CResultHtlcKeyDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_HtlcKeyDecodeErrorZ_get_err(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_get_err")] public static extern long CResultHtlcKeyDecodeErrorZGetErr(long _owner);
	// struct LDKRevocationBasepoint CResult_RevocationBasepointDecodeErrorZ_get_ok(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_get_ok")] public static extern long CResultRevocationBasepointDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RevocationBasepointDecodeErrorZ_get_err(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_get_err")] public static extern long CResultRevocationBasepointDecodeErrorZGetErr(long _owner);
	// struct LDKRevocationKey CResult_RevocationKeyDecodeErrorZ_get_ok(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_get_ok")] public static extern long CResultRevocationKeyDecodeErrorZGetOk(long _owner);
	// struct LDKDecodeError CResult_RevocationKeyDecodeErrorZ_get_err(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_get_err")] public static extern long CResultRevocationKeyDecodeErrorZGetErr(long _owner);
	public interface LDKFilter {
		void RegisterTx(long txid, long script_pubkey);
		void RegisterOutput(long output);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFilter_new")] public static extern long LDKFilterNewNative(long impl_idx);
	public static long[] LDKFilterNew(LDKFilter impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFilterNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void Filter_register_tx LDKFilter *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKu8slice script_pubkey
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_tx")] public static extern void FilterRegisterTx(long _this_arg, long _txid, long _script_pubkey);
	// void Filter_register_output LDKFilter *NONNULL_PTR this_arg, struct LDKWatchedOutput output
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_output")] public static extern void FilterRegisterOutput(long _this_arg, long _output);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_ty_from_ptr")] public static extern long LDKCOptionFilterZTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_Some_get_some")] public static extern long LDKCOptionFilterZSomeGetSome(long ptr);
	// struct LDKLockedChannelMonitor CResult_LockedChannelMonitorNoneZ_get_ok(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_ok")] public static extern long CResultLockedChannelMonitorNoneZGetOk(long _owner);
	// void CResult_LockedChannelMonitorNoneZ_get_err(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_err")] public static extern void CResultLockedChannelMonitorNoneZGetErr(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_a(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_a")] public static extern long C2TupleOutPointCVecMonitorUpdateIdZZGetA(long _owner);
	// struct LDKCVec_MonitorUpdateIdZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_b(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_get_b")] public static extern long C2TupleOutPointCVecMonitorUpdateIdZZGetB(long _owner);
	public interface LDKKVStore {
		long Read(long primary_namespace, long secondary_namespace, long key);
		long Write(long primary_namespace, long secondary_namespace, long key, long buf);
		long Remove(long primary_namespace, long secondary_namespace, long key, bool lazy);
		long List(long primary_namespace, long secondary_namespace);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKKVStore_new")] public static extern long LDKKVStoreNewNative(long impl_idx);
	public static long[] LDKKVStoreNew(LDKKVStore impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKKVStoreNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_u8ZIOErrorZ KVStore_read LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_read")] public static extern long KVStoreRead(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key);
	// LDKCResult_NoneIOErrorZ KVStore_write LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key, struct LDKu8slice buf
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_write")] public static extern long KVStoreWrite(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key, long _buf);
	// LDKCResult_NoneIOErrorZ KVStore_remove LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key, bool lazy
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_remove")] public static extern long KVStoreRemove(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key, bool _lazy);
	// LDKCResult_CVec_StrZIOErrorZ KVStore_list LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_list")] public static extern long KVStoreList(long _this_arg, long _primary_namespace, long _secondary_namespace);
	public interface LDKPersister {
		long PersistManager(long channel_manager);
		long PersistGraph(long network_graph);
		long PersistScorer(long scorer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersister_new")] public static extern long LDKPersisterNewNative(long impl_idx);
	public static long[] LDKPersisterNew(LDKPersister impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKPersisterNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_NoneIOErrorZ Persister_persist_manager LDKPersister *NONNULL_PTR this_arg, const struct LDKChannelManager *NONNULL_PTR channel_manager
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_manager")] public static extern long PersisterPersistManager(long _this_arg, long _channel_manager);
	// LDKCResult_NoneIOErrorZ Persister_persist_graph LDKPersister *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR network_graph
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_graph")] public static extern long PersisterPersistGraph(long _this_arg, long _network_graph);
	// LDKCResult_NoneIOErrorZ Persister_persist_scorer LDKPersister *NONNULL_PTR this_arg, const struct LDKWriteableScore *NONNULL_PTR scorer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_scorer")] public static extern long PersisterPersistScorer(long _this_arg, long _scorer);
	public interface LDKPersist {
		ChannelMonitorUpdateStatus PersistNewChannel(long channel_id, long data, long update_id);
		ChannelMonitorUpdateStatus UpdatePersistedChannel(long channel_id, long update, long data, long update_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersist_new")] public static extern long LDKPersistNewNative(long impl_idx);
	public static long[] LDKPersistNew(LDKPersist impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKPersistNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKChannelMonitorUpdateStatus Persist_persist_new_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_id, const struct LDKChannelMonitor *NONNULL_PTR data, struct LDKMonitorUpdateId update_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_persist_new_channel")] public static extern ChannelMonitorUpdateStatus PersistPersistNewChannel(long _this_arg, long _channel_id, long _data, long _update_id);
	// LDKChannelMonitorUpdateStatus Persist_update_persisted_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_id, struct LDKChannelMonitorUpdate update, const struct LDKChannelMonitor *NONNULL_PTR data, struct LDKMonitorUpdateId update_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_update_persisted_channel")] public static extern ChannelMonitorUpdateStatus PersistUpdatePersistedChannel(long _this_arg, long _channel_id, long _update, long _data, long _update_id);
	public interface LDKFutureCallback {
		void Call();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFutureCallback_new")] public static extern long LDKFutureCallbackNewNative(long impl_idx);
	public static long[] LDKFutureCallbackNew(LDKFutureCallback impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFutureCallbackNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void FutureCallback_call LDKFutureCallback *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_call")] public static extern void FutureCallbackCall(long _this_arg);
	public interface LDKListen {
		void FilteredBlockConnected(long header, long txdata, int height);
		void BlockConnected(long block, int height);
		void BlockDisconnected(long header, int height);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKListen_new")] public static extern long LDKListenNewNative(long impl_idx);
	public static long[] LDKListenNew(LDKListen impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKListenNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void Listen_filtered_block_connected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_filtered_block_connected")] public static extern void ListenFilteredBlockConnected(long _this_arg, long _header, long _txdata, int _height);
	// void Listen_block_connected LDKListen *NONNULL_PTR this_arg, struct LDKu8slice block, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_connected")] public static extern void ListenBlockConnected(long _this_arg, long _block, int _height);
	// void Listen_block_disconnected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_disconnected")] public static extern void ListenBlockDisconnected(long _this_arg, long _header, int _height);
	public interface LDKConfirm {
		void TransactionsConfirmed(long header, long txdata, int height);
		void TransactionUnconfirmed(long txid);
		void BestBlockUpdated(long header, int height);
		long GetRelevantTxids();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKConfirm_new")] public static extern long LDKConfirmNewNative(long impl_idx);
	public static long[] LDKConfirmNew(LDKConfirm impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKConfirmNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void Confirm_transactions_confirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transactions_confirmed")] public static extern void ConfirmTransactionsConfirmed(long _this_arg, long _header, long _txdata, int _height);
	// void Confirm_transaction_unconfirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*txid)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transaction_unconfirmed")] public static extern void ConfirmTransactionUnconfirmed(long _this_arg, long _txid);
	// void Confirm_best_block_updated LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_best_block_updated")] public static extern void ConfirmBestBlockUpdated(long _this_arg, long _header, int _height);
	// LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ Confirm_get_relevant_txids LDKConfirm *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_get_relevant_txids")] public static extern long ConfirmGetRelevantTxids(long _this_arg);
	public interface LDKEventHandler {
		void HandleEvent(long _event);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventHandler_new")] public static extern long LDKEventHandlerNewNative(long impl_idx);
	public static long[] LDKEventHandlerNew(LDKEventHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEventHandlerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void EventHandler_handle_event LDKEventHandler *NONNULL_PTR this_arg, struct LDKEvent event
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_handle_event")] public static extern void EventHandlerHandleEvent(long _this_arg, long _event);
	public interface LDKEventsProvider {
		void ProcessPendingEvents(long handler);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventsProvider_new")] public static extern long LDKEventsProviderNewNative(long impl_idx);
	public static long[] LDKEventsProviderNew(LDKEventsProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEventsProviderNewNative(i);
		ret[1] = i;
		return ret;
	}
	// void EventsProvider_process_pending_events LDKEventsProvider *NONNULL_PTR this_arg, struct LDKEventHandler handler
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_process_pending_events")] public static extern void EventsProviderProcessPendingEvents(long _this_arg, long _handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFailureCode_ty_from_ptr")] public static extern long LDKFailureCodeTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFailureCode_InvalidOnionPayload_get_invalid_onion_payload")] public static extern long LDKFailureCodeInvalidOnionPayloadGetInvalidOnionPayload(long ptr);
	public interface LDKMessageSendEventsProvider {
		long GetAndClearPendingMsgEvents();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEventsProvider_new")] public static extern long LDKMessageSendEventsProviderNewNative(long impl_idx);
	public static long[] LDKMessageSendEventsProviderNew(LDKMessageSendEventsProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKMessageSendEventsProviderNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_MessageSendEventZ MessageSendEventsProvider_get_and_clear_pending_msg_events LDKMessageSendEventsProvider *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_get_and_clear_pending_msg_events")] public static extern long MessageSendEventsProviderGetAndClearPendingMsgEvents(long _this_arg);
	public interface LDKChannelMessageHandler {
		void HandleOpenChannel(long their_node_id, long msg);
		void HandleOpenChannelV2(long their_node_id, long msg);
		void HandleAcceptChannel(long their_node_id, long msg);
		void HandleAcceptChannelV2(long their_node_id, long msg);
		void HandleFundingCreated(long their_node_id, long msg);
		void HandleFundingSigned(long their_node_id, long msg);
		void HandleChannelReady(long their_node_id, long msg);
		void HandleShutdown(long their_node_id, long msg);
		void HandleClosingSigned(long their_node_id, long msg);
		void HandleStfu(long their_node_id, long msg);
		void HandleSplice(long their_node_id, long msg);
		void HandleSpliceAck(long their_node_id, long msg);
		void HandleSpliceLocked(long their_node_id, long msg);
		void HandleTxAddInput(long their_node_id, long msg);
		void HandleTxAddOutput(long their_node_id, long msg);
		void HandleTxRemoveInput(long their_node_id, long msg);
		void HandleTxRemoveOutput(long their_node_id, long msg);
		void HandleTxComplete(long their_node_id, long msg);
		void HandleTxSignatures(long their_node_id, long msg);
		void HandleTxInitRbf(long their_node_id, long msg);
		void HandleTxAckRbf(long their_node_id, long msg);
		void HandleTxAbort(long their_node_id, long msg);
		void HandleUpdateAddHtlc(long their_node_id, long msg);
		void HandleUpdateFulfillHtlc(long their_node_id, long msg);
		void HandleUpdateFailHtlc(long their_node_id, long msg);
		void HandleUpdateFailMalformedHtlc(long their_node_id, long msg);
		void HandleCommitmentSigned(long their_node_id, long msg);
		void HandleRevokeAndAck(long their_node_id, long msg);
		void HandleUpdateFee(long their_node_id, long msg);
		void HandleAnnouncementSignatures(long their_node_id, long msg);
		void PeerDisconnected(long their_node_id);
		long PeerConnected(long their_node_id, long msg, bool inbound);
		void HandleChannelReestablish(long their_node_id, long msg);
		void HandleChannelUpdate(long their_node_id, long msg);
		void HandleError(long their_node_id, long msg);
		long ProvidedNodeFeatures();
		long ProvidedInitFeatures(long their_node_id);
		long GetChainHashes();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelMessageHandler_new")] public static extern long LDKChannelMessageHandlerNewNative(long impl_idx, long MessageSendEventsProvider);
	public static long[] LDKChannelMessageHandlerNew(LDKChannelMessageHandler impl, long MessageSendEventsProvider) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKChannelMessageHandlerNewNative(i, MessageSendEventsProvider);
		ret[1] = i;
		return ret;
	}
	// void ChannelMessageHandler_handle_open_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKOpenChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_open_channel")] public static extern void ChannelMessageHandlerHandleOpenChannel(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_open_channel_v2 LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKOpenChannelV2 *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_open_channel_v2")] public static extern void ChannelMessageHandlerHandleOpenChannelV2(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_accept_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAcceptChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_accept_channel")] public static extern void ChannelMessageHandlerHandleAcceptChannel(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_accept_channel_v2 LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAcceptChannelV2 *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_accept_channel_v2")] public static extern void ChannelMessageHandlerHandleAcceptChannelV2(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_funding_created LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingCreated *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_created")] public static extern void ChannelMessageHandlerHandleFundingCreated(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_funding_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_signed")] public static extern void ChannelMessageHandlerHandleFundingSigned(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_ready LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReady *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_ready")] public static extern void ChannelMessageHandlerHandleChannelReady(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_shutdown LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKShutdown *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_shutdown")] public static extern void ChannelMessageHandlerHandleShutdown(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_closing_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKClosingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_closing_signed")] public static extern void ChannelMessageHandlerHandleClosingSigned(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_stfu LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKStfu *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_stfu")] public static extern void ChannelMessageHandlerHandleStfu(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_splice LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKSplice *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_splice")] public static extern void ChannelMessageHandlerHandleSplice(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_splice_ack LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKSpliceAck *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_splice_ack")] public static extern void ChannelMessageHandlerHandleSpliceAck(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_splice_locked LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKSpliceLocked *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_splice_locked")] public static extern void ChannelMessageHandlerHandleSpliceLocked(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_add_input LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAddInput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_add_input")] public static extern void ChannelMessageHandlerHandleTxAddInput(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_add_output LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAddOutput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_add_output")] public static extern void ChannelMessageHandlerHandleTxAddOutput(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_remove_input LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxRemoveInput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_remove_input")] public static extern void ChannelMessageHandlerHandleTxRemoveInput(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_remove_output LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxRemoveOutput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_remove_output")] public static extern void ChannelMessageHandlerHandleTxRemoveOutput(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_complete LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxComplete *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_complete")] public static extern void ChannelMessageHandlerHandleTxComplete(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_signatures LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxSignatures *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_signatures")] public static extern void ChannelMessageHandlerHandleTxSignatures(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_init_rbf LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxInitRbf *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_init_rbf")] public static extern void ChannelMessageHandlerHandleTxInitRbf(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_ack_rbf LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAckRbf *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_ack_rbf")] public static extern void ChannelMessageHandlerHandleTxAckRbf(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_abort LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAbort *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_abort")] public static extern void ChannelMessageHandlerHandleTxAbort(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_add_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateAddHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_add_htlc")] public static extern void ChannelMessageHandlerHandleUpdateAddHtlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fulfill_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFulfillHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fulfill_htlc")] public static extern void ChannelMessageHandlerHandleUpdateFulfillHtlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_htlc")] public static extern void ChannelMessageHandlerHandleUpdateFailHtlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_malformed_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_malformed_htlc")] public static extern void ChannelMessageHandlerHandleUpdateFailMalformedHtlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_commitment_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKCommitmentSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_commitment_signed")] public static extern void ChannelMessageHandlerHandleCommitmentSigned(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_revoke_and_ack LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKRevokeAndACK *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_revoke_and_ack")] public static extern void ChannelMessageHandlerHandleRevokeAndAck(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fee LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFee *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fee")] public static extern void ChannelMessageHandlerHandleUpdateFee(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_announcement_signatures LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAnnouncementSignatures *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_announcement_signatures")] public static extern void ChannelMessageHandlerHandleAnnouncementSignatures(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_peer_disconnected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_disconnected")] public static extern void ChannelMessageHandlerPeerDisconnected(long _this_arg, long _their_node_id);
	// LDKCResult_NoneNoneZ ChannelMessageHandler_peer_connected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR msg, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_connected")] public static extern long ChannelMessageHandlerPeerConnected(long _this_arg, long _their_node_id, long _msg, bool _inbound);
	// void ChannelMessageHandler_handle_channel_reestablish LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReestablish *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_reestablish")] public static extern void ChannelMessageHandlerHandleChannelReestablish(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_update LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_update")] public static extern void ChannelMessageHandlerHandleChannelUpdate(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_error LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKErrorMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_error")] public static extern void ChannelMessageHandlerHandleError(long _this_arg, long _their_node_id, long _msg);
	// LDKNodeFeatures ChannelMessageHandler_provided_node_features LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_node_features")] public static extern long ChannelMessageHandlerProvidedNodeFeatures(long _this_arg);
	// LDKInitFeatures ChannelMessageHandler_provided_init_features LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_init_features")] public static extern long ChannelMessageHandlerProvidedInitFeatures(long _this_arg, long _their_node_id);
	// LDKCOption_CVec_ThirtyTwoBytesZZ ChannelMessageHandler_get_chain_hashes LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_get_chain_hashes")] public static extern long ChannelMessageHandlerGetChainHashes(long _this_arg);
	public interface LDKOffersMessageHandler {
		long HandleMessage(long message);
		long ReleasePendingMessages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessageHandler_new")] public static extern long LDKOffersMessageHandlerNewNative(long impl_idx);
	public static long[] LDKOffersMessageHandlerNew(LDKOffersMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOffersMessageHandlerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_OffersMessageZ OffersMessageHandler_handle_message LDKOffersMessageHandler *NONNULL_PTR this_arg, struct LDKOffersMessage message
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_handle_message")] public static extern long OffersMessageHandlerHandleMessage(long _this_arg, long _message);
	// LDKCVec_C3Tuple_OffersMessageDestinationBlindedPathZZ OffersMessageHandler_release_pending_messages LDKOffersMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_release_pending_messages")] public static extern long OffersMessageHandlerReleasePendingMessages(long _this_arg);
	public interface LDKRoutingMessageHandler {
		long HandleNodeAnnouncement(long msg);
		long HandleChannelAnnouncement(long msg);
		long HandleChannelUpdate(long msg);
		long GetNextChannelAnnouncement(long starting_point);
		long GetNextNodeAnnouncement(long starting_point);
		long PeerConnected(long their_node_id, long init, bool inbound);
		long HandleReplyChannelRange(long their_node_id, long msg);
		long HandleReplyShortChannelIdsEnd(long their_node_id, long msg);
		long HandleQueryChannelRange(long their_node_id, long msg);
		long HandleQueryShortChannelIds(long their_node_id, long msg);
		bool ProcessingQueueHigh();
		long ProvidedNodeFeatures();
		long ProvidedInitFeatures(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRoutingMessageHandler_new")] public static extern long LDKRoutingMessageHandlerNewNative(long impl_idx, long MessageSendEventsProvider);
	public static long[] LDKRoutingMessageHandlerNew(LDKRoutingMessageHandler impl, long MessageSendEventsProvider) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKRoutingMessageHandlerNewNative(i, MessageSendEventsProvider);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKNodeAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_node_announcement")] public static extern long RoutingMessageHandlerHandleNodeAnnouncement(long _this_arg, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_announcement")] public static extern long RoutingMessageHandlerHandleChannelAnnouncement(long _this_arg, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_update LDKRoutingMessageHandler *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_update")] public static extern long RoutingMessageHandlerHandleChannelUpdate(long _this_arg, long _msg);
	// LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ RoutingMessageHandler_get_next_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, uint64_t starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_channel_announcement")] public static extern long RoutingMessageHandlerGetNextChannelAnnouncement(long _this_arg, long _starting_point);
	// LDKNodeAnnouncement RoutingMessageHandler_get_next_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKNodeId starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_node_announcement")] public static extern long RoutingMessageHandlerGetNextNodeAnnouncement(long _this_arg, long _starting_point);
	// LDKCResult_NoneNoneZ RoutingMessageHandler_peer_connected LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_peer_connected")] public static extern long RoutingMessageHandlerPeerConnected(long _this_arg, long _their_node_id, long _init, bool _inbound);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_channel_range")] public static extern long RoutingMessageHandlerHandleReplyChannelRange(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_short_channel_ids_end LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyShortChannelIdsEnd msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_short_channel_ids_end")] public static extern long RoutingMessageHandlerHandleReplyShortChannelIdsEnd(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_channel_range")] public static extern long RoutingMessageHandlerHandleQueryChannelRange(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_short_channel_ids LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryShortChannelIds msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_short_channel_ids")] public static extern long RoutingMessageHandlerHandleQueryShortChannelIds(long _this_arg, long _their_node_id, long _msg);
	// bool RoutingMessageHandler_processing_queue_high LDKRoutingMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_processing_queue_high")] public static extern bool RoutingMessageHandlerProcessingQueueHigh(long _this_arg);
	// LDKNodeFeatures RoutingMessageHandler_provided_node_features LDKRoutingMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_node_features")] public static extern long RoutingMessageHandlerProvidedNodeFeatures(long _this_arg);
	// LDKInitFeatures RoutingMessageHandler_provided_init_features LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_init_features")] public static extern long RoutingMessageHandlerProvidedInitFeatures(long _this_arg, long _their_node_id);
	public interface LDKOnionMessageHandler {
		long GetAndClearConnectionsNeeded();
		void HandleOnionMessage(long peer_node_id, long msg);
		long NextOnionMessageForPeer(long peer_node_id);
		long PeerConnected(long their_node_id, long init, bool inbound);
		void PeerDisconnected(long their_node_id);
		void TimerTickOccurred();
		long ProvidedNodeFeatures();
		long ProvidedInitFeatures(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageHandler_new")] public static extern long LDKOnionMessageHandlerNewNative(long impl_idx);
	public static long[] LDKOnionMessageHandlerNew(LDKOnionMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOnionMessageHandlerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_C2Tuple_PublicKeyCVec_SocketAddressZZZ OnionMessageHandler_get_and_clear_connections_needed LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_get_and_clear_connections_needed")] public static extern long OnionMessageHandlerGetAndClearConnectionsNeeded(long _this_arg);
	// void OnionMessageHandler_handle_onion_message LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id, const struct LDKOnionMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_handle_onion_message")] public static extern void OnionMessageHandlerHandleOnionMessage(long _this_arg, long _peer_node_id, long _msg);
	// LDKOnionMessage OnionMessageHandler_next_onion_message_for_peer LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_next_onion_message_for_peer")] public static extern long OnionMessageHandlerNextOnionMessageForPeer(long _this_arg, long _peer_node_id);
	// LDKCResult_NoneNoneZ OnionMessageHandler_peer_connected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_connected")] public static extern long OnionMessageHandlerPeerConnected(long _this_arg, long _their_node_id, long _init, bool _inbound);
	// void OnionMessageHandler_peer_disconnected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_disconnected")] public static extern void OnionMessageHandlerPeerDisconnected(long _this_arg, long _their_node_id);
	// void OnionMessageHandler_timer_tick_occurred LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_timer_tick_occurred")] public static extern void OnionMessageHandlerTimerTickOccurred(long _this_arg);
	// LDKNodeFeatures OnionMessageHandler_provided_node_features LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_node_features")] public static extern long OnionMessageHandlerProvidedNodeFeatures(long _this_arg);
	// LDKInitFeatures OnionMessageHandler_provided_init_features LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_init_features")] public static extern long OnionMessageHandlerProvidedInitFeatures(long _this_arg, long _their_node_id);
	public interface LDKCustomMessageReader {
		long Read(short message_type, long buffer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageReader_new")] public static extern long LDKCustomMessageReaderNewNative(long impl_idx);
	public static long[] LDKCustomMessageReaderNew(LDKCustomMessageReader impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomMessageReaderNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_COption_TypeZDecodeErrorZ CustomMessageReader_read LDKCustomMessageReader *NONNULL_PTR this_arg, uint16_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_read")] public static extern long CustomMessageReaderRead(long _this_arg, short _message_type, long _buffer);
	public interface LDKCustomMessageHandler {
		long HandleCustomMessage(long msg, long sender_node_id);
		long GetAndClearPendingMsg();
		long ProvidedNodeFeatures();
		long ProvidedInitFeatures(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageHandler_new")] public static extern long LDKCustomMessageHandlerNewNative(long impl_idx, long CustomMessageReader);
	public static long[] LDKCustomMessageHandlerNew(LDKCustomMessageHandler impl, long CustomMessageReader) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomMessageHandlerNewNative(i, CustomMessageReader);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_NoneLightningErrorZ CustomMessageHandler_handle_custom_message LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKType msg, struct LDKPublicKey sender_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_handle_custom_message")] public static extern long CustomMessageHandlerHandleCustomMessage(long _this_arg, long _msg, long _sender_node_id);
	// LDKCVec_C2Tuple_PublicKeyTypeZZ CustomMessageHandler_get_and_clear_pending_msg LDKCustomMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_get_and_clear_pending_msg")] public static extern long CustomMessageHandlerGetAndClearPendingMsg(long _this_arg);
	// LDKNodeFeatures CustomMessageHandler_provided_node_features LDKCustomMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_provided_node_features")] public static extern long CustomMessageHandlerProvidedNodeFeatures(long _this_arg);
	// LDKInitFeatures CustomMessageHandler_provided_init_features LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_provided_init_features")] public static extern long CustomMessageHandlerProvidedInitFeatures(long _this_arg, long _their_node_id);
	public interface LDKCustomOnionMessageHandler {
		long HandleCustomMessage(long msg);
		long ReadCustomMessage(long message_type, long buffer);
		long ReleasePendingCustomMessages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomOnionMessageHandler_new")] public static extern long LDKCustomOnionMessageHandlerNewNative(long impl_idx);
	public static long[] LDKCustomOnionMessageHandlerNew(LDKCustomOnionMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomOnionMessageHandlerNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_OnionMessageContentsZ CustomOnionMessageHandler_handle_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, struct LDKOnionMessageContents msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_handle_custom_message")] public static extern long CustomOnionMessageHandlerHandleCustomMessage(long _this_arg, long _msg);
	// LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CustomOnionMessageHandler_read_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, uint64_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_read_custom_message")] public static extern long CustomOnionMessageHandlerReadCustomMessage(long _this_arg, long _message_type, long _buffer);
	// LDKCVec_C3Tuple_OnionMessageContentsDestinationBlindedPathZZ CustomOnionMessageHandler_release_pending_custom_messages LDKCustomOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_release_pending_custom_messages")] public static extern long CustomOnionMessageHandlerReleasePendingCustomMessages(long _this_arg);
	public interface LDKSocketDescriptor {
		long SendData(long data, bool resume_read);
		void DisconnectSocket();
		bool Eq(long other_arg);
		long Hash();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketDescriptor_new")] public static extern long LDKSocketDescriptorNewNative(long impl_idx);
	public static long[] LDKSocketDescriptorNew(LDKSocketDescriptor impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSocketDescriptorNewNative(i);
		ret[1] = i;
		return ret;
	}
	// uintptr_t SocketDescriptor_send_data LDKSocketDescriptor *NONNULL_PTR this_arg, struct LDKu8slice data, bool resume_read
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_send_data")] public static extern long SocketDescriptorSendData(long _this_arg, long _data, bool _resume_read);
	// void SocketDescriptor_disconnect_socket LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_disconnect_socket")] public static extern void SocketDescriptorDisconnectSocket(long _this_arg);
	// uint64_t SocketDescriptor_hash LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_hash")] public static extern long SocketDescriptorHash(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ty_from_ptr")] public static extern long LDKEffectiveCapacityTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ExactLiquidity_get_liquidity_msat")] public static extern long LDKEffectiveCapacityExactLiquidityGetLiquidityMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_AdvertisedMaxHTLC_get_amount_msat")] public static extern long LDKEffectiveCapacityAdvertisedMaxHTLCGetAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_capacity_msat")] public static extern long LDKEffectiveCapacityTotalGetCapacityMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_htlc_maximum_msat")] public static extern long LDKEffectiveCapacityTotalGetHtlcMaximumMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_HintMaxHTLC_get_amount_msat")] public static extern long LDKEffectiveCapacityHintMaxHTLCGetAmountMsat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_ty_from_ptr")] public static extern long LDKPayeeTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Blinded_get_route_hints")] public static extern long LDKPayeeBlindedGetRouteHints(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Blinded_get_features")] public static extern long LDKPayeeBlindedGetFeatures(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_node_id")] public static extern long LDKPayeeClearGetNodeId(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_route_hints")] public static extern long LDKPayeeClearGetRouteHints(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_features")] public static extern long LDKPayeeClearGetFeatures(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_final_cltv_expiry_delta")] public static extern int LDKPayeeClearGetFinalCltvExpiryDelta(long ptr);
	public interface LDKScore {
		long Write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScore_new")] public static extern long LDKScoreNewNative(long impl_idx, long ScoreLookUp, long ScoreUpdate);
	public static long[] LDKScoreNew(LDKScore impl, long ScoreLookUp, long ScoreUpdate) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScoreNewNative(i, ScoreLookUp, ScoreUpdate);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_u8Z Score_write LDKScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_write")] public static extern long ScoreWrite(long _this_arg);
	public interface LDKCoinSelectionSource {
		long SelectConfirmedUtxos(long claim_id, long must_spend, long must_pay_to, int target_feerate_sat_per_1000_weight);
		long SignPsbt(long psbt);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCoinSelectionSource_new")] public static extern long LDKCoinSelectionSourceNewNative(long impl_idx);
	public static long[] LDKCoinSelectionSourceNew(LDKCoinSelectionSource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCoinSelectionSourceNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CoinSelectionNoneZ CoinSelectionSource_select_confirmed_utxos LDKCoinSelectionSource *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes claim_id, struct LDKCVec_InputZ must_spend, struct LDKCVec_TxOutZ must_pay_to, uint32_t target_feerate_sat_per_1000_weight
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_select_confirmed_utxos")] public static extern long CoinSelectionSourceSelectConfirmedUtxos(long _this_arg, long _claim_id, long _must_spend, long _must_pay_to, int _target_feerate_sat_per_1000_weight);
	// LDKCResult_TransactionNoneZ CoinSelectionSource_sign_psbt LDKCoinSelectionSource *NONNULL_PTR this_arg, struct LDKCVec_u8Z psbt
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_sign_psbt")] public static extern long CoinSelectionSourceSignPsbt(long _this_arg, long _psbt);
	public interface LDKWalletSource {
		long ListConfirmedUtxos();
		long GetChangeScript();
		long SignPsbt(long psbt);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWalletSource_new")] public static extern long LDKWalletSourceNewNative(long impl_idx);
	public static long[] LDKWalletSourceNew(LDKWalletSource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWalletSourceNewNative(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_UtxoZNoneZ WalletSource_list_confirmed_utxos LDKWalletSource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_list_confirmed_utxos")] public static extern long WalletSourceListConfirmedUtxos(long _this_arg);
	// LDKCResult_CVec_u8ZNoneZ WalletSource_get_change_script LDKWalletSource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_get_change_script")] public static extern long WalletSourceGetChangeScript(long _this_arg);
	// LDKCResult_TransactionNoneZ WalletSource_sign_psbt LDKWalletSource *NONNULL_PTR this_arg, struct LDKCVec_u8Z psbt
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_sign_psbt")] public static extern long WalletSourceSignPsbt(long _this_arg, long _psbt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_ty_from_ptr")] public static extern long LDKGossipSyncTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_P2P_get_p2p")] public static extern long LDKGossipSyncP2PGetP2P(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_Rapid_get_rapid")] public static extern long LDKGossipSyncRapidGetRapid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ty_from_ptr")] public static extern long LDKFallbackTyFromPtr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_version")] public static extern byte LDKFallbackSegWitProgramGetVersion(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_program")] public static extern long LDKFallbackSegWitProgramGetProgram(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_PubKeyHash_get_pub_key_hash")] public static extern long LDKFallbackPubKeyHashGetPubKeyHash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ScriptHash_get_script_hash")] public static extern long LDKFallbackScriptHashGetScriptHash(long ptr);
	// struct LDKStr _ldk_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_get_compiled_version")] public static extern long LdkGetCompiledVersion();
	// struct LDKStr _ldk_c_bindings_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_c_bindings_get_compiled_version")] public static extern long LdkCBindingsGetCompiledVersion();
	// struct LDKSixteenBytes U128_le_bytes(struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_le_bytes")] public static extern long U128LeBytes(long _val);
	// struct LDKU128 U128_new(struct LDKSixteenBytes le_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_new")] public static extern long U128New(long _le_bytes);
	// struct LDKWitnessProgram WitnessProgram_new(struct LDKWitnessVersion version, struct LDKCVec_u8Z program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_new")] public static extern long WitnessProgramNew(byte _version, long _program);
	// struct LDKWitnessVersion WitnessProgram_get_version(const struct LDKWitnessProgram *NONNULL_PTR prog);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_get_version")] public static extern byte WitnessProgramGetVersion(long _prog);
	// struct LDKu8slice WitnessProgram_get_program(const struct LDKWitnessProgram *NONNULL_PTR prog);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_get_program")] public static extern long WitnessProgramGetProgram(long _prog);
	// uint64_t WitnessProgram_clone_ptr(LDKWitnessProgram *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_clone_ptr")] public static extern long WitnessProgramClonePtr(long _arg);
	// struct LDKWitnessProgram WitnessProgram_clone(const struct LDKWitnessProgram *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_clone")] public static extern long WitnessProgramClone(long _orig);
	// void WitnessProgram_free(struct LDKWitnessProgram o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_free")] public static extern void WitnessProgramFree(long _o);
	// struct LDKBigEndianScalar BigEndianScalar_new(struct LDKThirtyTwoBytes big_endian_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_new")] public static extern long BigEndianScalarNew(long _big_endian_bytes);
	// uint64_t Bech32Error_clone_ptr(LDKBech32Error *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone_ptr")] public static extern long Bech32ErrorClonePtr(long _arg);
	// struct LDKBech32Error Bech32Error_clone(const struct LDKBech32Error *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone")] public static extern long Bech32ErrorClone(long _orig);
	// void Bech32Error_free(struct LDKBech32Error o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_free")] public static extern void Bech32ErrorFree(long _o);
	// void Transaction_free(struct LDKTransaction _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Transaction_free")] public static extern void TransactionFree(long __res);
	// void Witness_free(struct LDKWitness _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Witness_free")] public static extern void WitnessFree(long __res);
	// struct LDKTxIn TxIn_new(struct LDKWitness witness, struct LDKCVec_u8Z script_sig, uint32_t sequence, struct LDKThirtyTwoBytes previous_txid, uint32_t previous_vout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_new")] public static extern long TxInNew(long _witness, long _script_sig, int _sequence, long _previous_txid, int _previous_vout);
	// struct LDKWitness TxIn_get_witness(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_witness")] public static extern long TxInGetWitness(long _txin);
	// struct LDKu8slice TxIn_get_script_sig(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_script_sig")] public static extern long TxInGetScriptSig(long _txin);
	// uint32_t TxIn_get_sequence(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_sequence")] public static extern int TxInGetSequence(long _txin);
	// struct LDKThirtyTwoBytes TxIn_get_previous_txid(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_previous_txid")] public static extern long TxInGetPreviousTxid(long _txin);
	// uint32_t TxIn_get_previous_vout(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_previous_vout")] public static extern int TxInGetPreviousVout(long _txin);
	// void TxIn_free(struct LDKTxIn _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_free")] public static extern void TxInFree(long __res);
	// struct LDKTxOut TxOut_new(struct LDKCVec_u8Z script_pubkey, uint64_t value);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_new")] public static extern long TxOutNew(long _script_pubkey, long _value);
	// struct LDKu8slice TxOut_get_script_pubkey(const struct LDKTxOut *NONNULL_PTR txout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_script_pubkey")] public static extern long TxOutGetScriptPubkey(long _txout);
	// uint64_t TxOut_get_value(const struct LDKTxOut *NONNULL_PTR txout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_value")] public static extern long TxOutGetValue(long _txout);
	// void TxOut_free(struct LDKTxOut _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_free")] public static extern void TxOutFree(long __res);
	// uint64_t TxOut_clone_ptr(LDKTxOut *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone_ptr")] public static extern long TxOutClonePtr(long _arg);
	// struct LDKTxOut TxOut_clone(const struct LDKTxOut *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone")] public static extern long TxOutClone(long _orig);
	// void Str_free(struct LDKStr _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Str_free")] public static extern void StrFree(long __res);
	// struct LDKCOption_u64Z COption_u64Z_some(uint64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_some")] public static extern long COptionU64ZSome(long _o);
	// struct LDKCOption_u64Z COption_u64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_none")] public static extern long COptionU64ZNone();
	// void COption_u64Z_free(struct LDKCOption_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_free")] public static extern void COptionU64ZFree(long __res);
	// uint64_t COption_u64Z_clone_ptr(LDKCOption_u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone_ptr")] public static extern long COptionU64ZClonePtr(long _arg);
	// struct LDKCOption_u64Z COption_u64Z_clone(const struct LDKCOption_u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone")] public static extern long COptionU64ZClone(long _orig);
	// void CVec_BlindedPathZ_free(struct LDKCVec_BlindedPathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BlindedPathZ_free")] public static extern void CVecBlindedPathZFree(long __res);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_ok(struct LDKRefund o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_ok")] public static extern long CResultRefundBolt12ParseErrorZOk(long _o);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_err(struct LDKBolt12ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_err")] public static extern long CResultRefundBolt12ParseErrorZErr(long _e);
	// bool CResult_RefundBolt12ParseErrorZ_is_ok(const struct LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_is_ok")] public static extern bool CResultRefundBolt12ParseErrorZIsOk(long _o);
	// void CResult_RefundBolt12ParseErrorZ_free(struct LDKCResult_RefundBolt12ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_free")] public static extern void CResultRefundBolt12ParseErrorZFree(long __res);
	// uint64_t CResult_RefundBolt12ParseErrorZ_clone_ptr(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_clone_ptr")] public static extern long CResultRefundBolt12ParseErrorZClonePtr(long _arg);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_clone(const struct LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_clone")] public static extern long CResultRefundBolt12ParseErrorZClone(long _orig);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_ok(struct LDKRetry o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_ok")] public static extern long CResultRetryDecodeErrorZOk(long _o);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_err")] public static extern long CResultRetryDecodeErrorZErr(long _e);
	// bool CResult_RetryDecodeErrorZ_is_ok(const struct LDKCResult_RetryDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_is_ok")] public static extern bool CResultRetryDecodeErrorZIsOk(long _o);
	// void CResult_RetryDecodeErrorZ_free(struct LDKCResult_RetryDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_free")] public static extern void CResultRetryDecodeErrorZFree(long __res);
	// uint64_t CResult_RetryDecodeErrorZ_clone_ptr(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_clone_ptr")] public static extern long CResultRetryDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_clone(const struct LDKCResult_RetryDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_clone")] public static extern long CResultRetryDecodeErrorZClone(long _orig);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_ok")] public static extern long CResultNoneAPIErrorZOk();
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_err")] public static extern long CResultNoneAPIErrorZErr(long _e);
	// bool CResult_NoneAPIErrorZ_is_ok(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_is_ok")] public static extern bool CResultNoneAPIErrorZIsOk(long _o);
	// void CResult_NoneAPIErrorZ_free(struct LDKCResult_NoneAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_free")] public static extern void CResultNoneAPIErrorZFree(long __res);
	// uint64_t CResult_NoneAPIErrorZ_clone_ptr(LDKCResult_NoneAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone_ptr")] public static extern long CResultNoneAPIErrorZClonePtr(long _arg);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_clone(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone")] public static extern long CResultNoneAPIErrorZClone(long _orig);
	// void CVec_CResult_NoneAPIErrorZZ_free(struct LDKCVec_CResult_NoneAPIErrorZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CResult_NoneAPIErrorZZ_free")] public static extern void CVecCResultNoneAPIErrorZZFree(long __res);
	// void CVec_APIErrorZ_free(struct LDKCVec_APIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_APIErrorZ_free")] public static extern void CVecAPIErrorZFree(long __res);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_some(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_some")] public static extern long COptionThirtyTwoBytesZSome(long _o);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_none")] public static extern long COptionThirtyTwoBytesZNone();
	// void COption_ThirtyTwoBytesZ_free(struct LDKCOption_ThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_free")] public static extern void COptionThirtyTwoBytesZFree(long __res);
	// uint64_t COption_ThirtyTwoBytesZ_clone_ptr(LDKCOption_ThirtyTwoBytesZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_clone_ptr")] public static extern long COptionThirtyTwoBytesZClonePtr(long _arg);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_clone(const struct LDKCOption_ThirtyTwoBytesZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_clone")] public static extern long COptionThirtyTwoBytesZClone(long _orig);
	// void CVec_u8Z_free(struct LDKCVec_u8Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u8Z_free")] public static extern void CVecU8ZFree(long __res);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_some(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_some")] public static extern long COptionCVecU8ZzSome(long _o);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_none")] public static extern long COptionCVecU8ZzNone();
	// void COption_CVec_u8ZZ_free(struct LDKCOption_CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_free")] public static extern void COptionCVecU8ZzFree(long __res);
	// uint64_t COption_CVec_u8ZZ_clone_ptr(LDKCOption_CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_clone_ptr")] public static extern long COptionCVecU8ZzClonePtr(long _arg);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_clone(const struct LDKCOption_CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_clone")] public static extern long COptionCVecU8ZzClone(long _orig);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_ok(struct LDKRecipientOnionFields o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_ok")] public static extern long CResultRecipientOnionFieldsDecodeErrorZOk(long _o);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_err")] public static extern long CResultRecipientOnionFieldsDecodeErrorZErr(long _e);
	// bool CResult_RecipientOnionFieldsDecodeErrorZ_is_ok(const struct LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_is_ok")] public static extern bool CResultRecipientOnionFieldsDecodeErrorZIsOk(long _o);
	// void CResult_RecipientOnionFieldsDecodeErrorZ_free(struct LDKCResult_RecipientOnionFieldsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_free")] public static extern void CResultRecipientOnionFieldsDecodeErrorZFree(long __res);
	// uint64_t CResult_RecipientOnionFieldsDecodeErrorZ_clone_ptr(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_clone_ptr")] public static extern long CResultRecipientOnionFieldsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_clone(const struct LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_clone")] public static extern long CResultRecipientOnionFieldsDecodeErrorZClone(long _orig);
	// uint64_t C2Tuple_u64CVec_u8ZZ_clone_ptr(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_clone_ptr")] public static extern long C2TupleU64CvecU8ZzClonePtr(long _arg);
	// struct LDKC2Tuple_u64CVec_u8ZZ C2Tuple_u64CVec_u8ZZ_clone(const struct LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_clone")] public static extern long C2TupleU64CvecU8ZzClone(long _orig);
	// struct LDKC2Tuple_u64CVec_u8ZZ C2Tuple_u64CVec_u8ZZ_new(uint64_t a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_new")] public static extern long C2TupleU64CvecU8ZzNew(long _a, long _b);
	// void C2Tuple_u64CVec_u8ZZ_free(struct LDKC2Tuple_u64CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_free")] public static extern void C2TupleU64CvecU8ZzFree(long __res);
	// void CVec_C2Tuple_u64CVec_u8ZZZ_free(struct LDKCVec_C2Tuple_u64CVec_u8ZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u64CVec_u8ZZZ_free")] public static extern void CVecC2TupleU64CvecU8ZzzFree(long __res);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_ok(struct LDKRecipientOnionFields o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_ok")] public static extern long CResultRecipientOnionFieldsNoneZOk(long _o);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_err")] public static extern long CResultRecipientOnionFieldsNoneZErr();
	// bool CResult_RecipientOnionFieldsNoneZ_is_ok(const struct LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_is_ok")] public static extern bool CResultRecipientOnionFieldsNoneZIsOk(long _o);
	// void CResult_RecipientOnionFieldsNoneZ_free(struct LDKCResult_RecipientOnionFieldsNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_free")] public static extern void CResultRecipientOnionFieldsNoneZFree(long __res);
	// uint64_t CResult_RecipientOnionFieldsNoneZ_clone_ptr(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_clone_ptr")] public static extern long CResultRecipientOnionFieldsNoneZClonePtr(long _arg);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_clone(const struct LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_clone")] public static extern long CResultRecipientOnionFieldsNoneZClone(long _orig);
	// void CVec_ThirtyTwoBytesZ_free(struct LDKCVec_ThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ThirtyTwoBytesZ_free")] public static extern void CVecThirtyTwoBytesZFree(long __res);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_some(struct LDKCVec_ThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_some")] public static extern long COptionCVecThirtyTwoBytesZZSome(long _o);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_none")] public static extern long COptionCVecThirtyTwoBytesZZNone();
	// void COption_CVec_ThirtyTwoBytesZZ_free(struct LDKCOption_CVec_ThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_free")] public static extern void COptionCVecThirtyTwoBytesZZFree(long __res);
	// uint64_t COption_CVec_ThirtyTwoBytesZZ_clone_ptr(LDKCOption_CVec_ThirtyTwoBytesZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_clone_ptr")] public static extern long COptionCVecThirtyTwoBytesZZClonePtr(long _arg);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_clone(const struct LDKCOption_CVec_ThirtyTwoBytesZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_clone")] public static extern long COptionCVecThirtyTwoBytesZZClone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_ok")] public static extern long CResultThirtyTwoBytesNoneZOk(long _o);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_err")] public static extern long CResultThirtyTwoBytesNoneZErr();
	// bool CResult_ThirtyTwoBytesNoneZ_is_ok(const struct LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_is_ok")] public static extern bool CResultThirtyTwoBytesNoneZIsOk(long _o);
	// void CResult_ThirtyTwoBytesNoneZ_free(struct LDKCResult_ThirtyTwoBytesNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_free")] public static extern void CResultThirtyTwoBytesNoneZFree(long __res);
	// uint64_t CResult_ThirtyTwoBytesNoneZ_clone_ptr(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_clone_ptr")] public static extern long CResultThirtyTwoBytesNoneZClonePtr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_clone(const struct LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_clone")] public static extern long CResultThirtyTwoBytesNoneZClone(long _orig);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_ok(struct LDKBlindedPayInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_ok")] public static extern long CResultBlindedPayInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_err")] public static extern long CResultBlindedPayInfoDecodeErrorZErr(long _e);
	// bool CResult_BlindedPayInfoDecodeErrorZ_is_ok(const struct LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_is_ok")] public static extern bool CResultBlindedPayInfoDecodeErrorZIsOk(long _o);
	// void CResult_BlindedPayInfoDecodeErrorZ_free(struct LDKCResult_BlindedPayInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_free")] public static extern void CResultBlindedPayInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedPayInfoDecodeErrorZ_clone_ptr(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedPayInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_clone(const struct LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_clone")] public static extern long CResultBlindedPayInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKDelayedPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZOk(long _o);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZErr(long _e);
	// bool CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResultDelayedPaymentOutputDescriptorDecodeErrorZIsOk(long _o);
	// void CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResultDelayedPaymentOutputDescriptorDecodeErrorZFree(long __res);
	// uint64_t CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResultDelayedPaymentOutputDescriptorDecodeErrorZClone(long _orig);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKStaticPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZOk(long _o);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZErr(long _e);
	// bool CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResultStaticPaymentOutputDescriptorDecodeErrorZIsOk(long _o);
	// void CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResultStaticPaymentOutputDescriptorDecodeErrorZFree(long __res);
	// uint64_t CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResultStaticPaymentOutputDescriptorDecodeErrorZClone(long _orig);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_ok(struct LDKSpendableOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_ok")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZOk(long _o);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_err")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZErr(long _e);
	// bool CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResultSpendableOutputDescriptorDecodeErrorZIsOk(long _o);
	// void CResult_SpendableOutputDescriptorDecodeErrorZ_free(struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_free")] public static extern void CResultSpendableOutputDescriptorDecodeErrorZFree(long __res);
	// uint64_t CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone")] public static extern long CResultSpendableOutputDescriptorDecodeErrorZClone(long _orig);
	// void CVec_SpendableOutputDescriptorZ_free(struct LDKCVec_SpendableOutputDescriptorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SpendableOutputDescriptorZ_free")] public static extern void CVecSpendableOutputDescriptorZFree(long __res);
	// void CVec_TxOutZ_free(struct LDKCVec_TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TxOutZ_free")] public static extern void CVecTxOutZFree(long __res);
	// struct LDKCOption_u32Z COption_u32Z_some(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_some")] public static extern long COptionU32ZSome(int _o);
	// struct LDKCOption_u32Z COption_u32Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_none")] public static extern long COptionU32ZNone();
	// void COption_u32Z_free(struct LDKCOption_u32Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_free")] public static extern void COptionU32ZFree(long __res);
	// uint64_t COption_u32Z_clone_ptr(LDKCOption_u32Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone_ptr")] public static extern long COptionU32ZClonePtr(long _arg);
	// struct LDKCOption_u32Z COption_u32Z_clone(const struct LDKCOption_u32Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone")] public static extern long COptionU32ZClone(long _orig);
	// uint64_t C2Tuple_CVec_u8Zu64Z_clone_ptr(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_clone_ptr")] public static extern long C2TupleCVecU8Zu64ZClonePtr(long _arg);
	// struct LDKC2Tuple_CVec_u8Zu64Z C2Tuple_CVec_u8Zu64Z_clone(const struct LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_clone")] public static extern long C2TupleCVecU8Zu64ZClone(long _orig);
	// struct LDKC2Tuple_CVec_u8Zu64Z C2Tuple_CVec_u8Zu64Z_new(struct LDKCVec_u8Z a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_new")] public static extern long C2TupleCVecU8Zu64ZNew(long _a, long _b);
	// void C2Tuple_CVec_u8Zu64Z_free(struct LDKC2Tuple_CVec_u8Zu64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_free")] public static extern void C2TupleCVecU8Zu64ZFree(long __res);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_ok(struct LDKC2Tuple_CVec_u8Zu64Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_ok")] public static extern long CResultC2TupleCVecU8Zu64ZnonezOk(long _o);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_err")] public static extern long CResultC2TupleCVecU8Zu64ZnonezErr();
	// bool CResult_C2Tuple_CVec_u8Zu64ZNoneZ_is_ok(const struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_is_ok")] public static extern bool CResultC2TupleCVecU8Zu64ZnonezIsOk(long _o);
	// void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_free(struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_free")] public static extern void CResultC2TupleCVecU8Zu64ZnonezFree(long __res);
	// uint64_t CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone_ptr(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone_ptr")] public static extern long CResultC2TupleCVecU8Zu64ZnonezClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone(const struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone")] public static extern long CResultC2TupleCVecU8Zu64ZnonezClone(long _orig);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_ok(struct LDKChannelDerivationParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_ok")] public static extern long CResultChannelDerivationParametersDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_err")] public static extern long CResultChannelDerivationParametersDecodeErrorZErr(long _e);
	// bool CResult_ChannelDerivationParametersDecodeErrorZ_is_ok(const struct LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_is_ok")] public static extern bool CResultChannelDerivationParametersDecodeErrorZIsOk(long _o);
	// void CResult_ChannelDerivationParametersDecodeErrorZ_free(struct LDKCResult_ChannelDerivationParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_free")] public static extern void CResultChannelDerivationParametersDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelDerivationParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_clone_ptr")] public static extern long CResultChannelDerivationParametersDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_clone(const struct LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_clone")] public static extern long CResultChannelDerivationParametersDecodeErrorZClone(long _orig);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_ok(struct LDKHTLCDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_ok")] public static extern long CResultHTLCDescriptorDecodeErrorZOk(long _o);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_err")] public static extern long CResultHTLCDescriptorDecodeErrorZErr(long _e);
	// bool CResult_HTLCDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_is_ok")] public static extern bool CResultHTLCDescriptorDecodeErrorZIsOk(long _o);
	// void CResult_HTLCDescriptorDecodeErrorZ_free(struct LDKCResult_HTLCDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_free")] public static extern void CResultHTLCDescriptorDecodeErrorZFree(long __res);
	// uint64_t CResult_HTLCDescriptorDecodeErrorZ_clone_ptr(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResultHTLCDescriptorDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_clone(const struct LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_clone")] public static extern long CResultHTLCDescriptorDecodeErrorZClone(long _orig);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_ok")] public static extern long CResultNoneNoneZOk();
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_err")] public static extern long CResultNoneNoneZErr();
	// bool CResult_NoneNoneZ_is_ok(const struct LDKCResult_NoneNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_is_ok")] public static extern bool CResultNoneNoneZIsOk(long _o);
	// void CResult_NoneNoneZ_free(struct LDKCResult_NoneNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_free")] public static extern void CResultNoneNoneZFree(long __res);
	// uint64_t CResult_NoneNoneZ_clone_ptr(LDKCResult_NoneNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone_ptr")] public static extern long CResultNoneNoneZClonePtr(long _arg);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_clone(const struct LDKCResult_NoneNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone")] public static extern long CResultNoneNoneZClone(long _orig);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_ok")] public static extern long CResultPublicKeyNoneZOk(long _o);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_err")] public static extern long CResultPublicKeyNoneZErr();
	// bool CResult_PublicKeyNoneZ_is_ok(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_is_ok")] public static extern bool CResultPublicKeyNoneZIsOk(long _o);
	// void CResult_PublicKeyNoneZ_free(struct LDKCResult_PublicKeyNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_free")] public static extern void CResultPublicKeyNoneZFree(long __res);
	// uint64_t CResult_PublicKeyNoneZ_clone_ptr(LDKCResult_PublicKeyNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone_ptr")] public static extern long CResultPublicKeyNoneZClonePtr(long _arg);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_clone(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone")] public static extern long CResultPublicKeyNoneZClone(long _orig);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_some(struct LDKBigEndianScalar o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_some")] public static extern long COptionBigEndianScalarZSome(long _o);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_none")] public static extern long COptionBigEndianScalarZNone();
	// void COption_BigEndianScalarZ_free(struct LDKCOption_BigEndianScalarZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_free")] public static extern void COptionBigEndianScalarZFree(long __res);
	// uint64_t COption_BigEndianScalarZ_clone_ptr(LDKCOption_BigEndianScalarZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_clone_ptr")] public static extern long COptionBigEndianScalarZClonePtr(long _arg);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_clone(const struct LDKCOption_BigEndianScalarZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_clone")] public static extern long COptionBigEndianScalarZClone(long _orig);
	// void CVec_U5Z_free(struct LDKCVec_U5Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_U5Z_free")] public static extern void CVecU5ZFree(long __res);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_ok(struct LDKRecoverableSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_ok")] public static extern long CResultRecoverableSignatureNoneZOk(long _o);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_err")] public static extern long CResultRecoverableSignatureNoneZErr();
	// bool CResult_RecoverableSignatureNoneZ_is_ok(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_is_ok")] public static extern bool CResultRecoverableSignatureNoneZIsOk(long _o);
	// void CResult_RecoverableSignatureNoneZ_free(struct LDKCResult_RecoverableSignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_free")] public static extern void CResultRecoverableSignatureNoneZFree(long __res);
	// uint64_t CResult_RecoverableSignatureNoneZ_clone_ptr(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone_ptr")] public static extern long CResultRecoverableSignatureNoneZClonePtr(long _arg);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_clone(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone")] public static extern long CResultRecoverableSignatureNoneZClone(long _orig);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_ok(struct LDKSchnorrSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_ok")] public static extern long CResultSchnorrSignatureNoneZOk(long _o);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_err")] public static extern long CResultSchnorrSignatureNoneZErr();
	// bool CResult_SchnorrSignatureNoneZ_is_ok(const struct LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_is_ok")] public static extern bool CResultSchnorrSignatureNoneZIsOk(long _o);
	// void CResult_SchnorrSignatureNoneZ_free(struct LDKCResult_SchnorrSignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_free")] public static extern void CResultSchnorrSignatureNoneZFree(long __res);
	// uint64_t CResult_SchnorrSignatureNoneZ_clone_ptr(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_clone_ptr")] public static extern long CResultSchnorrSignatureNoneZClonePtr(long _arg);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_clone(const struct LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_clone")] public static extern long CResultSchnorrSignatureNoneZClone(long _orig);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_ok(struct LDKECDSASignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_ok")] public static extern long CResultECDSASignatureNoneZOk(long _o);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_err")] public static extern long CResultECDSASignatureNoneZErr();
	// bool CResult_ECDSASignatureNoneZ_is_ok(const struct LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_is_ok")] public static extern bool CResultECDSASignatureNoneZIsOk(long _o);
	// void CResult_ECDSASignatureNoneZ_free(struct LDKCResult_ECDSASignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_free")] public static extern void CResultECDSASignatureNoneZFree(long __res);
	// uint64_t CResult_ECDSASignatureNoneZ_clone_ptr(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_clone_ptr")] public static extern long CResultECDSASignatureNoneZClonePtr(long _arg);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_clone(const struct LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_clone")] public static extern long CResultECDSASignatureNoneZClone(long _orig);
	// struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ CResult_WriteableEcdsaChannelSignerDecodeErrorZ_ok(struct LDKWriteableEcdsaChannelSigner o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_ok")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZOk(long _o);
	// struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ CResult_WriteableEcdsaChannelSignerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_err")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZErr(long _e);
	// bool CResult_WriteableEcdsaChannelSignerDecodeErrorZ_is_ok(const struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_is_ok")] public static extern bool CResultWriteableEcdsaChannelSignerDecodeErrorZIsOk(long _o);
	// void CResult_WriteableEcdsaChannelSignerDecodeErrorZ_free(struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_free")] public static extern void CResultWriteableEcdsaChannelSignerDecodeErrorZFree(long __res);
	// uint64_t CResult_WriteableEcdsaChannelSignerDecodeErrorZ_clone_ptr(LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_clone_ptr")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ CResult_WriteableEcdsaChannelSignerDecodeErrorZ_clone(const struct LDKCResult_WriteableEcdsaChannelSignerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WriteableEcdsaChannelSignerDecodeErrorZ_clone")] public static extern long CResultWriteableEcdsaChannelSignerDecodeErrorZClone(long _orig);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_ok")] public static extern long CResultCVecU8ZnonezOk(long _o);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_err")] public static extern long CResultCVecU8ZnonezErr();
	// bool CResult_CVec_u8ZNoneZ_is_ok(const struct LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_is_ok")] public static extern bool CResultCVecU8ZnonezIsOk(long _o);
	// void CResult_CVec_u8ZNoneZ_free(struct LDKCResult_CVec_u8ZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_free")] public static extern void CResultCVecU8ZnonezFree(long __res);
	// uint64_t CResult_CVec_u8ZNoneZ_clone_ptr(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_clone_ptr")] public static extern long CResultCVecU8ZnonezClonePtr(long _arg);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_clone(const struct LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_clone")] public static extern long CResultCVecU8ZnonezClone(long _orig);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_ok")] public static extern long CResultShutdownScriptNoneZOk(long _o);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_err")] public static extern long CResultShutdownScriptNoneZErr();
	// bool CResult_ShutdownScriptNoneZ_is_ok(const struct LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_is_ok")] public static extern bool CResultShutdownScriptNoneZIsOk(long _o);
	// void CResult_ShutdownScriptNoneZ_free(struct LDKCResult_ShutdownScriptNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_free")] public static extern void CResultShutdownScriptNoneZFree(long __res);
	// uint64_t CResult_ShutdownScriptNoneZ_clone_ptr(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_clone_ptr")] public static extern long CResultShutdownScriptNoneZClonePtr(long _arg);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_clone(const struct LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_clone")] public static extern long CResultShutdownScriptNoneZClone(long _orig);
	// struct LDKCOption_u16Z COption_u16Z_some(uint16_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_some")] public static extern long COptionU16ZSome(short _o);
	// struct LDKCOption_u16Z COption_u16Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_none")] public static extern long COptionU16ZNone();
	// void COption_u16Z_free(struct LDKCOption_u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_free")] public static extern void COptionU16ZFree(long __res);
	// uint64_t COption_u16Z_clone_ptr(LDKCOption_u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone_ptr")] public static extern long COptionU16ZClonePtr(long _arg);
	// struct LDKCOption_u16Z COption_u16Z_clone(const struct LDKCOption_u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone")] public static extern long COptionU16ZClone(long _orig);
	// struct LDKCOption_boolZ COption_boolZ_some(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_some")] public static extern long COptionBoolzSome(bool _o);
	// struct LDKCOption_boolZ COption_boolZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_none")] public static extern long COptionBoolzNone();
	// void COption_boolZ_free(struct LDKCOption_boolZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_free")] public static extern void COptionBoolzFree(long __res);
	// uint64_t COption_boolZ_clone_ptr(LDKCOption_boolZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_clone_ptr")] public static extern long COptionBoolzClonePtr(long _arg);
	// struct LDKCOption_boolZ COption_boolZ_clone(const struct LDKCOption_boolZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_clone")] public static extern long COptionBoolzClone(long _orig);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_ok(struct LDKWitness o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_ok")] public static extern long CResultWitnessNoneZOk(long _o);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_err")] public static extern long CResultWitnessNoneZErr();
	// bool CResult_WitnessNoneZ_is_ok(const struct LDKCResult_WitnessNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_is_ok")] public static extern bool CResultWitnessNoneZIsOk(long _o);
	// void CResult_WitnessNoneZ_free(struct LDKCResult_WitnessNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_free")] public static extern void CResultWitnessNoneZFree(long __res);
	// uint64_t CResult_WitnessNoneZ_clone_ptr(LDKCResult_WitnessNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_clone_ptr")] public static extern long CResultWitnessNoneZClonePtr(long _arg);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_clone(const struct LDKCResult_WitnessNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_clone")] public static extern long CResultWitnessNoneZClone(long _orig);
	// void CVec_ECDSASignatureZ_free(struct LDKCVec_ECDSASignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ECDSASignatureZ_free")] public static extern void CVecECDSASignatureZFree(long __res);
	// uint64_t C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone_ptr(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone_ptr")] public static extern long C2TupleECDSASignatureCVecECDSASignatureZZClonePtr(long _arg);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone(const struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone")] public static extern long C2TupleECDSASignatureCVecECDSASignatureZZClone(long _orig);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_new(struct LDKECDSASignature a, struct LDKCVec_ECDSASignatureZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_new")] public static extern long C2TupleECDSASignatureCVecECDSASignatureZZNew(long _a, long _b);
	// void C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_free(struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_free")] public static extern void C2TupleECDSASignatureCVecECDSASignatureZZFree(long __res);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_ok(struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_ok")] public static extern long CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZOk(long _o);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_err")] public static extern long CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZErr();
	// bool CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_is_ok(const struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_is_ok")] public static extern bool CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZIsOk(long _o);
	// void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_free(struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_free")] public static extern void CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZFree(long __res);
	// uint64_t CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone_ptr(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone_ptr")] public static extern long CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone(const struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone")] public static extern long CResultC2TupleECDSASignatureCVecECDSASignatureZZNoneZClone(long _orig);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_ok(struct LDKInMemorySigner o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_ok")] public static extern long CResultInMemorySignerDecodeErrorZOk(long _o);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_err")] public static extern long CResultInMemorySignerDecodeErrorZErr(long _e);
	// bool CResult_InMemorySignerDecodeErrorZ_is_ok(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_is_ok")] public static extern bool CResultInMemorySignerDecodeErrorZIsOk(long _o);
	// void CResult_InMemorySignerDecodeErrorZ_free(struct LDKCResult_InMemorySignerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_free")] public static extern void CResultInMemorySignerDecodeErrorZFree(long __res);
	// uint64_t CResult_InMemorySignerDecodeErrorZ_clone_ptr(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone_ptr")] public static extern long CResultInMemorySignerDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_clone(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone")] public static extern long CResultInMemorySignerDecodeErrorZClone(long _orig);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_ok(struct LDKTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_ok")] public static extern long CResultTransactionNoneZOk(long _o);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_err")] public static extern long CResultTransactionNoneZErr();
	// bool CResult_TransactionNoneZ_is_ok(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_is_ok")] public static extern bool CResultTransactionNoneZIsOk(long _o);
	// void CResult_TransactionNoneZ_free(struct LDKCResult_TransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_free")] public static extern void CResultTransactionNoneZFree(long __res);
	// uint64_t CResult_TransactionNoneZ_clone_ptr(LDKCResult_TransactionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone_ptr")] public static extern long CResultTransactionNoneZClonePtr(long _arg);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_clone(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone")] public static extern long CResultTransactionNoneZClone(long _orig);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_some(struct LDKWriteableScore o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_some")] public static extern long COptionWriteableScoreZSome(long _o);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_none")] public static extern long COptionWriteableScoreZNone();
	// void COption_WriteableScoreZ_free(struct LDKCOption_WriteableScoreZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_free")] public static extern void COptionWriteableScoreZFree(long __res);
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_ok")] public static extern long CResultNoneIOErrorZOk();
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_err")] public static extern long CResultNoneIOErrorZErr(IOError _e);
	// bool CResult_NoneIOErrorZ_is_ok(const struct LDKCResult_NoneIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_is_ok")] public static extern bool CResultNoneIOErrorZIsOk(long _o);
	// void CResult_NoneIOErrorZ_free(struct LDKCResult_NoneIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_free")] public static extern void CResultNoneIOErrorZFree(long __res);
	// uint64_t CResult_NoneIOErrorZ_clone_ptr(LDKCResult_NoneIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_clone_ptr")] public static extern long CResultNoneIOErrorZClonePtr(long _arg);
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_clone(const struct LDKCResult_NoneIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_clone")] public static extern long CResultNoneIOErrorZClone(long _orig);
	// void CVec_ChannelDetailsZ_free(struct LDKCVec_ChannelDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelDetailsZ_free")] public static extern void CVecChannelDetailsZFree(long __res);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_ok")] public static extern long CResultRouteLightningErrorZOk(long _o);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_err")] public static extern long CResultRouteLightningErrorZErr(long _e);
	// bool CResult_RouteLightningErrorZ_is_ok(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_is_ok")] public static extern bool CResultRouteLightningErrorZIsOk(long _o);
	// void CResult_RouteLightningErrorZ_free(struct LDKCResult_RouteLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_free")] public static extern void CResultRouteLightningErrorZFree(long __res);
	// uint64_t CResult_RouteLightningErrorZ_clone_ptr(LDKCResult_RouteLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone_ptr")] public static extern long CResultRouteLightningErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_clone(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone")] public static extern long CResultRouteLightningErrorZClone(long _orig);
	// uint64_t C2Tuple_BlindedPayInfoBlindedPathZ_clone_ptr(LDKC2Tuple_BlindedPayInfoBlindedPathZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_clone_ptr")] public static extern long C2TupleBlindedPayInfoBlindedPathZClonePtr(long _arg);
	// struct LDKC2Tuple_BlindedPayInfoBlindedPathZ C2Tuple_BlindedPayInfoBlindedPathZ_clone(const struct LDKC2Tuple_BlindedPayInfoBlindedPathZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_clone")] public static extern long C2TupleBlindedPayInfoBlindedPathZClone(long _orig);
	// struct LDKC2Tuple_BlindedPayInfoBlindedPathZ C2Tuple_BlindedPayInfoBlindedPathZ_new(struct LDKBlindedPayInfo a, struct LDKBlindedPath b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_new")] public static extern long C2TupleBlindedPayInfoBlindedPathZNew(long _a, long _b);
	// void C2Tuple_BlindedPayInfoBlindedPathZ_free(struct LDKC2Tuple_BlindedPayInfoBlindedPathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BlindedPayInfoBlindedPathZ_free")] public static extern void C2TupleBlindedPayInfoBlindedPathZFree(long __res);
	// void CVec_C2Tuple_BlindedPayInfoBlindedPathZZ_free(struct LDKCVec_C2Tuple_BlindedPayInfoBlindedPathZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_BlindedPayInfoBlindedPathZZ_free")] public static extern void CVecC2TupleBlindedPayInfoBlindedPathZZFree(long __res);
	// struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_ok(struct LDKCVec_C2Tuple_BlindedPayInfoBlindedPathZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_ok")] public static extern long CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZOk(long _o);
	// struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_err")] public static extern long CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZErr();
	// bool CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_is_ok(const struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_is_ok")] public static extern bool CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZIsOk(long _o);
	// void CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_free(struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_free")] public static extern void CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZFree(long __res);
	// uint64_t CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_clone_ptr(LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_clone_ptr")] public static extern long CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZClonePtr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_clone(const struct LDKCResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_BlindedPayInfoBlindedPathZZNoneZ_clone")] public static extern long CResultCVecC2TupleBlindedPayInfoBlindedPathZZNoneZClone(long _orig);
	// void CVec_PublicKeyZ_free(struct LDKCVec_PublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PublicKeyZ_free")] public static extern void CVecPublicKeyZFree(long __res);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_ok(struct LDKOnionMessagePath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_ok")] public static extern long CResultOnionMessagePathNoneZOk(long _o);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_err")] public static extern long CResultOnionMessagePathNoneZErr();
	// bool CResult_OnionMessagePathNoneZ_is_ok(const struct LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_is_ok")] public static extern bool CResultOnionMessagePathNoneZIsOk(long _o);
	// void CResult_OnionMessagePathNoneZ_free(struct LDKCResult_OnionMessagePathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_free")] public static extern void CResultOnionMessagePathNoneZFree(long __res);
	// uint64_t CResult_OnionMessagePathNoneZ_clone_ptr(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_clone_ptr")] public static extern long CResultOnionMessagePathNoneZClonePtr(long _arg);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_clone(const struct LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_clone")] public static extern long CResultOnionMessagePathNoneZClone(long _orig);
	// struct LDKCResult_CVec_BlindedPathZNoneZ CResult_CVec_BlindedPathZNoneZ_ok(struct LDKCVec_BlindedPathZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_ok")] public static extern long CResultCVecBlindedPathZNoneZOk(long _o);
	// struct LDKCResult_CVec_BlindedPathZNoneZ CResult_CVec_BlindedPathZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_err")] public static extern long CResultCVecBlindedPathZNoneZErr();
	// bool CResult_CVec_BlindedPathZNoneZ_is_ok(const struct LDKCResult_CVec_BlindedPathZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_is_ok")] public static extern bool CResultCVecBlindedPathZNoneZIsOk(long _o);
	// void CResult_CVec_BlindedPathZNoneZ_free(struct LDKCResult_CVec_BlindedPathZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_free")] public static extern void CResultCVecBlindedPathZNoneZFree(long __res);
	// uint64_t CResult_CVec_BlindedPathZNoneZ_clone_ptr(LDKCResult_CVec_BlindedPathZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_clone_ptr")] public static extern long CResultCVecBlindedPathZNoneZClonePtr(long _arg);
	// struct LDKCResult_CVec_BlindedPathZNoneZ CResult_CVec_BlindedPathZNoneZ_clone(const struct LDKCResult_CVec_BlindedPathZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPathZNoneZ_clone")] public static extern long CResultCVecBlindedPathZNoneZClone(long _orig);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_ok(struct LDKInFlightHtlcs o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_ok")] public static extern long CResultInFlightHtlcsDecodeErrorZOk(long _o);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_err")] public static extern long CResultInFlightHtlcsDecodeErrorZErr(long _e);
	// bool CResult_InFlightHtlcsDecodeErrorZ_is_ok(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_is_ok")] public static extern bool CResultInFlightHtlcsDecodeErrorZIsOk(long _o);
	// void CResult_InFlightHtlcsDecodeErrorZ_free(struct LDKCResult_InFlightHtlcsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_free")] public static extern void CResultInFlightHtlcsDecodeErrorZFree(long __res);
	// uint64_t CResult_InFlightHtlcsDecodeErrorZ_clone_ptr(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone_ptr")] public static extern long CResultInFlightHtlcsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_clone(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone")] public static extern long CResultInFlightHtlcsDecodeErrorZClone(long _orig);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_ok(struct LDKRouteHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_ok")] public static extern long CResultRouteHopDecodeErrorZOk(long _o);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_err")] public static extern long CResultRouteHopDecodeErrorZErr(long _e);
	// bool CResult_RouteHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_is_ok")] public static extern bool CResultRouteHopDecodeErrorZIsOk(long _o);
	// void CResult_RouteHopDecodeErrorZ_free(struct LDKCResult_RouteHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_free")] public static extern void CResultRouteHopDecodeErrorZFree(long __res);
	// uint64_t CResult_RouteHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone_ptr")] public static extern long CResultRouteHopDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_clone(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone")] public static extern long CResultRouteHopDecodeErrorZClone(long _orig);
	// void CVec_BlindedHopZ_free(struct LDKCVec_BlindedHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BlindedHopZ_free")] public static extern void CVecBlindedHopZFree(long __res);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_ok(struct LDKBlindedTail o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_ok")] public static extern long CResultBlindedTailDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_err")] public static extern long CResultBlindedTailDecodeErrorZErr(long _e);
	// bool CResult_BlindedTailDecodeErrorZ_is_ok(const struct LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_is_ok")] public static extern bool CResultBlindedTailDecodeErrorZIsOk(long _o);
	// void CResult_BlindedTailDecodeErrorZ_free(struct LDKCResult_BlindedTailDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_free")] public static extern void CResultBlindedTailDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedTailDecodeErrorZ_clone_ptr(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedTailDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_clone(const struct LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_clone")] public static extern long CResultBlindedTailDecodeErrorZClone(long _orig);
	// void CVec_RouteHopZ_free(struct LDKCVec_RouteHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHopZ_free")] public static extern void CVecRouteHopZFree(long __res);
	// void CVec_PathZ_free(struct LDKCVec_PathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PathZ_free")] public static extern void CVecPathZFree(long __res);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_ok")] public static extern long CResultRouteDecodeErrorZOk(long _o);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_err")] public static extern long CResultRouteDecodeErrorZErr(long _e);
	// bool CResult_RouteDecodeErrorZ_is_ok(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_is_ok")] public static extern bool CResultRouteDecodeErrorZIsOk(long _o);
	// void CResult_RouteDecodeErrorZ_free(struct LDKCResult_RouteDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_free")] public static extern void CResultRouteDecodeErrorZFree(long __res);
	// uint64_t CResult_RouteDecodeErrorZ_clone_ptr(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone_ptr")] public static extern long CResultRouteDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_clone(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone")] public static extern long CResultRouteDecodeErrorZClone(long _orig);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_ok(struct LDKRouteParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_ok")] public static extern long CResultRouteParametersDecodeErrorZOk(long _o);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_err")] public static extern long CResultRouteParametersDecodeErrorZErr(long _e);
	// bool CResult_RouteParametersDecodeErrorZ_is_ok(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_is_ok")] public static extern bool CResultRouteParametersDecodeErrorZIsOk(long _o);
	// void CResult_RouteParametersDecodeErrorZ_free(struct LDKCResult_RouteParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_free")] public static extern void CResultRouteParametersDecodeErrorZFree(long __res);
	// uint64_t CResult_RouteParametersDecodeErrorZ_clone_ptr(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone_ptr")] public static extern long CResultRouteParametersDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_clone(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone")] public static extern long CResultRouteParametersDecodeErrorZClone(long _orig);
	// void CVec_u64Z_free(struct LDKCVec_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u64Z_free")] public static extern void CVecU64ZFree(long __res);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_ok(struct LDKPaymentParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_ok")] public static extern long CResultPaymentParametersDecodeErrorZOk(long _o);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_err")] public static extern long CResultPaymentParametersDecodeErrorZErr(long _e);
	// bool CResult_PaymentParametersDecodeErrorZ_is_ok(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_is_ok")] public static extern bool CResultPaymentParametersDecodeErrorZIsOk(long _o);
	// void CResult_PaymentParametersDecodeErrorZ_free(struct LDKCResult_PaymentParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_free")] public static extern void CResultPaymentParametersDecodeErrorZFree(long __res);
	// uint64_t CResult_PaymentParametersDecodeErrorZ_clone_ptr(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone_ptr")] public static extern long CResultPaymentParametersDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_clone(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone")] public static extern long CResultPaymentParametersDecodeErrorZClone(long _orig);
	// void CVec_RouteHintZ_free(struct LDKCVec_RouteHintZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintZ_free")] public static extern void CVecRouteHintZFree(long __res);
	// void CVec_RouteHintHopZ_free(struct LDKCVec_RouteHintHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintHopZ_free")] public static extern void CVecRouteHintHopZFree(long __res);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_ok(struct LDKRouteHint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_ok")] public static extern long CResultRouteHintDecodeErrorZOk(long _o);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_err")] public static extern long CResultRouteHintDecodeErrorZErr(long _e);
	// bool CResult_RouteHintDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_is_ok")] public static extern bool CResultRouteHintDecodeErrorZIsOk(long _o);
	// void CResult_RouteHintDecodeErrorZ_free(struct LDKCResult_RouteHintDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_free")] public static extern void CResultRouteHintDecodeErrorZFree(long __res);
	// uint64_t CResult_RouteHintDecodeErrorZ_clone_ptr(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone_ptr")] public static extern long CResultRouteHintDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_clone(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone")] public static extern long CResultRouteHintDecodeErrorZClone(long _orig);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_ok(struct LDKRouteHintHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_ok")] public static extern long CResultRouteHintHopDecodeErrorZOk(long _o);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_err")] public static extern long CResultRouteHintHopDecodeErrorZErr(long _e);
	// bool CResult_RouteHintHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_is_ok")] public static extern bool CResultRouteHintHopDecodeErrorZIsOk(long _o);
	// void CResult_RouteHintHopDecodeErrorZ_free(struct LDKCResult_RouteHintHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_free")] public static extern void CResultRouteHintHopDecodeErrorZFree(long __res);
	// uint64_t CResult_RouteHintHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone_ptr")] public static extern long CResultRouteHintHopDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_clone(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone")] public static extern long CResultRouteHintHopDecodeErrorZClone(long _orig);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_ok(struct LDKFixedPenaltyScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_ok")] public static extern long CResultFixedPenaltyScorerDecodeErrorZOk(long _o);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_err")] public static extern long CResultFixedPenaltyScorerDecodeErrorZErr(long _e);
	// bool CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_is_ok")] public static extern bool CResultFixedPenaltyScorerDecodeErrorZIsOk(long _o);
	// void CResult_FixedPenaltyScorerDecodeErrorZ_free(struct LDKCResult_FixedPenaltyScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_free")] public static extern void CResultFixedPenaltyScorerDecodeErrorZFree(long __res);
	// uint64_t CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr")] public static extern long CResultFixedPenaltyScorerDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_clone(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone")] public static extern long CResultFixedPenaltyScorerDecodeErrorZClone(long _orig);
	// void CVec_NodeIdZ_free(struct LDKCVec_NodeIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_NodeIdZ_free")] public static extern void CVecNodeIdZFree(long __res);
	// uint64_t C2Tuple_u64u64Z_clone_ptr(LDKC2Tuple_u64u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone_ptr")] public static extern long C2TupleU64U64ZClonePtr(long _arg);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_clone(const struct LDKC2Tuple_u64u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone")] public static extern long C2TupleU64U64ZClone(long _orig);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_new(uint64_t a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_new")] public static extern long C2TupleU64U64ZNew(long _a, long _b);
	// void C2Tuple_u64u64Z_free(struct LDKC2Tuple_u64u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_free")] public static extern void C2TupleU64U64ZFree(long __res);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_some(struct LDKC2Tuple_u64u64Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_some")] public static extern long COptionC2TupleU64U64ZzSome(long _o);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_none")] public static extern long COptionC2TupleU64U64ZzNone();
	// void COption_C2Tuple_u64u64ZZ_free(struct LDKCOption_C2Tuple_u64u64ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_free")] public static extern void COptionC2TupleU64U64ZzFree(long __res);
	// uint64_t COption_C2Tuple_u64u64ZZ_clone_ptr(LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone_ptr")] public static extern long COptionC2TupleU64U64ZzClonePtr(long _arg);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_clone(const struct LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone")] public static extern long COptionC2TupleU64U64ZzClone(long _orig);
	// struct LDKC2Tuple_Z C2Tuple_Z_new(struct LDKThirtyTwoU16s a, struct LDKThirtyTwoU16s b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_new")] public static extern long C2TupleZNew(long _a, long _b);
	// void C2Tuple_Z_free(struct LDKC2Tuple_Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_free")] public static extern void C2TupleZFree(long __res);
	// struct LDKC2Tuple__u1632_u1632Z C2Tuple__u1632_u1632Z_new(struct LDKThirtyTwoU16s a, struct LDKThirtyTwoU16s b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_new")] public static extern long C2TupleU1632U1632ZNew(long _a, long _b);
	// void C2Tuple__u1632_u1632Z_free(struct LDKC2Tuple__u1632_u1632Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_free")] public static extern void C2TupleU1632U1632ZFree(long __res);
	// struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_some(struct LDKC2Tuple__u1632_u1632Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_some")] public static extern long COptionC2TupleThirtyTwoU16sThirtyTwoU16sZZSome(long _o);
	// struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_none")] public static extern long COptionC2TupleThirtyTwoU16sThirtyTwoU16sZZNone();
	// void COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_free(struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_free")] public static extern void COptionC2TupleThirtyTwoU16sThirtyTwoU16sZZFree(long __res);
	// struct LDKCOption_f64Z COption_f64Z_some(double o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_some")] public static extern long COptionF64ZSome(double _o);
	// struct LDKCOption_f64Z COption_f64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_none")] public static extern long COptionF64ZNone();
	// void COption_f64Z_free(struct LDKCOption_f64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_free")] public static extern void COptionF64ZFree(long __res);
	// uint64_t COption_f64Z_clone_ptr(LDKCOption_f64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_clone_ptr")] public static extern long COptionF64ZClonePtr(long _arg);
	// struct LDKCOption_f64Z COption_f64Z_clone(const struct LDKCOption_f64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_clone")] public static extern long COptionF64ZClone(long _orig);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_ok(struct LDKProbabilisticScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_ok")] public static extern long CResultProbabilisticScorerDecodeErrorZOk(long _o);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_err")] public static extern long CResultProbabilisticScorerDecodeErrorZErr(long _e);
	// bool CResult_ProbabilisticScorerDecodeErrorZ_is_ok(const struct LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_is_ok")] public static extern bool CResultProbabilisticScorerDecodeErrorZIsOk(long _o);
	// void CResult_ProbabilisticScorerDecodeErrorZ_free(struct LDKCResult_ProbabilisticScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_free")] public static extern void CResultProbabilisticScorerDecodeErrorZFree(long __res);
	// uint64_t C2Tuple_usizeTransactionZ_clone_ptr(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone_ptr")] public static extern long C2TupleUsizetransactionzClonePtr(long _arg);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_clone(const struct LDKC2Tuple_usizeTransactionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone")] public static extern long C2TupleUsizetransactionzClone(long _orig);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_new(uintptr_t a, struct LDKTransaction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_new")] public static extern long C2TupleUsizetransactionzNew(long _a, long _b);
	// void C2Tuple_usizeTransactionZ_free(struct LDKC2Tuple_usizeTransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_free")] public static extern void C2TupleUsizetransactionzFree(long __res);
	// void CVec_C2Tuple_usizeTransactionZZ_free(struct LDKCVec_C2Tuple_usizeTransactionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_usizeTransactionZZ_free")] public static extern void CVecC2TupleUsizetransactionzzFree(long __res);
	// uint64_t C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone_ptr(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone_ptr")] public static extern long C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZClonePtr(long _arg);
	// struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone(const struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone")] public static extern long C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZClone(long _orig);
	// struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_new(struct LDKThirtyTwoBytes a, uint32_t b, struct LDKCOption_ThirtyTwoBytesZ c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_new")] public static extern long C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZNew(long _a, int _b, long _c);
	// void C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_free(struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_free")] public static extern void C3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZFree(long __res);
	// void CVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ_free(struct LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ_free")] public static extern void CVecC3TupleThirtyTwoBytesu32COptionThirtyTwoBytesZZZFree(long __res);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_ok(enum LDKChannelMonitorUpdateStatus o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_ok")] public static extern long CResultChannelMonitorUpdateStatusNoneZOk(ChannelMonitorUpdateStatus _o);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_err")] public static extern long CResultChannelMonitorUpdateStatusNoneZErr();
	// bool CResult_ChannelMonitorUpdateStatusNoneZ_is_ok(const struct LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_is_ok")] public static extern bool CResultChannelMonitorUpdateStatusNoneZIsOk(long _o);
	// void CResult_ChannelMonitorUpdateStatusNoneZ_free(struct LDKCResult_ChannelMonitorUpdateStatusNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_free")] public static extern void CResultChannelMonitorUpdateStatusNoneZFree(long __res);
	// uint64_t CResult_ChannelMonitorUpdateStatusNoneZ_clone_ptr(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_clone_ptr")] public static extern long CResultChannelMonitorUpdateStatusNoneZClonePtr(long _arg);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_clone(const struct LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_clone")] public static extern long CResultChannelMonitorUpdateStatusNoneZClone(long _orig);
	// void CVec_MonitorEventZ_free(struct LDKCVec_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MonitorEventZ_free")] public static extern void CVecMonitorEventZFree(long __res);
	// uint64_t C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone_ptr(LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone_ptr")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZClonePtr(long _arg);
	// struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone(const struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_clone")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZClone(long _orig);
	// struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_new(struct LDKOutPoint a, struct LDKCVec_MonitorEventZ b, struct LDKPublicKey c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_new")] public static extern long C3TupleOutPointCVecMonitorEventZPublicKeyZNew(long _a, long _b, long _c);
	// void C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_free(struct LDKC3Tuple_OutPointCVec_MonitorEventZPublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZ_free")] public static extern void C3TupleOutPointCVecMonitorEventZPublicKeyZFree(long __res);
	// void CVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_free(struct LDKCVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_OutPointCVec_MonitorEventZPublicKeyZZ_free")] public static extern void CVecC3TupleOutPointCVecMonitorEventZPublicKeyZZFree(long __res);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_ok(struct LDKInitFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_ok")] public static extern long CResultInitFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_err")] public static extern long CResultInitFeaturesDecodeErrorZErr(long _e);
	// bool CResult_InitFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultInitFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_InitFeaturesDecodeErrorZ_free(struct LDKCResult_InitFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_free")] public static extern void CResultInitFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_InitFeaturesDecodeErrorZ_clone_ptr(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultInitFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_clone(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone")] public static extern long CResultInitFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_ok(struct LDKChannelFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_ok")] public static extern long CResultChannelFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_err")] public static extern long CResultChannelFeaturesDecodeErrorZErr(long _e);
	// bool CResult_ChannelFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultChannelFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_ChannelFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_free")] public static extern void CResultChannelFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultChannelFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone")] public static extern long CResultChannelFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_ok(struct LDKNodeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_ok")] public static extern long CResultNodeFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_err")] public static extern long CResultNodeFeaturesDecodeErrorZErr(long _e);
	// bool CResult_NodeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultNodeFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_NodeFeaturesDecodeErrorZ_free(struct LDKCResult_NodeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_free")] public static extern void CResultNodeFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultNodeFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_clone(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone")] public static extern long CResultNodeFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_ok(struct LDKBolt11InvoiceFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_ok")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_err")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZErr(long _e);
	// bool CResult_Bolt11InvoiceFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultBolt11InvoiceFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_Bolt11InvoiceFeaturesDecodeErrorZ_free(struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_free")] public static extern void CResultBolt11InvoiceFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone(const struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone")] public static extern long CResultBolt11InvoiceFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_ok(struct LDKBolt12InvoiceFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_ok")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_err")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZErr(long _e);
	// bool CResult_Bolt12InvoiceFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultBolt12InvoiceFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_Bolt12InvoiceFeaturesDecodeErrorZ_free(struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_free")] public static extern void CResultBolt12InvoiceFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone_ptr(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone(const struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone")] public static extern long CResultBolt12InvoiceFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_ok(struct LDKBlindedHopFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_ok")] public static extern long CResultBlindedHopFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_err")] public static extern long CResultBlindedHopFeaturesDecodeErrorZErr(long _e);
	// bool CResult_BlindedHopFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultBlindedHopFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_BlindedHopFeaturesDecodeErrorZ_free(struct LDKCResult_BlindedHopFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_free")] public static extern void CResultBlindedHopFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedHopFeaturesDecodeErrorZ_clone_ptr(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedHopFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_clone(const struct LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_clone")] public static extern long CResultBlindedHopFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_ok(struct LDKChannelTypeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_ok")] public static extern long CResultChannelTypeFeaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_err")] public static extern long CResultChannelTypeFeaturesDecodeErrorZErr(long _e);
	// bool CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResultChannelTypeFeaturesDecodeErrorZIsOk(long _o);
	// void CResult_ChannelTypeFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_free")] public static extern void CResultChannelTypeFeaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResultChannelTypeFeaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone")] public static extern long CResultChannelTypeFeaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_ok(struct LDKOffer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_ok")] public static extern long CResultOfferBolt12ParseErrorZOk(long _o);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_err(struct LDKBolt12ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_err")] public static extern long CResultOfferBolt12ParseErrorZErr(long _e);
	// bool CResult_OfferBolt12ParseErrorZ_is_ok(const struct LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_is_ok")] public static extern bool CResultOfferBolt12ParseErrorZIsOk(long _o);
	// void CResult_OfferBolt12ParseErrorZ_free(struct LDKCResult_OfferBolt12ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_free")] public static extern void CResultOfferBolt12ParseErrorZFree(long __res);
	// uint64_t CResult_OfferBolt12ParseErrorZ_clone_ptr(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_clone_ptr")] public static extern long CResultOfferBolt12ParseErrorZClonePtr(long _arg);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_clone(const struct LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_clone")] public static extern long CResultOfferBolt12ParseErrorZClone(long _orig);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_ok")] public static extern long CResultPublicKeySecp256k1ErrorZOk(long _o);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_err")] public static extern long CResultPublicKeySecp256k1ErrorZErr(Secp256k1Error _e);
	// bool CResult_PublicKeySecp256k1ErrorZ_is_ok(const struct LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_is_ok")] public static extern bool CResultPublicKeySecp256k1ErrorZIsOk(long _o);
	// void CResult_PublicKeySecp256k1ErrorZ_free(struct LDKCResult_PublicKeySecp256k1ErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_free")] public static extern void CResultPublicKeySecp256k1ErrorZFree(long __res);
	// uint64_t CResult_PublicKeySecp256k1ErrorZ_clone_ptr(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_clone_ptr")] public static extern long CResultPublicKeySecp256k1ErrorZClonePtr(long _arg);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_clone(const struct LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_clone")] public static extern long CResultPublicKeySecp256k1ErrorZClone(long _orig);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_ok(struct LDKNodeId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_ok")] public static extern long CResultNodeIdDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_err")] public static extern long CResultNodeIdDecodeErrorZErr(long _e);
	// bool CResult_NodeIdDecodeErrorZ_is_ok(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_is_ok")] public static extern bool CResultNodeIdDecodeErrorZIsOk(long _o);
	// void CResult_NodeIdDecodeErrorZ_free(struct LDKCResult_NodeIdDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_free")] public static extern void CResultNodeIdDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeIdDecodeErrorZ_clone_ptr(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone_ptr")] public static extern long CResultNodeIdDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_clone(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone")] public static extern long CResultNodeIdDecodeErrorZClone(long _orig);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_some(struct LDKNetworkUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_some")] public static extern long COptionNetworkUpdateZSome(long _o);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_none")] public static extern long COptionNetworkUpdateZNone();
	// void COption_NetworkUpdateZ_free(struct LDKCOption_NetworkUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_free")] public static extern void COptionNetworkUpdateZFree(long __res);
	// uint64_t COption_NetworkUpdateZ_clone_ptr(LDKCOption_NetworkUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone_ptr")] public static extern long COptionNetworkUpdateZClonePtr(long _arg);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_clone(const struct LDKCOption_NetworkUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone")] public static extern long COptionNetworkUpdateZClone(long _orig);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_ok(struct LDKCOption_NetworkUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_ok")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_err")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZErr(long _e);
	// bool CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionNetworkUpdateZDecodeErrorZIsOk(long _o);
	// void CResult_COption_NetworkUpdateZDecodeErrorZ_free(struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_free")] public static extern void CResultCOptionNetworkUpdateZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_clone(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone")] public static extern long CResultCOptionNetworkUpdateZDecodeErrorZClone(long _orig);
	// struct LDKCOption_UtxoLookupZ COption_UtxoLookupZ_some(struct LDKUtxoLookup o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_some")] public static extern long COptionUtxoLookupZSome(long _o);
	// struct LDKCOption_UtxoLookupZ COption_UtxoLookupZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_none")] public static extern long COptionUtxoLookupZNone();
	// void COption_UtxoLookupZ_free(struct LDKCOption_UtxoLookupZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_free")] public static extern void COptionUtxoLookupZFree(long __res);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_ok")] public static extern long CResultNoneLightningErrorZOk();
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_err")] public static extern long CResultNoneLightningErrorZErr(long _e);
	// bool CResult_NoneLightningErrorZ_is_ok(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_is_ok")] public static extern bool CResultNoneLightningErrorZIsOk(long _o);
	// void CResult_NoneLightningErrorZ_free(struct LDKCResult_NoneLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_free")] public static extern void CResultNoneLightningErrorZFree(long __res);
	// uint64_t CResult_NoneLightningErrorZ_clone_ptr(LDKCResult_NoneLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone_ptr")] public static extern long CResultNoneLightningErrorZClonePtr(long _arg);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_clone(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone")] public static extern long CResultNoneLightningErrorZClone(long _orig);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_ok")] public static extern long CResultBoollightningerrorzOk(bool _o);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_err")] public static extern long CResultBoollightningerrorzErr(long _e);
	// bool CResult_boolLightningErrorZ_is_ok(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_is_ok")] public static extern bool CResultBoollightningerrorzIsOk(long _o);
	// void CResult_boolLightningErrorZ_free(struct LDKCResult_boolLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_free")] public static extern void CResultBoollightningerrorzFree(long __res);
	// uint64_t CResult_boolLightningErrorZ_clone_ptr(LDKCResult_boolLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone_ptr")] public static extern long CResultBoollightningerrorzClonePtr(long _arg);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_clone(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone")] public static extern long CResultBoollightningerrorzClone(long _orig);
	// uint64_t C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZClonePtr(long _arg);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(const struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZClone(long _orig);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(struct LDKChannelAnnouncement a, struct LDKChannelUpdate b, struct LDKChannelUpdate c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new")] public static extern long C3TupleChannelAnnouncementChannelUpdateChannelUpdateZNew(long _a, long _b, long _c);
	// void C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free")] public static extern void C3TupleChannelAnnouncementChannelUpdateChannelUpdateZFree(long __res);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some")] public static extern long COptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZSome(long _o);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none")] public static extern long COptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZNone();
	// void COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free")] public static extern void COptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZFree(long __res);
	// uint64_t COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr(LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr")] public static extern long COptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZClonePtr(long _arg);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(const struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone")] public static extern long COptionC3TupleChannelAnnouncementChannelUpdateChannelUpdateZZClone(long _orig);
	// void CVec_MessageSendEventZ_free(struct LDKCVec_MessageSendEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MessageSendEventZ_free")] public static extern void CVecMessageSendEventZFree(long __res);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_ok(struct LDKChannelUpdateInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_ok")] public static extern long CResultChannelUpdateInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_err")] public static extern long CResultChannelUpdateInfoDecodeErrorZErr(long _e);
	// bool CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_is_ok")] public static extern bool CResultChannelUpdateInfoDecodeErrorZIsOk(long _o);
	// void CResult_ChannelUpdateInfoDecodeErrorZ_free(struct LDKCResult_ChannelUpdateInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_free")] public static extern void CResultChannelUpdateInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr")] public static extern long CResultChannelUpdateInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone")] public static extern long CResultChannelUpdateInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_ok(struct LDKChannelInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_ok")] public static extern long CResultChannelInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_err")] public static extern long CResultChannelInfoDecodeErrorZErr(long _e);
	// bool CResult_ChannelInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_is_ok")] public static extern bool CResultChannelInfoDecodeErrorZIsOk(long _o);
	// void CResult_ChannelInfoDecodeErrorZ_free(struct LDKCResult_ChannelInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_free")] public static extern void CResultChannelInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone_ptr")] public static extern long CResultChannelInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone")] public static extern long CResultChannelInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_ok(struct LDKRoutingFees o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_ok")] public static extern long CResultRoutingFeesDecodeErrorZOk(long _o);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_err")] public static extern long CResultRoutingFeesDecodeErrorZErr(long _e);
	// bool CResult_RoutingFeesDecodeErrorZ_is_ok(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_is_ok")] public static extern bool CResultRoutingFeesDecodeErrorZIsOk(long _o);
	// void CResult_RoutingFeesDecodeErrorZ_free(struct LDKCResult_RoutingFeesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_free")] public static extern void CResultRoutingFeesDecodeErrorZFree(long __res);
	// uint64_t CResult_RoutingFeesDecodeErrorZ_clone_ptr(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone_ptr")] public static extern long CResultRoutingFeesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_clone(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone")] public static extern long CResultRoutingFeesDecodeErrorZClone(long _orig);
	// void CVec_SocketAddressZ_free(struct LDKCVec_SocketAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SocketAddressZ_free")] public static extern void CVecSocketAddressZFree(long __res);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_ok(struct LDKNodeAnnouncementInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_ok")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_err")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZErr(long _e);
	// bool CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok")] public static extern bool CResultNodeAnnouncementInfoDecodeErrorZIsOk(long _o);
	// void CResult_NodeAnnouncementInfoDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_free")] public static extern void CResultNodeAnnouncementInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone")] public static extern long CResultNodeAnnouncementInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_ok(struct LDKNodeAlias o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_ok")] public static extern long CResultNodeAliasDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_err")] public static extern long CResultNodeAliasDecodeErrorZErr(long _e);
	// bool CResult_NodeAliasDecodeErrorZ_is_ok(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_is_ok")] public static extern bool CResultNodeAliasDecodeErrorZIsOk(long _o);
	// void CResult_NodeAliasDecodeErrorZ_free(struct LDKCResult_NodeAliasDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_free")] public static extern void CResultNodeAliasDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeAliasDecodeErrorZ_clone_ptr(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone_ptr")] public static extern long CResultNodeAliasDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_clone(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone")] public static extern long CResultNodeAliasDecodeErrorZClone(long _orig);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_ok(struct LDKNodeInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_ok")] public static extern long CResultNodeInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_err")] public static extern long CResultNodeInfoDecodeErrorZErr(long _e);
	// bool CResult_NodeInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_is_ok")] public static extern bool CResultNodeInfoDecodeErrorZIsOk(long _o);
	// void CResult_NodeInfoDecodeErrorZ_free(struct LDKCResult_NodeInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_free")] public static extern void CResultNodeInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone_ptr")] public static extern long CResultNodeInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_clone(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone")] public static extern long CResultNodeInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_ok(struct LDKNetworkGraph o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_ok")] public static extern long CResultNetworkGraphDecodeErrorZOk(long _o);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_err")] public static extern long CResultNetworkGraphDecodeErrorZErr(long _e);
	// bool CResult_NetworkGraphDecodeErrorZ_is_ok(const struct LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_is_ok")] public static extern bool CResultNetworkGraphDecodeErrorZIsOk(long _o);
	// void CResult_NetworkGraphDecodeErrorZ_free(struct LDKCResult_NetworkGraphDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_free")] public static extern void CResultNetworkGraphDecodeErrorZFree(long __res);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_some(struct LDKCVec_SocketAddressZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_some")] public static extern long COptionCVecSocketAddressZZSome(long _o);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_none")] public static extern long COptionCVecSocketAddressZZNone();
	// void COption_CVec_SocketAddressZZ_free(struct LDKCOption_CVec_SocketAddressZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_free")] public static extern void COptionCVecSocketAddressZZFree(long __res);
	// uint64_t COption_CVec_SocketAddressZZ_clone_ptr(LDKCOption_CVec_SocketAddressZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_clone_ptr")] public static extern long COptionCVecSocketAddressZZClonePtr(long _arg);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_clone(const struct LDKCOption_CVec_SocketAddressZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_clone")] public static extern long COptionCVecSocketAddressZZClone(long _orig);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ CResult_PendingHTLCInfoInboundHTLCErrZ_ok(struct LDKPendingHTLCInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_ok")] public static extern long CResultPendingHTLCInfoInboundHTLCErrZOk(long _o);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ CResult_PendingHTLCInfoInboundHTLCErrZ_err(struct LDKInboundHTLCErr e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_err")] public static extern long CResultPendingHTLCInfoInboundHTLCErrZErr(long _e);
	// bool CResult_PendingHTLCInfoInboundHTLCErrZ_is_ok(const struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_is_ok")] public static extern bool CResultPendingHTLCInfoInboundHTLCErrZIsOk(long _o);
	// void CResult_PendingHTLCInfoInboundHTLCErrZ_free(struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_free")] public static extern void CResultPendingHTLCInfoInboundHTLCErrZFree(long __res);
	// void CVec_HTLCOutputInCommitmentZ_free(struct LDKCVec_HTLCOutputInCommitmentZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_HTLCOutputInCommitmentZ_free")] public static extern void CVecHTLCOutputInCommitmentZFree(long __res);
	// void CVec_HTLCDescriptorZ_free(struct LDKCVec_HTLCDescriptorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_HTLCDescriptorZ_free")] public static extern void CVecHTLCDescriptorZFree(long __res);
	// void CVec_UtxoZ_free(struct LDKCVec_UtxoZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UtxoZ_free")] public static extern void CVecUtxoZFree(long __res);
	// struct LDKCOption_TxOutZ COption_TxOutZ_some(struct LDKTxOut o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_some")] public static extern long COptionTxOutZSome(long _o);
	// struct LDKCOption_TxOutZ COption_TxOutZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_none")] public static extern long COptionTxOutZNone();
	// void COption_TxOutZ_free(struct LDKCOption_TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_free")] public static extern void COptionTxOutZFree(long __res);
	// uint64_t COption_TxOutZ_clone_ptr(LDKCOption_TxOutZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_clone_ptr")] public static extern long COptionTxOutZClonePtr(long _arg);
	// struct LDKCOption_TxOutZ COption_TxOutZ_clone(const struct LDKCOption_TxOutZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_clone")] public static extern long COptionTxOutZClone(long _orig);
	// void CVec_InputZ_free(struct LDKCVec_InputZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_InputZ_free")] public static extern void CVecInputZFree(long __res);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_ok(struct LDKCoinSelection o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_ok")] public static extern long CResultCoinSelectionNoneZOk(long _o);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_err")] public static extern long CResultCoinSelectionNoneZErr();
	// bool CResult_CoinSelectionNoneZ_is_ok(const struct LDKCResult_CoinSelectionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_is_ok")] public static extern bool CResultCoinSelectionNoneZIsOk(long _o);
	// void CResult_CoinSelectionNoneZ_free(struct LDKCResult_CoinSelectionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_free")] public static extern void CResultCoinSelectionNoneZFree(long __res);
	// uint64_t CResult_CoinSelectionNoneZ_clone_ptr(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_clone_ptr")] public static extern long CResultCoinSelectionNoneZClonePtr(long _arg);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_clone(const struct LDKCResult_CoinSelectionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_clone")] public static extern long CResultCoinSelectionNoneZClone(long _orig);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_ok(struct LDKCVec_UtxoZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_ok")] public static extern long CResultCVecUtxoZNoneZOk(long _o);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_err")] public static extern long CResultCVecUtxoZNoneZErr();
	// bool CResult_CVec_UtxoZNoneZ_is_ok(const struct LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_is_ok")] public static extern bool CResultCVecUtxoZNoneZIsOk(long _o);
	// void CResult_CVec_UtxoZNoneZ_free(struct LDKCResult_CVec_UtxoZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_free")] public static extern void CResultCVecUtxoZNoneZFree(long __res);
	// uint64_t CResult_CVec_UtxoZNoneZ_clone_ptr(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_clone_ptr")] public static extern long CResultCVecUtxoZNoneZClonePtr(long _arg);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_clone(const struct LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_clone")] public static extern long CResultCVecUtxoZNoneZClone(long _orig);
	// uint64_t C2Tuple_u64u16Z_clone_ptr(LDKC2Tuple_u64u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_clone_ptr")] public static extern long C2TupleU64U16ZClonePtr(long _arg);
	// struct LDKC2Tuple_u64u16Z C2Tuple_u64u16Z_clone(const struct LDKC2Tuple_u64u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_clone")] public static extern long C2TupleU64U16ZClone(long _orig);
	// struct LDKC2Tuple_u64u16Z C2Tuple_u64u16Z_new(uint64_t a, uint16_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_new")] public static extern long C2TupleU64U16ZNew(long _a, short _b);
	// void C2Tuple_u64u16Z_free(struct LDKC2Tuple_u64u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_free")] public static extern void C2TupleU64U16ZFree(long __res);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_some(struct LDKC2Tuple_u64u16Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_some")] public static extern long COptionC2TupleU64U16ZzSome(long _o);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_none")] public static extern long COptionC2TupleU64U16ZzNone();
	// void COption_C2Tuple_u64u16ZZ_free(struct LDKCOption_C2Tuple_u64u16ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_free")] public static extern void COptionC2TupleU64U16ZzFree(long __res);
	// uint64_t COption_C2Tuple_u64u16ZZ_clone_ptr(LDKCOption_C2Tuple_u64u16ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_clone_ptr")] public static extern long COptionC2TupleU64U16ZzClonePtr(long _arg);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_clone(const struct LDKCOption_C2Tuple_u64u16ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_clone")] public static extern long COptionC2TupleU64U16ZzClone(long _orig);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_some(enum LDKChannelShutdownState o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_some")] public static extern long COptionChannelShutdownStateZSome(ChannelShutdownState _o);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_none")] public static extern long COptionChannelShutdownStateZNone();
	// void COption_ChannelShutdownStateZ_free(struct LDKCOption_ChannelShutdownStateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_free")] public static extern void COptionChannelShutdownStateZFree(long __res);
	// uint64_t COption_ChannelShutdownStateZ_clone_ptr(LDKCOption_ChannelShutdownStateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_clone_ptr")] public static extern long COptionChannelShutdownStateZClonePtr(long _arg);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_clone(const struct LDKCOption_ChannelShutdownStateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_clone")] public static extern long COptionChannelShutdownStateZClone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_ok")] public static extern long CResultThirtyTwoBytesAPIErrorZOk(long _o);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_err")] public static extern long CResultThirtyTwoBytesAPIErrorZErr(long _e);
	// bool CResult_ThirtyTwoBytesAPIErrorZ_is_ok(const struct LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_is_ok")] public static extern bool CResultThirtyTwoBytesAPIErrorZIsOk(long _o);
	// void CResult_ThirtyTwoBytesAPIErrorZ_free(struct LDKCResult_ThirtyTwoBytesAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_free")] public static extern void CResultThirtyTwoBytesAPIErrorZFree(long __res);
	// uint64_t CResult_ThirtyTwoBytesAPIErrorZ_clone_ptr(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_clone_ptr")] public static extern long CResultThirtyTwoBytesAPIErrorZClonePtr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_clone(const struct LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_clone")] public static extern long CResultThirtyTwoBytesAPIErrorZClone(long _orig);
	// void CVec_RecentPaymentDetailsZ_free(struct LDKCVec_RecentPaymentDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RecentPaymentDetailsZ_free")] public static extern void CVecRecentPaymentDetailsZFree(long __res);
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_ok")] public static extern long CResultNonePaymentSendFailureZOk();
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_err")] public static extern long CResultNonePaymentSendFailureZErr(long _e);
	// bool CResult_NonePaymentSendFailureZ_is_ok(const struct LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_is_ok")] public static extern bool CResultNonePaymentSendFailureZIsOk(long _o);
	// void CResult_NonePaymentSendFailureZ_free(struct LDKCResult_NonePaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_free")] public static extern void CResultNonePaymentSendFailureZFree(long __res);
	// uint64_t CResult_NonePaymentSendFailureZ_clone_ptr(LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_clone_ptr")] public static extern long CResultNonePaymentSendFailureZClonePtr(long _arg);
	// struct LDKCResult_NonePaymentSendFailureZ CResult_NonePaymentSendFailureZ_clone(const struct LDKCResult_NonePaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePaymentSendFailureZ_clone")] public static extern long CResultNonePaymentSendFailureZClone(long _orig);
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_ok")] public static extern long CResultNoneRetryableSendFailureZOk();
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_err(enum LDKRetryableSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_err")] public static extern long CResultNoneRetryableSendFailureZErr(RetryableSendFailure _e);
	// bool CResult_NoneRetryableSendFailureZ_is_ok(const struct LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_is_ok")] public static extern bool CResultNoneRetryableSendFailureZIsOk(long _o);
	// void CResult_NoneRetryableSendFailureZ_free(struct LDKCResult_NoneRetryableSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_free")] public static extern void CResultNoneRetryableSendFailureZFree(long __res);
	// uint64_t CResult_NoneRetryableSendFailureZ_clone_ptr(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_clone_ptr")] public static extern long CResultNoneRetryableSendFailureZClonePtr(long _arg);
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_clone(const struct LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_clone")] public static extern long CResultNoneRetryableSendFailureZClone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ CResult_ThirtyTwoBytesPaymentSendFailureZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_ok")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZOk(long _o);
	// struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ CResult_ThirtyTwoBytesPaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_err")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZErr(long _e);
	// bool CResult_ThirtyTwoBytesPaymentSendFailureZ_is_ok(const struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_is_ok")] public static extern bool CResultThirtyTwoBytesPaymentSendFailureZIsOk(long _o);
	// void CResult_ThirtyTwoBytesPaymentSendFailureZ_free(struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_free")] public static extern void CResultThirtyTwoBytesPaymentSendFailureZFree(long __res);
	// uint64_t CResult_ThirtyTwoBytesPaymentSendFailureZ_clone_ptr(LDKCResult_ThirtyTwoBytesPaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_clone_ptr")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZClonePtr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ CResult_ThirtyTwoBytesPaymentSendFailureZ_clone(const struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesPaymentSendFailureZ_clone")] public static extern long CResultThirtyTwoBytesPaymentSendFailureZClone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_ok")] public static extern long CResultThirtyTwoBytesRetryableSendFailureZOk(long _o);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_err(enum LDKRetryableSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_err")] public static extern long CResultThirtyTwoBytesRetryableSendFailureZErr(RetryableSendFailure _e);
	// bool CResult_ThirtyTwoBytesRetryableSendFailureZ_is_ok(const struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_is_ok")] public static extern bool CResultThirtyTwoBytesRetryableSendFailureZIsOk(long _o);
	// void CResult_ThirtyTwoBytesRetryableSendFailureZ_free(struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_free")] public static extern void CResultThirtyTwoBytesRetryableSendFailureZFree(long __res);
	// uint64_t CResult_ThirtyTwoBytesRetryableSendFailureZ_clone_ptr(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_clone_ptr")] public static extern long CResultThirtyTwoBytesRetryableSendFailureZClonePtr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_clone(const struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_clone")] public static extern long CResultThirtyTwoBytesRetryableSendFailureZClone(long _orig);
	// uint64_t C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone_ptr")] public static extern long C2TupleThirtyTwoBytesThirtyTwoBytesZClonePtr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone")] public static extern long C2TupleThirtyTwoBytesThirtyTwoBytesZClone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_new(struct LDKThirtyTwoBytes a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_new")] public static extern long C2TupleThirtyTwoBytesThirtyTwoBytesZNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_free(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_free")] public static extern void C2TupleThirtyTwoBytesThirtyTwoBytesZFree(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_ok(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_ok")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZOk(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_err(struct LDKPaymentSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_err")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZErr(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_is_ok")] public static extern bool CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZIsOk(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_free")] public static extern void CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZFree(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_clone_ptr")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ_clone")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZClone(long _orig);
	// void CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ_free")] public static extern void CVecC2TupleThirtyTwoBytesThirtyTwoBytesZZFree(long __res);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_ok(struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_ok")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZOk(long _o);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_err(struct LDKProbeSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_err")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZErr(long _e);
	// bool CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_is_ok(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_is_ok")] public static extern bool CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZIsOk(long _o);
	// void CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_free(struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_free")] public static extern void CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZFree(long __res);
	// uint64_t CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone_ptr(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone_ptr")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZClonePtr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone")] public static extern long CResultCVecC2TupleThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZClone(long _orig);
	// uint64_t C2Tuple_ThirtyTwoBytesPublicKeyZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesPublicKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_clone_ptr")] public static extern long C2TupleThirtyTwoBytesPublicKeyZClonePtr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesPublicKeyZ C2Tuple_ThirtyTwoBytesPublicKeyZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesPublicKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_clone")] public static extern long C2TupleThirtyTwoBytesPublicKeyZClone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesPublicKeyZ C2Tuple_ThirtyTwoBytesPublicKeyZ_new(struct LDKThirtyTwoBytes a, struct LDKPublicKey b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_new")] public static extern long C2TupleThirtyTwoBytesPublicKeyZNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesPublicKeyZ_free(struct LDKC2Tuple_ThirtyTwoBytesPublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesPublicKeyZ_free")] public static extern void C2TupleThirtyTwoBytesPublicKeyZFree(long __res);
	// void CVec_C2Tuple_ThirtyTwoBytesPublicKeyZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesPublicKeyZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesPublicKeyZZ_free")] public static extern void CVecC2TupleThirtyTwoBytesPublicKeyZZFree(long __res);
	// struct LDKCOption_StrZ COption_StrZ_some(struct LDKStr o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_some")] public static extern long COptionStrZSome(long _o);
	// struct LDKCOption_StrZ COption_StrZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_none")] public static extern long COptionStrZNone();
	// void COption_StrZ_free(struct LDKCOption_StrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_free")] public static extern void COptionStrZFree(long __res);
	// uint64_t COption_StrZ_clone_ptr(LDKCOption_StrZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_clone_ptr")] public static extern long COptionStrZClonePtr(long _arg);
	// struct LDKCOption_StrZ COption_StrZ_clone(const struct LDKCOption_StrZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_clone")] public static extern long COptionStrZClone(long _orig);
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_ok")] public static extern long CResultNoneBolt12SemanticErrorZOk();
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_err")] public static extern long CResultNoneBolt12SemanticErrorZErr(Bolt12SemanticError _e);
	// bool CResult_NoneBolt12SemanticErrorZ_is_ok(const struct LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_is_ok")] public static extern bool CResultNoneBolt12SemanticErrorZIsOk(long _o);
	// void CResult_NoneBolt12SemanticErrorZ_free(struct LDKCResult_NoneBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_free")] public static extern void CResultNoneBolt12SemanticErrorZFree(long __res);
	// uint64_t CResult_NoneBolt12SemanticErrorZ_clone_ptr(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_clone_ptr")] public static extern long CResultNoneBolt12SemanticErrorZClonePtr(long _arg);
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_clone(const struct LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_clone")] public static extern long CResultNoneBolt12SemanticErrorZClone(long _orig);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_ok(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_ok")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZOk(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_err")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZErr();
	// bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_is_ok")] public static extern bool CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZIsOk(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_free")] public static extern void CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZFree(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone_ptr")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone")] public static extern long CResultC2TupleThirtyTwoBytesThirtyTwoBytesZNoneZClone(long _orig);
	// struct LDKCOption_OffersMessageZ COption_OffersMessageZ_some(struct LDKOffersMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersMessageZ_some")] public static extern long COptionOffersMessageZSome(long _o);
	// struct LDKCOption_OffersMessageZ COption_OffersMessageZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersMessageZ_none")] public static extern long COptionOffersMessageZNone();
	// void COption_OffersMessageZ_free(struct LDKCOption_OffersMessageZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersMessageZ_free")] public static extern void COptionOffersMessageZFree(long __res);
	// uint64_t COption_OffersMessageZ_clone_ptr(LDKCOption_OffersMessageZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersMessageZ_clone_ptr")] public static extern long COptionOffersMessageZClonePtr(long _arg);
	// struct LDKCOption_OffersMessageZ COption_OffersMessageZ_clone(const struct LDKCOption_OffersMessageZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersMessageZ_clone")] public static extern long COptionOffersMessageZClone(long _orig);
	// uint64_t C3Tuple_OffersMessageDestinationBlindedPathZ_clone_ptr(LDKC3Tuple_OffersMessageDestinationBlindedPathZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_clone_ptr")] public static extern long C3TupleOffersMessageDestinationBlindedPathZClonePtr(long _arg);
	// struct LDKC3Tuple_OffersMessageDestinationBlindedPathZ C3Tuple_OffersMessageDestinationBlindedPathZ_clone(const struct LDKC3Tuple_OffersMessageDestinationBlindedPathZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_clone")] public static extern long C3TupleOffersMessageDestinationBlindedPathZClone(long _orig);
	// struct LDKC3Tuple_OffersMessageDestinationBlindedPathZ C3Tuple_OffersMessageDestinationBlindedPathZ_new(struct LDKOffersMessage a, struct LDKDestination b, struct LDKBlindedPath c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_new")] public static extern long C3TupleOffersMessageDestinationBlindedPathZNew(long _a, long _b, long _c);
	// void C3Tuple_OffersMessageDestinationBlindedPathZ_free(struct LDKC3Tuple_OffersMessageDestinationBlindedPathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OffersMessageDestinationBlindedPathZ_free")] public static extern void C3TupleOffersMessageDestinationBlindedPathZFree(long __res);
	// void CVec_C3Tuple_OffersMessageDestinationBlindedPathZZ_free(struct LDKCVec_C3Tuple_OffersMessageDestinationBlindedPathZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_OffersMessageDestinationBlindedPathZZ_free")] public static extern void CVecC3TupleOffersMessageDestinationBlindedPathZZFree(long __res);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(struct LDKCounterpartyForwardingInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_ok")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_err")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZErr(long _e);
	// bool CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok")] public static extern bool CResultCounterpartyForwardingInfoDecodeErrorZIsOk(long _o);
	// void CResult_CounterpartyForwardingInfoDecodeErrorZ_free(struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_free")] public static extern void CResultCounterpartyForwardingInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone")] public static extern long CResultCounterpartyForwardingInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_ok(struct LDKChannelCounterparty o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_ok")] public static extern long CResultChannelCounterpartyDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_err")] public static extern long CResultChannelCounterpartyDecodeErrorZErr(long _e);
	// bool CResult_ChannelCounterpartyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_is_ok")] public static extern bool CResultChannelCounterpartyDecodeErrorZIsOk(long _o);
	// void CResult_ChannelCounterpartyDecodeErrorZ_free(struct LDKCResult_ChannelCounterpartyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_free")] public static extern void CResultChannelCounterpartyDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr")] public static extern long CResultChannelCounterpartyDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_clone(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone")] public static extern long CResultChannelCounterpartyDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_ok(struct LDKChannelDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_ok")] public static extern long CResultChannelDetailsDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_err")] public static extern long CResultChannelDetailsDecodeErrorZErr(long _e);
	// bool CResult_ChannelDetailsDecodeErrorZ_is_ok(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_is_ok")] public static extern bool CResultChannelDetailsDecodeErrorZIsOk(long _o);
	// void CResult_ChannelDetailsDecodeErrorZ_free(struct LDKCResult_ChannelDetailsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_free")] public static extern void CResultChannelDetailsDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelDetailsDecodeErrorZ_clone_ptr(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone_ptr")] public static extern long CResultChannelDetailsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_clone(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone")] public static extern long CResultChannelDetailsDecodeErrorZClone(long _orig);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_ok(struct LDKPhantomRouteHints o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_ok")] public static extern long CResultPhantomRouteHintsDecodeErrorZOk(long _o);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_err")] public static extern long CResultPhantomRouteHintsDecodeErrorZErr(long _e);
	// bool CResult_PhantomRouteHintsDecodeErrorZ_is_ok(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_is_ok")] public static extern bool CResultPhantomRouteHintsDecodeErrorZIsOk(long _o);
	// void CResult_PhantomRouteHintsDecodeErrorZ_free(struct LDKCResult_PhantomRouteHintsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_free")] public static extern void CResultPhantomRouteHintsDecodeErrorZFree(long __res);
	// uint64_t CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr")] public static extern long CResultPhantomRouteHintsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_clone(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone")] public static extern long CResultPhantomRouteHintsDecodeErrorZClone(long _orig);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_ok(struct LDKBlindedForward o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_ok")] public static extern long CResultBlindedForwardDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_err")] public static extern long CResultBlindedForwardDecodeErrorZErr(long _e);
	// bool CResult_BlindedForwardDecodeErrorZ_is_ok(const struct LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_is_ok")] public static extern bool CResultBlindedForwardDecodeErrorZIsOk(long _o);
	// void CResult_BlindedForwardDecodeErrorZ_free(struct LDKCResult_BlindedForwardDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_free")] public static extern void CResultBlindedForwardDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedForwardDecodeErrorZ_clone_ptr(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedForwardDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_clone(const struct LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_clone")] public static extern long CResultBlindedForwardDecodeErrorZClone(long _orig);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_ok(struct LDKPendingHTLCRouting o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_ok")] public static extern long CResultPendingHTLCRoutingDecodeErrorZOk(long _o);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_err")] public static extern long CResultPendingHTLCRoutingDecodeErrorZErr(long _e);
	// bool CResult_PendingHTLCRoutingDecodeErrorZ_is_ok(const struct LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_is_ok")] public static extern bool CResultPendingHTLCRoutingDecodeErrorZIsOk(long _o);
	// void CResult_PendingHTLCRoutingDecodeErrorZ_free(struct LDKCResult_PendingHTLCRoutingDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_free")] public static extern void CResultPendingHTLCRoutingDecodeErrorZFree(long __res);
	// uint64_t CResult_PendingHTLCRoutingDecodeErrorZ_clone_ptr(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_clone_ptr")] public static extern long CResultPendingHTLCRoutingDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_clone(const struct LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_clone")] public static extern long CResultPendingHTLCRoutingDecodeErrorZClone(long _orig);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_ok(struct LDKPendingHTLCInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_ok")] public static extern long CResultPendingHTLCInfoDecodeErrorZOk(long _o);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_err")] public static extern long CResultPendingHTLCInfoDecodeErrorZErr(long _e);
	// bool CResult_PendingHTLCInfoDecodeErrorZ_is_ok(const struct LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_is_ok")] public static extern bool CResultPendingHTLCInfoDecodeErrorZIsOk(long _o);
	// void CResult_PendingHTLCInfoDecodeErrorZ_free(struct LDKCResult_PendingHTLCInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_free")] public static extern void CResultPendingHTLCInfoDecodeErrorZFree(long __res);
	// uint64_t CResult_PendingHTLCInfoDecodeErrorZ_clone_ptr(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_clone_ptr")] public static extern long CResultPendingHTLCInfoDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_clone(const struct LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_clone")] public static extern long CResultPendingHTLCInfoDecodeErrorZClone(long _orig);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_ok(enum LDKBlindedFailure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_ok")] public static extern long CResultBlindedFailureDecodeErrorZOk(BlindedFailure _o);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_err")] public static extern long CResultBlindedFailureDecodeErrorZErr(long _e);
	// bool CResult_BlindedFailureDecodeErrorZ_is_ok(const struct LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_is_ok")] public static extern bool CResultBlindedFailureDecodeErrorZIsOk(long _o);
	// void CResult_BlindedFailureDecodeErrorZ_free(struct LDKCResult_BlindedFailureDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_free")] public static extern void CResultBlindedFailureDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedFailureDecodeErrorZ_clone_ptr(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedFailureDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_clone(const struct LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_clone")] public static extern long CResultBlindedFailureDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_ok(enum LDKChannelShutdownState o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_ok")] public static extern long CResultChannelShutdownStateDecodeErrorZOk(ChannelShutdownState _o);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_err")] public static extern long CResultChannelShutdownStateDecodeErrorZErr(long _e);
	// bool CResult_ChannelShutdownStateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_is_ok")] public static extern bool CResultChannelShutdownStateDecodeErrorZIsOk(long _o);
	// void CResult_ChannelShutdownStateDecodeErrorZ_free(struct LDKCResult_ChannelShutdownStateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_free")] public static extern void CResultChannelShutdownStateDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelShutdownStateDecodeErrorZ_clone_ptr(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_clone_ptr")] public static extern long CResultChannelShutdownStateDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_clone(const struct LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_clone")] public static extern long CResultChannelShutdownStateDecodeErrorZClone(long _orig);
	// void CVec_ChannelMonitorZ_free(struct LDKCVec_ChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelMonitorZ_free")] public static extern void CVecChannelMonitorZFree(long __res);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ C2Tuple_ThirtyTwoBytesChannelManagerZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelManager b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_new")] public static extern long C2TupleThirtyTwoBytesChannelManagerZNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesChannelManagerZ_free(struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_free")] public static extern void C2TupleThirtyTwoBytesChannelManagerZFree(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZOk(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_err")] public static extern long CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZErr(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_is_ok")] public static extern bool CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZIsOk(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_free")] public static extern void CResultC2TupleThirtyTwoBytesChannelManagerZDecodeErrorZFree(long __res);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_ok(struct LDKMaxDustHTLCExposure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_ok")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZOk(long _o);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_err")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZErr(long _e);
	// bool CResult_MaxDustHTLCExposureDecodeErrorZ_is_ok(const struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_is_ok")] public static extern bool CResultMaxDustHTLCExposureDecodeErrorZIsOk(long _o);
	// void CResult_MaxDustHTLCExposureDecodeErrorZ_free(struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_free")] public static extern void CResultMaxDustHTLCExposureDecodeErrorZFree(long __res);
	// uint64_t CResult_MaxDustHTLCExposureDecodeErrorZ_clone_ptr(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_clone_ptr")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_clone(const struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_clone")] public static extern long CResultMaxDustHTLCExposureDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_ok(struct LDKChannelConfig o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_ok")] public static extern long CResultChannelConfigDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_err")] public static extern long CResultChannelConfigDecodeErrorZErr(long _e);
	// bool CResult_ChannelConfigDecodeErrorZ_is_ok(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_is_ok")] public static extern bool CResultChannelConfigDecodeErrorZIsOk(long _o);
	// void CResult_ChannelConfigDecodeErrorZ_free(struct LDKCResult_ChannelConfigDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_free")] public static extern void CResultChannelConfigDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelConfigDecodeErrorZ_clone_ptr(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone_ptr")] public static extern long CResultChannelConfigDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_clone(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone")] public static extern long CResultChannelConfigDecodeErrorZClone(long _orig);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_some(struct LDKMaxDustHTLCExposure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_some")] public static extern long COptionMaxDustHTLCExposureZSome(long _o);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_none")] public static extern long COptionMaxDustHTLCExposureZNone();
	// void COption_MaxDustHTLCExposureZ_free(struct LDKCOption_MaxDustHTLCExposureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_free")] public static extern void COptionMaxDustHTLCExposureZFree(long __res);
	// uint64_t COption_MaxDustHTLCExposureZ_clone_ptr(LDKCOption_MaxDustHTLCExposureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_clone_ptr")] public static extern long COptionMaxDustHTLCExposureZClonePtr(long _arg);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_clone(const struct LDKCOption_MaxDustHTLCExposureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_clone")] public static extern long COptionMaxDustHTLCExposureZClone(long _orig);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_some(struct LDKAPIError o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_some")] public static extern long COptionAPIErrorZSome(long _o);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_none")] public static extern long COptionAPIErrorZNone();
	// void COption_APIErrorZ_free(struct LDKCOption_APIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_free")] public static extern void COptionAPIErrorZFree(long __res);
	// uint64_t COption_APIErrorZ_clone_ptr(LDKCOption_APIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_clone_ptr")] public static extern long COptionAPIErrorZClonePtr(long _arg);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_clone(const struct LDKCOption_APIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_clone")] public static extern long COptionAPIErrorZClone(long _orig);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_ok(struct LDKCOption_APIErrorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_ok")] public static extern long CResultCOptionAPIErrorZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_err")] public static extern long CResultCOptionAPIErrorZDecodeErrorZErr(long _e);
	// bool CResult_COption_APIErrorZDecodeErrorZ_is_ok(const struct LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionAPIErrorZDecodeErrorZIsOk(long _o);
	// void CResult_COption_APIErrorZDecodeErrorZ_free(struct LDKCResult_COption_APIErrorZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_free")] public static extern void CResultCOptionAPIErrorZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_APIErrorZDecodeErrorZ_clone_ptr(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionAPIErrorZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_clone(const struct LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_clone")] public static extern long CResultCOptionAPIErrorZDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_ok(struct LDKChannelMonitorUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_ok")] public static extern long CResultChannelMonitorUpdateDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_err")] public static extern long CResultChannelMonitorUpdateDecodeErrorZErr(long _e);
	// bool CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok")] public static extern bool CResultChannelMonitorUpdateDecodeErrorZIsOk(long _o);
	// void CResult_ChannelMonitorUpdateDecodeErrorZ_free(struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_free")] public static extern void CResultChannelMonitorUpdateDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr")] public static extern long CResultChannelMonitorUpdateDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone")] public static extern long CResultChannelMonitorUpdateDecodeErrorZClone(long _orig);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_some(struct LDKMonitorEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_some")] public static extern long COptionMonitorEventZSome(long _o);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_none")] public static extern long COptionMonitorEventZNone();
	// void COption_MonitorEventZ_free(struct LDKCOption_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_free")] public static extern void COptionMonitorEventZFree(long __res);
	// uint64_t COption_MonitorEventZ_clone_ptr(LDKCOption_MonitorEventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone_ptr")] public static extern long COptionMonitorEventZClonePtr(long _arg);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_clone(const struct LDKCOption_MonitorEventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone")] public static extern long COptionMonitorEventZClone(long _orig);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_ok(struct LDKCOption_MonitorEventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_ok")] public static extern long CResultCOptionMonitorEventZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_err")] public static extern long CResultCOptionMonitorEventZDecodeErrorZErr(long _e);
	// bool CResult_COption_MonitorEventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionMonitorEventZDecodeErrorZIsOk(long _o);
	// void CResult_COption_MonitorEventZDecodeErrorZ_free(struct LDKCResult_COption_MonitorEventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_free")] public static extern void CResultCOptionMonitorEventZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionMonitorEventZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_clone(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone")] public static extern long CResultCOptionMonitorEventZDecodeErrorZClone(long _orig);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_ok(struct LDKHTLCUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_ok")] public static extern long CResultHTLCUpdateDecodeErrorZOk(long _o);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_err")] public static extern long CResultHTLCUpdateDecodeErrorZErr(long _e);
	// bool CResult_HTLCUpdateDecodeErrorZ_is_ok(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_is_ok")] public static extern bool CResultHTLCUpdateDecodeErrorZIsOk(long _o);
	// void CResult_HTLCUpdateDecodeErrorZ_free(struct LDKCResult_HTLCUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_free")] public static extern void CResultHTLCUpdateDecodeErrorZFree(long __res);
	// uint64_t CResult_HTLCUpdateDecodeErrorZ_clone_ptr(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone_ptr")] public static extern long CResultHTLCUpdateDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_clone(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone")] public static extern long CResultHTLCUpdateDecodeErrorZClone(long _orig);
	// uint64_t C2Tuple_OutPointCVec_u8ZZ_clone_ptr(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_clone_ptr")] public static extern long C2TupleOutPointCVecU8ZzClonePtr(long _arg);
	// struct LDKC2Tuple_OutPointCVec_u8ZZ C2Tuple_OutPointCVec_u8ZZ_clone(const struct LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_clone")] public static extern long C2TupleOutPointCVecU8ZzClone(long _orig);
	// struct LDKC2Tuple_OutPointCVec_u8ZZ C2Tuple_OutPointCVec_u8ZZ_new(struct LDKOutPoint a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_new")] public static extern long C2TupleOutPointCVecU8ZzNew(long _a, long _b);
	// void C2Tuple_OutPointCVec_u8ZZ_free(struct LDKC2Tuple_OutPointCVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_free")] public static extern void C2TupleOutPointCVecU8ZzFree(long __res);
	// uint64_t C2Tuple_u32CVec_u8ZZ_clone_ptr(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_clone_ptr")] public static extern long C2TupleU32CvecU8ZzClonePtr(long _arg);
	// struct LDKC2Tuple_u32CVec_u8ZZ C2Tuple_u32CVec_u8ZZ_clone(const struct LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_clone")] public static extern long C2TupleU32CvecU8ZzClone(long _orig);
	// struct LDKC2Tuple_u32CVec_u8ZZ C2Tuple_u32CVec_u8ZZ_new(uint32_t a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_new")] public static extern long C2TupleU32CvecU8ZzNew(int _a, long _b);
	// void C2Tuple_u32CVec_u8ZZ_free(struct LDKC2Tuple_u32CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_free")] public static extern void C2TupleU32CvecU8ZzFree(long __res);
	// void CVec_C2Tuple_u32CVec_u8ZZZ_free(struct LDKCVec_C2Tuple_u32CVec_u8ZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32CVec_u8ZZZ_free")] public static extern void CVecC2TupleU32CvecU8ZzzFree(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone_ptr")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzClonePtr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzClone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32CVec_u8ZZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_new")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_free(struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_free")] public static extern void C2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzFree(long __res);
	// void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ_free")] public static extern void CVecC2TupleThirtyTwoBytesCVecC2TupleU32CvecU8ZzzzzFree(long __res);
	// void CVec_CommitmentTransactionZ_free(struct LDKCVec_CommitmentTransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CommitmentTransactionZ_free")] public static extern void CVecCommitmentTransactionZFree(long __res);
	// void CVec_TransactionZ_free(struct LDKCVec_TransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TransactionZ_free")] public static extern void CVecTransactionZFree(long __res);
	// uint64_t C2Tuple_u32TxOutZ_clone_ptr(LDKC2Tuple_u32TxOutZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone_ptr")] public static extern long C2TupleU32TxoutzClonePtr(long _arg);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_clone(const struct LDKC2Tuple_u32TxOutZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone")] public static extern long C2TupleU32TxoutzClone(long _orig);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_new(uint32_t a, struct LDKTxOut b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_new")] public static extern long C2TupleU32TxoutzNew(int _a, long _b);
	// void C2Tuple_u32TxOutZ_free(struct LDKC2Tuple_u32TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_free")] public static extern void C2TupleU32TxoutzFree(long __res);
	// void CVec_C2Tuple_u32TxOutZZ_free(struct LDKCVec_C2Tuple_u32TxOutZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32TxOutZZ_free")] public static extern void CVecC2TupleU32TxoutzzFree(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone_ptr")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzClonePtr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzClone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32TxOutZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_new")] public static extern long C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_free(struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_free")] public static extern void C2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzFree(long __res);
	// void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ_free")] public static extern void CVecC2TupleThirtyTwoBytesCVecC2TupleU32TxoutzzzzFree(long __res);
	// void CVec_BalanceZ_free(struct LDKCVec_BalanceZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BalanceZ_free")] public static extern void CVecBalanceZFree(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone_ptr")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZClonePtr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZClone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelMonitor b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_new")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZNew(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesChannelMonitorZ_free(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_free")] public static extern void C2TupleThirtyTwoBytesChannelMonitorZFree(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZOk(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_err")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZErr(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_is_ok")] public static extern bool CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZIsOk(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_free")] public static extern void CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZFree(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone_ptr")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZDecodeErrorZClone(long _orig);
	// uint64_t C2Tuple_PublicKeyTypeZ_clone_ptr(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone_ptr")] public static extern long C2TuplePublicKeyTypeZClonePtr(long _arg);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_clone(const struct LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone")] public static extern long C2TuplePublicKeyTypeZClone(long _orig);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_new(struct LDKPublicKey a, struct LDKType b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_new")] public static extern long C2TuplePublicKeyTypeZNew(long _a, long _b);
	// void C2Tuple_PublicKeyTypeZ_free(struct LDKC2Tuple_PublicKeyTypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_free")] public static extern void C2TuplePublicKeyTypeZFree(long __res);
	// void CVec_C2Tuple_PublicKeyTypeZZ_free(struct LDKCVec_C2Tuple_PublicKeyTypeZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_PublicKeyTypeZZ_free")] public static extern void CVecC2TuplePublicKeyTypeZZFree(long __res);
	// uint64_t C2Tuple_PublicKeyCVec_SocketAddressZZ_clone_ptr(LDKC2Tuple_PublicKeyCVec_SocketAddressZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_clone_ptr")] public static extern long C2TuplePublicKeyCVecSocketAddressZZClonePtr(long _arg);
	// struct LDKC2Tuple_PublicKeyCVec_SocketAddressZZ C2Tuple_PublicKeyCVec_SocketAddressZZ_clone(const struct LDKC2Tuple_PublicKeyCVec_SocketAddressZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_clone")] public static extern long C2TuplePublicKeyCVecSocketAddressZZClone(long _orig);
	// struct LDKC2Tuple_PublicKeyCVec_SocketAddressZZ C2Tuple_PublicKeyCVec_SocketAddressZZ_new(struct LDKPublicKey a, struct LDKCVec_SocketAddressZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_new")] public static extern long C2TuplePublicKeyCVecSocketAddressZZNew(long _a, long _b);
	// void C2Tuple_PublicKeyCVec_SocketAddressZZ_free(struct LDKC2Tuple_PublicKeyCVec_SocketAddressZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCVec_SocketAddressZZ_free")] public static extern void C2TuplePublicKeyCVecSocketAddressZZFree(long __res);
	// void CVec_C2Tuple_PublicKeyCVec_SocketAddressZZZ_free(struct LDKCVec_C2Tuple_PublicKeyCVec_SocketAddressZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_PublicKeyCVec_SocketAddressZZZ_free")] public static extern void CVecC2TuplePublicKeyCVecSocketAddressZZZFree(long __res);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_some(struct LDKOnionMessageContents o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_some")] public static extern long COptionOnionMessageContentsZSome(long _o);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_none")] public static extern long COptionOnionMessageContentsZNone();
	// void COption_OnionMessageContentsZ_free(struct LDKCOption_OnionMessageContentsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_free")] public static extern void COptionOnionMessageContentsZFree(long __res);
	// uint64_t COption_OnionMessageContentsZ_clone_ptr(LDKCOption_OnionMessageContentsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_clone_ptr")] public static extern long COptionOnionMessageContentsZClonePtr(long _arg);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_clone(const struct LDKCOption_OnionMessageContentsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_clone")] public static extern long COptionOnionMessageContentsZClone(long _orig);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_ok(struct LDKCOption_OnionMessageContentsZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_ok")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_err")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZErr(long _e);
	// bool CResult_COption_OnionMessageContentsZDecodeErrorZ_is_ok(const struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionOnionMessageContentsZDecodeErrorZIsOk(long _o);
	// void CResult_COption_OnionMessageContentsZDecodeErrorZ_free(struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_free")] public static extern void CResultCOptionOnionMessageContentsZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_OnionMessageContentsZDecodeErrorZ_clone_ptr(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_clone(const struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_clone")] public static extern long CResultCOptionOnionMessageContentsZDecodeErrorZClone(long _orig);
	// uint64_t C3Tuple_OnionMessageContentsDestinationBlindedPathZ_clone_ptr(LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_clone_ptr")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZClonePtr(long _arg);
	// struct LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ C3Tuple_OnionMessageContentsDestinationBlindedPathZ_clone(const struct LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_clone")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZClone(long _orig);
	// struct LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ C3Tuple_OnionMessageContentsDestinationBlindedPathZ_new(struct LDKOnionMessageContents a, struct LDKDestination b, struct LDKBlindedPath c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_new")] public static extern long C3TupleOnionMessageContentsDestinationBlindedPathZNew(long _a, long _b, long _c);
	// void C3Tuple_OnionMessageContentsDestinationBlindedPathZ_free(struct LDKC3Tuple_OnionMessageContentsDestinationBlindedPathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_OnionMessageContentsDestinationBlindedPathZ_free")] public static extern void C3TupleOnionMessageContentsDestinationBlindedPathZFree(long __res);
	// void CVec_C3Tuple_OnionMessageContentsDestinationBlindedPathZZ_free(struct LDKCVec_C3Tuple_OnionMessageContentsDestinationBlindedPathZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_OnionMessageContentsDestinationBlindedPathZZ_free")] public static extern void CVecC3TupleOnionMessageContentsDestinationBlindedPathZZFree(long __res);
	// struct LDKCOption_TypeZ COption_TypeZ_some(struct LDKType o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_some")] public static extern long COptionTypeZSome(long _o);
	// struct LDKCOption_TypeZ COption_TypeZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_none")] public static extern long COptionTypeZNone();
	// void COption_TypeZ_free(struct LDKCOption_TypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_free")] public static extern void COptionTypeZFree(long __res);
	// uint64_t COption_TypeZ_clone_ptr(LDKCOption_TypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone_ptr")] public static extern long COptionTypeZClonePtr(long _arg);
	// struct LDKCOption_TypeZ COption_TypeZ_clone(const struct LDKCOption_TypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone")] public static extern long COptionTypeZClone(long _orig);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_ok(struct LDKCOption_TypeZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_ok")] public static extern long CResultCOptionTypeZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_err")] public static extern long CResultCOptionTypeZDecodeErrorZErr(long _e);
	// bool CResult_COption_TypeZDecodeErrorZ_is_ok(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionTypeZDecodeErrorZIsOk(long _o);
	// void CResult_COption_TypeZDecodeErrorZ_free(struct LDKCResult_COption_TypeZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_free")] public static extern void CResultCOptionTypeZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_TypeZDecodeErrorZ_clone_ptr(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionTypeZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_clone(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone")] public static extern long CResultCOptionTypeZDecodeErrorZClone(long _orig);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_some(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_some")] public static extern long COptionSocketAddressZSome(long _o);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_none")] public static extern long COptionSocketAddressZNone();
	// void COption_SocketAddressZ_free(struct LDKCOption_SocketAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_free")] public static extern void COptionSocketAddressZFree(long __res);
	// uint64_t COption_SocketAddressZ_clone_ptr(LDKCOption_SocketAddressZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_clone_ptr")] public static extern long COptionSocketAddressZClonePtr(long _arg);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_clone(const struct LDKCOption_SocketAddressZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_clone")] public static extern long COptionSocketAddressZClone(long _orig);
	// uint64_t C2Tuple_PublicKeyCOption_SocketAddressZZ_clone_ptr(LDKC2Tuple_PublicKeyCOption_SocketAddressZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_clone_ptr")] public static extern long C2TuplePublicKeyCOptionSocketAddressZZClonePtr(long _arg);
	// struct LDKC2Tuple_PublicKeyCOption_SocketAddressZZ C2Tuple_PublicKeyCOption_SocketAddressZZ_clone(const struct LDKC2Tuple_PublicKeyCOption_SocketAddressZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_clone")] public static extern long C2TuplePublicKeyCOptionSocketAddressZZClone(long _orig);
	// struct LDKC2Tuple_PublicKeyCOption_SocketAddressZZ C2Tuple_PublicKeyCOption_SocketAddressZZ_new(struct LDKPublicKey a, struct LDKCOption_SocketAddressZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_new")] public static extern long C2TuplePublicKeyCOptionSocketAddressZZNew(long _a, long _b);
	// void C2Tuple_PublicKeyCOption_SocketAddressZZ_free(struct LDKC2Tuple_PublicKeyCOption_SocketAddressZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyCOption_SocketAddressZZ_free")] public static extern void C2TuplePublicKeyCOptionSocketAddressZZFree(long __res);
	// void CVec_C2Tuple_PublicKeyCOption_SocketAddressZZZ_free(struct LDKCVec_C2Tuple_PublicKeyCOption_SocketAddressZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_PublicKeyCOption_SocketAddressZZZ_free")] public static extern void CVecC2TuplePublicKeyCOptionSocketAddressZZZFree(long __res);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_ok")] public static extern long CResultCVecU8ZpeerhandleerrorzOk(long _o);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_err")] public static extern long CResultCVecU8ZpeerhandleerrorzErr(long _e);
	// bool CResult_CVec_u8ZPeerHandleErrorZ_is_ok(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_is_ok")] public static extern bool CResultCVecU8ZpeerhandleerrorzIsOk(long _o);
	// void CResult_CVec_u8ZPeerHandleErrorZ_free(struct LDKCResult_CVec_u8ZPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_free")] public static extern void CResultCVecU8ZpeerhandleerrorzFree(long __res);
	// uint64_t CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr")] public static extern long CResultCVecU8ZpeerhandleerrorzClonePtr(long _arg);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_clone(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone")] public static extern long CResultCVecU8ZpeerhandleerrorzClone(long _orig);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_ok")] public static extern long CResultNonePeerHandleErrorZOk();
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_err")] public static extern long CResultNonePeerHandleErrorZErr(long _e);
	// bool CResult_NonePeerHandleErrorZ_is_ok(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_is_ok")] public static extern bool CResultNonePeerHandleErrorZIsOk(long _o);
	// void CResult_NonePeerHandleErrorZ_free(struct LDKCResult_NonePeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_free")] public static extern void CResultNonePeerHandleErrorZFree(long __res);
	// uint64_t CResult_NonePeerHandleErrorZ_clone_ptr(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone_ptr")] public static extern long CResultNonePeerHandleErrorZClonePtr(long _arg);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_clone(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone")] public static extern long CResultNonePeerHandleErrorZClone(long _orig);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_ok")] public static extern long CResultBoolpeerhandleerrorzOk(bool _o);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_err")] public static extern long CResultBoolpeerhandleerrorzErr(long _e);
	// bool CResult_boolPeerHandleErrorZ_is_ok(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_is_ok")] public static extern bool CResultBoolpeerhandleerrorzIsOk(long _o);
	// void CResult_boolPeerHandleErrorZ_free(struct LDKCResult_boolPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_free")] public static extern void CResultBoolpeerhandleerrorzFree(long __res);
	// uint64_t CResult_boolPeerHandleErrorZ_clone_ptr(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone_ptr")] public static extern long CResultBoolpeerhandleerrorzClonePtr(long _arg);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_clone(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone")] public static extern long CResultBoolpeerhandleerrorzClone(long _orig);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_ok(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_ok")] public static extern long CResultU32GraphsyncerrorzOk(int _o);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_err(struct LDKGraphSyncError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_err")] public static extern long CResultU32GraphsyncerrorzErr(long _e);
	// bool CResult_u32GraphSyncErrorZ_is_ok(const struct LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_is_ok")] public static extern bool CResultU32GraphsyncerrorzIsOk(long _o);
	// void CResult_u32GraphSyncErrorZ_free(struct LDKCResult_u32GraphSyncErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_free")] public static extern void CResultU32GraphsyncerrorzFree(long __res);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_ok")] public static extern long CResultCVecU8ZioerrorzOk(long _o);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_err")] public static extern long CResultCVecU8ZioerrorzErr(IOError _e);
	// bool CResult_CVec_u8ZIOErrorZ_is_ok(const struct LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_is_ok")] public static extern bool CResultCVecU8ZioerrorzIsOk(long _o);
	// void CResult_CVec_u8ZIOErrorZ_free(struct LDKCResult_CVec_u8ZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_free")] public static extern void CResultCVecU8ZioerrorzFree(long __res);
	// uint64_t CResult_CVec_u8ZIOErrorZ_clone_ptr(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_clone_ptr")] public static extern long CResultCVecU8ZioerrorzClonePtr(long _arg);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_clone(const struct LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_clone")] public static extern long CResultCVecU8ZioerrorzClone(long _orig);
	// void CVec_StrZ_free(struct LDKCVec_StrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_StrZ_free")] public static extern void CVecStrZFree(long __res);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_ok(struct LDKCVec_StrZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_ok")] public static extern long CResultCVecStrZIOErrorZOk(long _o);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_err")] public static extern long CResultCVecStrZIOErrorZErr(IOError _e);
	// bool CResult_CVec_StrZIOErrorZ_is_ok(const struct LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_is_ok")] public static extern bool CResultCVecStrZIOErrorZIsOk(long _o);
	// void CResult_CVec_StrZIOErrorZ_free(struct LDKCResult_CVec_StrZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_free")] public static extern void CResultCVecStrZIOErrorZFree(long __res);
	// uint64_t CResult_CVec_StrZIOErrorZ_clone_ptr(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_clone_ptr")] public static extern long CResultCVecStrZIOErrorZClonePtr(long _arg);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_clone(const struct LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_clone")] public static extern long CResultCVecStrZIOErrorZClone(long _orig);
	// void CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ_free")] public static extern void CVecC2TupleThirtyTwoBytesChannelMonitorZZFree(long __res);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_ok(struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_ok")] public static extern long CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZOk(long _o);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_err")] public static extern long CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZErr(IOError _e);
	// bool CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_is_ok(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_is_ok")] public static extern bool CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZIsOk(long _o);
	// void CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_free(struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_free")] public static extern void CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZFree(long __res);
	// uint64_t CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone_ptr(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone_ptr")] public static extern long CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZClonePtr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone")] public static extern long CResultCVecC2TupleThirtyTwoBytesChannelMonitorZZIOErrorZClone(long _orig);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_ok")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZOk(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_err")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZErr(IOError _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_is_ok")] public static extern bool CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZIsOk(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_free")] public static extern void CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZFree(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone_ptr")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone")] public static extern long CResultC2TupleThirtyTwoBytesChannelMonitorZIOErrorZClone(long _orig);
	// struct LDKCOption_SecretKeyZ COption_SecretKeyZ_some(struct LDKSecretKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SecretKeyZ_some")] public static extern long COptionSecretKeyZSome(long _o);
	// struct LDKCOption_SecretKeyZ COption_SecretKeyZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SecretKeyZ_none")] public static extern long COptionSecretKeyZNone();
	// void COption_SecretKeyZ_free(struct LDKCOption_SecretKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SecretKeyZ_free")] public static extern void COptionSecretKeyZFree(long __res);
	// uint64_t COption_SecretKeyZ_clone_ptr(LDKCOption_SecretKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SecretKeyZ_clone_ptr")] public static extern long COptionSecretKeyZClonePtr(long _arg);
	// struct LDKCOption_SecretKeyZ COption_SecretKeyZ_clone(const struct LDKCOption_SecretKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SecretKeyZ_clone")] public static extern long COptionSecretKeyZClone(long _orig);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_ok(struct LDKVerifiedInvoiceRequest o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_ok")] public static extern long CResultVerifiedInvoiceRequestNoneZOk(long _o);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_err")] public static extern long CResultVerifiedInvoiceRequestNoneZErr();
	// bool CResult_VerifiedInvoiceRequestNoneZ_is_ok(const struct LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_is_ok")] public static extern bool CResultVerifiedInvoiceRequestNoneZIsOk(long _o);
	// void CResult_VerifiedInvoiceRequestNoneZ_free(struct LDKCResult_VerifiedInvoiceRequestNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_free")] public static extern void CResultVerifiedInvoiceRequestNoneZFree(long __res);
	// uint64_t CResult_VerifiedInvoiceRequestNoneZ_clone_ptr(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_clone_ptr")] public static extern long CResultVerifiedInvoiceRequestNoneZClonePtr(long _arg);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_clone(const struct LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_clone")] public static extern long CResultVerifiedInvoiceRequestNoneZClone(long _orig);
	// enum LDKCOption_NoneZ COption_NoneZ_some(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_some")] public static extern COption_NoneZ COptionNoneZSome();
	// enum LDKCOption_NoneZ COption_NoneZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_none")] public static extern COption_NoneZ COptionNoneZNone();
	// void COption_NoneZ_free(enum LDKCOption_NoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_free")] public static extern void COptionNoneZFree(COption_NoneZ __res);
	// void CVec_WitnessZ_free(struct LDKCVec_WitnessZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_WitnessZ_free")] public static extern void CVecWitnessZFree(long __res);
	// struct LDKCOption_i64Z COption_i64Z_some(int64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_some")] public static extern long COptionI64ZSome(long _o);
	// struct LDKCOption_i64Z COption_i64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_none")] public static extern long COptionI64ZNone();
	// void COption_i64Z_free(struct LDKCOption_i64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_free")] public static extern void COptionI64ZFree(long __res);
	// uint64_t COption_i64Z_clone_ptr(LDKCOption_i64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_clone_ptr")] public static extern long COptionI64ZClonePtr(long _arg);
	// struct LDKCOption_i64Z COption_i64Z_clone(const struct LDKCOption_i64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_clone")] public static extern long COptionI64ZClone(long _orig);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_ok(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_ok")] public static extern long CResultSocketAddressDecodeErrorZOk(long _o);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_err")] public static extern long CResultSocketAddressDecodeErrorZErr(long _e);
	// bool CResult_SocketAddressDecodeErrorZ_is_ok(const struct LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_is_ok")] public static extern bool CResultSocketAddressDecodeErrorZIsOk(long _o);
	// void CResult_SocketAddressDecodeErrorZ_free(struct LDKCResult_SocketAddressDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_free")] public static extern void CResultSocketAddressDecodeErrorZFree(long __res);
	// uint64_t CResult_SocketAddressDecodeErrorZ_clone_ptr(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_clone_ptr")] public static extern long CResultSocketAddressDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_clone(const struct LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_clone")] public static extern long CResultSocketAddressDecodeErrorZClone(long _orig);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_ok(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_ok")] public static extern long CResultSocketAddressSocketAddressParseErrorZOk(long _o);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_err(enum LDKSocketAddressParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_err")] public static extern long CResultSocketAddressSocketAddressParseErrorZErr(SocketAddressParseError _e);
	// bool CResult_SocketAddressSocketAddressParseErrorZ_is_ok(const struct LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_is_ok")] public static extern bool CResultSocketAddressSocketAddressParseErrorZIsOk(long _o);
	// void CResult_SocketAddressSocketAddressParseErrorZ_free(struct LDKCResult_SocketAddressSocketAddressParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_free")] public static extern void CResultSocketAddressSocketAddressParseErrorZFree(long __res);
	// uint64_t CResult_SocketAddressSocketAddressParseErrorZ_clone_ptr(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_clone_ptr")] public static extern long CResultSocketAddressSocketAddressParseErrorZClonePtr(long _arg);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_clone(const struct LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_clone")] public static extern long CResultSocketAddressSocketAddressParseErrorZClone(long _orig);
	// void CVec_UpdateAddHTLCZ_free(struct LDKCVec_UpdateAddHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateAddHTLCZ_free")] public static extern void CVecUpdateAddHTLCZFree(long __res);
	// void CVec_UpdateFulfillHTLCZ_free(struct LDKCVec_UpdateFulfillHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFulfillHTLCZ_free")] public static extern void CVecUpdateFulfillHTLCZFree(long __res);
	// void CVec_UpdateFailHTLCZ_free(struct LDKCVec_UpdateFailHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailHTLCZ_free")] public static extern void CVecUpdateFailHTLCZFree(long __res);
	// void CVec_UpdateFailMalformedHTLCZ_free(struct LDKCVec_UpdateFailMalformedHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailMalformedHTLCZ_free")] public static extern void CVecUpdateFailMalformedHTLCZFree(long __res);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_ok(struct LDKAcceptChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_ok")] public static extern long CResultAcceptChannelDecodeErrorZOk(long _o);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_err")] public static extern long CResultAcceptChannelDecodeErrorZErr(long _e);
	// bool CResult_AcceptChannelDecodeErrorZ_is_ok(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_is_ok")] public static extern bool CResultAcceptChannelDecodeErrorZIsOk(long _o);
	// void CResult_AcceptChannelDecodeErrorZ_free(struct LDKCResult_AcceptChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_free")] public static extern void CResultAcceptChannelDecodeErrorZFree(long __res);
	// uint64_t CResult_AcceptChannelDecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone_ptr")] public static extern long CResultAcceptChannelDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_clone(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone")] public static extern long CResultAcceptChannelDecodeErrorZClone(long _orig);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_ok(struct LDKAcceptChannelV2 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_ok")] public static extern long CResultAcceptChannelV2DecodeErrorZOk(long _o);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_err")] public static extern long CResultAcceptChannelV2DecodeErrorZErr(long _e);
	// bool CResult_AcceptChannelV2DecodeErrorZ_is_ok(const struct LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_is_ok")] public static extern bool CResultAcceptChannelV2DecodeErrorZIsOk(long _o);
	// void CResult_AcceptChannelV2DecodeErrorZ_free(struct LDKCResult_AcceptChannelV2DecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_free")] public static extern void CResultAcceptChannelV2DecodeErrorZFree(long __res);
	// uint64_t CResult_AcceptChannelV2DecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_clone_ptr")] public static extern long CResultAcceptChannelV2DecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_clone(const struct LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_clone")] public static extern long CResultAcceptChannelV2DecodeErrorZClone(long _orig);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_ok(struct LDKStfu o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_ok")] public static extern long CResultStfuDecodeErrorZOk(long _o);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_err")] public static extern long CResultStfuDecodeErrorZErr(long _e);
	// bool CResult_StfuDecodeErrorZ_is_ok(const struct LDKCResult_StfuDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_is_ok")] public static extern bool CResultStfuDecodeErrorZIsOk(long _o);
	// void CResult_StfuDecodeErrorZ_free(struct LDKCResult_StfuDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_free")] public static extern void CResultStfuDecodeErrorZFree(long __res);
	// uint64_t CResult_StfuDecodeErrorZ_clone_ptr(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_clone_ptr")] public static extern long CResultStfuDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_clone(const struct LDKCResult_StfuDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_clone")] public static extern long CResultStfuDecodeErrorZClone(long _orig);
	// struct LDKCResult_SpliceDecodeErrorZ CResult_SpliceDecodeErrorZ_ok(struct LDKSplice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_ok")] public static extern long CResultSpliceDecodeErrorZOk(long _o);
	// struct LDKCResult_SpliceDecodeErrorZ CResult_SpliceDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_err")] public static extern long CResultSpliceDecodeErrorZErr(long _e);
	// bool CResult_SpliceDecodeErrorZ_is_ok(const struct LDKCResult_SpliceDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_is_ok")] public static extern bool CResultSpliceDecodeErrorZIsOk(long _o);
	// void CResult_SpliceDecodeErrorZ_free(struct LDKCResult_SpliceDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_free")] public static extern void CResultSpliceDecodeErrorZFree(long __res);
	// uint64_t CResult_SpliceDecodeErrorZ_clone_ptr(LDKCResult_SpliceDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_clone_ptr")] public static extern long CResultSpliceDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_SpliceDecodeErrorZ CResult_SpliceDecodeErrorZ_clone(const struct LDKCResult_SpliceDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceDecodeErrorZ_clone")] public static extern long CResultSpliceDecodeErrorZClone(long _orig);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_ok(struct LDKSpliceAck o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_ok")] public static extern long CResultSpliceAckDecodeErrorZOk(long _o);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_err")] public static extern long CResultSpliceAckDecodeErrorZErr(long _e);
	// bool CResult_SpliceAckDecodeErrorZ_is_ok(const struct LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_is_ok")] public static extern bool CResultSpliceAckDecodeErrorZIsOk(long _o);
	// void CResult_SpliceAckDecodeErrorZ_free(struct LDKCResult_SpliceAckDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_free")] public static extern void CResultSpliceAckDecodeErrorZFree(long __res);
	// uint64_t CResult_SpliceAckDecodeErrorZ_clone_ptr(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_clone_ptr")] public static extern long CResultSpliceAckDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_clone(const struct LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_clone")] public static extern long CResultSpliceAckDecodeErrorZClone(long _orig);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_ok(struct LDKSpliceLocked o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_ok")] public static extern long CResultSpliceLockedDecodeErrorZOk(long _o);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_err")] public static extern long CResultSpliceLockedDecodeErrorZErr(long _e);
	// bool CResult_SpliceLockedDecodeErrorZ_is_ok(const struct LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_is_ok")] public static extern bool CResultSpliceLockedDecodeErrorZIsOk(long _o);
	// void CResult_SpliceLockedDecodeErrorZ_free(struct LDKCResult_SpliceLockedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_free")] public static extern void CResultSpliceLockedDecodeErrorZFree(long __res);
	// uint64_t CResult_SpliceLockedDecodeErrorZ_clone_ptr(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_clone_ptr")] public static extern long CResultSpliceLockedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_clone(const struct LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_clone")] public static extern long CResultSpliceLockedDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_ok(struct LDKTxAddInput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_ok")] public static extern long CResultTxAddInputDecodeErrorZOk(long _o);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_err")] public static extern long CResultTxAddInputDecodeErrorZErr(long _e);
	// bool CResult_TxAddInputDecodeErrorZ_is_ok(const struct LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_is_ok")] public static extern bool CResultTxAddInputDecodeErrorZIsOk(long _o);
	// void CResult_TxAddInputDecodeErrorZ_free(struct LDKCResult_TxAddInputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_free")] public static extern void CResultTxAddInputDecodeErrorZFree(long __res);
	// uint64_t CResult_TxAddInputDecodeErrorZ_clone_ptr(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_clone_ptr")] public static extern long CResultTxAddInputDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_clone(const struct LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_clone")] public static extern long CResultTxAddInputDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_ok(struct LDKTxAddOutput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_ok")] public static extern long CResultTxAddOutputDecodeErrorZOk(long _o);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_err")] public static extern long CResultTxAddOutputDecodeErrorZErr(long _e);
	// bool CResult_TxAddOutputDecodeErrorZ_is_ok(const struct LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_is_ok")] public static extern bool CResultTxAddOutputDecodeErrorZIsOk(long _o);
	// void CResult_TxAddOutputDecodeErrorZ_free(struct LDKCResult_TxAddOutputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_free")] public static extern void CResultTxAddOutputDecodeErrorZFree(long __res);
	// uint64_t CResult_TxAddOutputDecodeErrorZ_clone_ptr(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_clone_ptr")] public static extern long CResultTxAddOutputDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_clone(const struct LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_clone")] public static extern long CResultTxAddOutputDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_ok(struct LDKTxRemoveInput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_ok")] public static extern long CResultTxRemoveInputDecodeErrorZOk(long _o);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_err")] public static extern long CResultTxRemoveInputDecodeErrorZErr(long _e);
	// bool CResult_TxRemoveInputDecodeErrorZ_is_ok(const struct LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_is_ok")] public static extern bool CResultTxRemoveInputDecodeErrorZIsOk(long _o);
	// void CResult_TxRemoveInputDecodeErrorZ_free(struct LDKCResult_TxRemoveInputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_free")] public static extern void CResultTxRemoveInputDecodeErrorZFree(long __res);
	// uint64_t CResult_TxRemoveInputDecodeErrorZ_clone_ptr(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_clone_ptr")] public static extern long CResultTxRemoveInputDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_clone(const struct LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_clone")] public static extern long CResultTxRemoveInputDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_ok(struct LDKTxRemoveOutput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_ok")] public static extern long CResultTxRemoveOutputDecodeErrorZOk(long _o);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_err")] public static extern long CResultTxRemoveOutputDecodeErrorZErr(long _e);
	// bool CResult_TxRemoveOutputDecodeErrorZ_is_ok(const struct LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_is_ok")] public static extern bool CResultTxRemoveOutputDecodeErrorZIsOk(long _o);
	// void CResult_TxRemoveOutputDecodeErrorZ_free(struct LDKCResult_TxRemoveOutputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_free")] public static extern void CResultTxRemoveOutputDecodeErrorZFree(long __res);
	// uint64_t CResult_TxRemoveOutputDecodeErrorZ_clone_ptr(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_clone_ptr")] public static extern long CResultTxRemoveOutputDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_clone(const struct LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_clone")] public static extern long CResultTxRemoveOutputDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_ok(struct LDKTxComplete o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_ok")] public static extern long CResultTxCompleteDecodeErrorZOk(long _o);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_err")] public static extern long CResultTxCompleteDecodeErrorZErr(long _e);
	// bool CResult_TxCompleteDecodeErrorZ_is_ok(const struct LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_is_ok")] public static extern bool CResultTxCompleteDecodeErrorZIsOk(long _o);
	// void CResult_TxCompleteDecodeErrorZ_free(struct LDKCResult_TxCompleteDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_free")] public static extern void CResultTxCompleteDecodeErrorZFree(long __res);
	// uint64_t CResult_TxCompleteDecodeErrorZ_clone_ptr(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_clone_ptr")] public static extern long CResultTxCompleteDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_clone(const struct LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_clone")] public static extern long CResultTxCompleteDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_ok(struct LDKTxSignatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_ok")] public static extern long CResultTxSignaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_err")] public static extern long CResultTxSignaturesDecodeErrorZErr(long _e);
	// bool CResult_TxSignaturesDecodeErrorZ_is_ok(const struct LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_is_ok")] public static extern bool CResultTxSignaturesDecodeErrorZIsOk(long _o);
	// void CResult_TxSignaturesDecodeErrorZ_free(struct LDKCResult_TxSignaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_free")] public static extern void CResultTxSignaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_TxSignaturesDecodeErrorZ_clone_ptr(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_clone_ptr")] public static extern long CResultTxSignaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_clone(const struct LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_clone")] public static extern long CResultTxSignaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_ok(struct LDKTxInitRbf o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_ok")] public static extern long CResultTxInitRbfDecodeErrorZOk(long _o);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_err")] public static extern long CResultTxInitRbfDecodeErrorZErr(long _e);
	// bool CResult_TxInitRbfDecodeErrorZ_is_ok(const struct LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_is_ok")] public static extern bool CResultTxInitRbfDecodeErrorZIsOk(long _o);
	// void CResult_TxInitRbfDecodeErrorZ_free(struct LDKCResult_TxInitRbfDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_free")] public static extern void CResultTxInitRbfDecodeErrorZFree(long __res);
	// uint64_t CResult_TxInitRbfDecodeErrorZ_clone_ptr(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_clone_ptr")] public static extern long CResultTxInitRbfDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_clone(const struct LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_clone")] public static extern long CResultTxInitRbfDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_ok(struct LDKTxAckRbf o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_ok")] public static extern long CResultTxAckRbfDecodeErrorZOk(long _o);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_err")] public static extern long CResultTxAckRbfDecodeErrorZErr(long _e);
	// bool CResult_TxAckRbfDecodeErrorZ_is_ok(const struct LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_is_ok")] public static extern bool CResultTxAckRbfDecodeErrorZIsOk(long _o);
	// void CResult_TxAckRbfDecodeErrorZ_free(struct LDKCResult_TxAckRbfDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_free")] public static extern void CResultTxAckRbfDecodeErrorZFree(long __res);
	// uint64_t CResult_TxAckRbfDecodeErrorZ_clone_ptr(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_clone_ptr")] public static extern long CResultTxAckRbfDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_clone(const struct LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_clone")] public static extern long CResultTxAckRbfDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_ok(struct LDKTxAbort o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_ok")] public static extern long CResultTxAbortDecodeErrorZOk(long _o);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_err")] public static extern long CResultTxAbortDecodeErrorZErr(long _e);
	// bool CResult_TxAbortDecodeErrorZ_is_ok(const struct LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_is_ok")] public static extern bool CResultTxAbortDecodeErrorZIsOk(long _o);
	// void CResult_TxAbortDecodeErrorZ_free(struct LDKCResult_TxAbortDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_free")] public static extern void CResultTxAbortDecodeErrorZFree(long __res);
	// uint64_t CResult_TxAbortDecodeErrorZ_clone_ptr(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_clone_ptr")] public static extern long CResultTxAbortDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_clone(const struct LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_clone")] public static extern long CResultTxAbortDecodeErrorZClone(long _orig);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_ok(struct LDKAnnouncementSignatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_ok")] public static extern long CResultAnnouncementSignaturesDecodeErrorZOk(long _o);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_err")] public static extern long CResultAnnouncementSignaturesDecodeErrorZErr(long _e);
	// bool CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_is_ok")] public static extern bool CResultAnnouncementSignaturesDecodeErrorZIsOk(long _o);
	// void CResult_AnnouncementSignaturesDecodeErrorZ_free(struct LDKCResult_AnnouncementSignaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_free")] public static extern void CResultAnnouncementSignaturesDecodeErrorZFree(long __res);
	// uint64_t CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr")] public static extern long CResultAnnouncementSignaturesDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_clone(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone")] public static extern long CResultAnnouncementSignaturesDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_ok(struct LDKChannelReestablish o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_ok")] public static extern long CResultChannelReestablishDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_err")] public static extern long CResultChannelReestablishDecodeErrorZErr(long _e);
	// bool CResult_ChannelReestablishDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_is_ok")] public static extern bool CResultChannelReestablishDecodeErrorZIsOk(long _o);
	// void CResult_ChannelReestablishDecodeErrorZ_free(struct LDKCResult_ChannelReestablishDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_free")] public static extern void CResultChannelReestablishDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelReestablishDecodeErrorZ_clone_ptr(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone_ptr")] public static extern long CResultChannelReestablishDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_clone(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone")] public static extern long CResultChannelReestablishDecodeErrorZClone(long _orig);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_ok(struct LDKClosingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_ok")] public static extern long CResultClosingSignedDecodeErrorZOk(long _o);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_err")] public static extern long CResultClosingSignedDecodeErrorZErr(long _e);
	// bool CResult_ClosingSignedDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_is_ok")] public static extern bool CResultClosingSignedDecodeErrorZIsOk(long _o);
	// void CResult_ClosingSignedDecodeErrorZ_free(struct LDKCResult_ClosingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_free")] public static extern void CResultClosingSignedDecodeErrorZFree(long __res);
	// uint64_t CResult_ClosingSignedDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone_ptr")] public static extern long CResultClosingSignedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone")] public static extern long CResultClosingSignedDecodeErrorZClone(long _orig);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(struct LDKClosingSignedFeeRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_ok")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZOk(long _o);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_err")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZErr(long _e);
	// bool CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok")] public static extern bool CResultClosingSignedFeeRangeDecodeErrorZIsOk(long _o);
	// void CResult_ClosingSignedFeeRangeDecodeErrorZ_free(struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_free")] public static extern void CResultClosingSignedFeeRangeDecodeErrorZFree(long __res);
	// uint64_t CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone")] public static extern long CResultClosingSignedFeeRangeDecodeErrorZClone(long _orig);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_ok(struct LDKCommitmentSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_ok")] public static extern long CResultCommitmentSignedDecodeErrorZOk(long _o);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_err")] public static extern long CResultCommitmentSignedDecodeErrorZErr(long _e);
	// bool CResult_CommitmentSignedDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_is_ok")] public static extern bool CResultCommitmentSignedDecodeErrorZIsOk(long _o);
	// void CResult_CommitmentSignedDecodeErrorZ_free(struct LDKCResult_CommitmentSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_free")] public static extern void CResultCommitmentSignedDecodeErrorZFree(long __res);
	// uint64_t CResult_CommitmentSignedDecodeErrorZ_clone_ptr(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone_ptr")] public static extern long CResultCommitmentSignedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_clone(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone")] public static extern long CResultCommitmentSignedDecodeErrorZClone(long _orig);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_ok(struct LDKFundingCreated o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_ok")] public static extern long CResultFundingCreatedDecodeErrorZOk(long _o);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_err")] public static extern long CResultFundingCreatedDecodeErrorZErr(long _e);
	// bool CResult_FundingCreatedDecodeErrorZ_is_ok(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_is_ok")] public static extern bool CResultFundingCreatedDecodeErrorZIsOk(long _o);
	// void CResult_FundingCreatedDecodeErrorZ_free(struct LDKCResult_FundingCreatedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_free")] public static extern void CResultFundingCreatedDecodeErrorZFree(long __res);
	// uint64_t CResult_FundingCreatedDecodeErrorZ_clone_ptr(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone_ptr")] public static extern long CResultFundingCreatedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_clone(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone")] public static extern long CResultFundingCreatedDecodeErrorZClone(long _orig);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_ok(struct LDKFundingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_ok")] public static extern long CResultFundingSignedDecodeErrorZOk(long _o);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_err")] public static extern long CResultFundingSignedDecodeErrorZErr(long _e);
	// bool CResult_FundingSignedDecodeErrorZ_is_ok(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_is_ok")] public static extern bool CResultFundingSignedDecodeErrorZIsOk(long _o);
	// void CResult_FundingSignedDecodeErrorZ_free(struct LDKCResult_FundingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_free")] public static extern void CResultFundingSignedDecodeErrorZFree(long __res);
	// uint64_t CResult_FundingSignedDecodeErrorZ_clone_ptr(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone_ptr")] public static extern long CResultFundingSignedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_clone(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone")] public static extern long CResultFundingSignedDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_ok(struct LDKChannelReady o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_ok")] public static extern long CResultChannelReadyDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_err")] public static extern long CResultChannelReadyDecodeErrorZErr(long _e);
	// bool CResult_ChannelReadyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_is_ok")] public static extern bool CResultChannelReadyDecodeErrorZIsOk(long _o);
	// void CResult_ChannelReadyDecodeErrorZ_free(struct LDKCResult_ChannelReadyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_free")] public static extern void CResultChannelReadyDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelReadyDecodeErrorZ_clone_ptr(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone_ptr")] public static extern long CResultChannelReadyDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_clone(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone")] public static extern long CResultChannelReadyDecodeErrorZClone(long _orig);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_ok(struct LDKInit o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_ok")] public static extern long CResultInitDecodeErrorZOk(long _o);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_err")] public static extern long CResultInitDecodeErrorZErr(long _e);
	// bool CResult_InitDecodeErrorZ_is_ok(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_is_ok")] public static extern bool CResultInitDecodeErrorZIsOk(long _o);
	// void CResult_InitDecodeErrorZ_free(struct LDKCResult_InitDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_free")] public static extern void CResultInitDecodeErrorZFree(long __res);
	// uint64_t CResult_InitDecodeErrorZ_clone_ptr(LDKCResult_InitDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone_ptr")] public static extern long CResultInitDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_clone(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone")] public static extern long CResultInitDecodeErrorZClone(long _orig);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_ok(struct LDKOpenChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_ok")] public static extern long CResultOpenChannelDecodeErrorZOk(long _o);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_err")] public static extern long CResultOpenChannelDecodeErrorZErr(long _e);
	// bool CResult_OpenChannelDecodeErrorZ_is_ok(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_is_ok")] public static extern bool CResultOpenChannelDecodeErrorZIsOk(long _o);
	// void CResult_OpenChannelDecodeErrorZ_free(struct LDKCResult_OpenChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_free")] public static extern void CResultOpenChannelDecodeErrorZFree(long __res);
	// uint64_t CResult_OpenChannelDecodeErrorZ_clone_ptr(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone_ptr")] public static extern long CResultOpenChannelDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_clone(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone")] public static extern long CResultOpenChannelDecodeErrorZClone(long _orig);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_ok(struct LDKOpenChannelV2 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_ok")] public static extern long CResultOpenChannelV2DecodeErrorZOk(long _o);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_err")] public static extern long CResultOpenChannelV2DecodeErrorZErr(long _e);
	// bool CResult_OpenChannelV2DecodeErrorZ_is_ok(const struct LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_is_ok")] public static extern bool CResultOpenChannelV2DecodeErrorZIsOk(long _o);
	// void CResult_OpenChannelV2DecodeErrorZ_free(struct LDKCResult_OpenChannelV2DecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_free")] public static extern void CResultOpenChannelV2DecodeErrorZFree(long __res);
	// uint64_t CResult_OpenChannelV2DecodeErrorZ_clone_ptr(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_clone_ptr")] public static extern long CResultOpenChannelV2DecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_clone(const struct LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_clone")] public static extern long CResultOpenChannelV2DecodeErrorZClone(long _orig);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_ok(struct LDKRevokeAndACK o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_ok")] public static extern long CResultRevokeAndACKDecodeErrorZOk(long _o);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_err")] public static extern long CResultRevokeAndACKDecodeErrorZErr(long _e);
	// bool CResult_RevokeAndACKDecodeErrorZ_is_ok(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_is_ok")] public static extern bool CResultRevokeAndACKDecodeErrorZIsOk(long _o);
	// void CResult_RevokeAndACKDecodeErrorZ_free(struct LDKCResult_RevokeAndACKDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_free")] public static extern void CResultRevokeAndACKDecodeErrorZFree(long __res);
	// uint64_t CResult_RevokeAndACKDecodeErrorZ_clone_ptr(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone_ptr")] public static extern long CResultRevokeAndACKDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_clone(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone")] public static extern long CResultRevokeAndACKDecodeErrorZClone(long _orig);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_ok(struct LDKShutdown o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_ok")] public static extern long CResultShutdownDecodeErrorZOk(long _o);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_err")] public static extern long CResultShutdownDecodeErrorZErr(long _e);
	// bool CResult_ShutdownDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_is_ok")] public static extern bool CResultShutdownDecodeErrorZIsOk(long _o);
	// void CResult_ShutdownDecodeErrorZ_free(struct LDKCResult_ShutdownDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_free")] public static extern void CResultShutdownDecodeErrorZFree(long __res);
	// uint64_t CResult_ShutdownDecodeErrorZ_clone_ptr(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone_ptr")] public static extern long CResultShutdownDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_clone(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone")] public static extern long CResultShutdownDecodeErrorZClone(long _orig);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_ok(struct LDKUpdateFailHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_ok")] public static extern long CResultUpdateFailHTLCDecodeErrorZOk(long _o);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_err")] public static extern long CResultUpdateFailHTLCDecodeErrorZErr(long _e);
	// bool CResult_UpdateFailHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_is_ok")] public static extern bool CResultUpdateFailHTLCDecodeErrorZIsOk(long _o);
	// void CResult_UpdateFailHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_free")] public static extern void CResultUpdateFailHTLCDecodeErrorZFree(long __res);
	// uint64_t CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr")] public static extern long CResultUpdateFailHTLCDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone")] public static extern long CResultUpdateFailHTLCDecodeErrorZClone(long _orig);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(struct LDKUpdateFailMalformedHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZOk(long _o);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_err")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZErr(long _e);
	// bool CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok")] public static extern bool CResultUpdateFailMalformedHTLCDecodeErrorZIsOk(long _o);
	// void CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_free")] public static extern void CResultUpdateFailMalformedHTLCDecodeErrorZFree(long __res);
	// uint64_t CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone")] public static extern long CResultUpdateFailMalformedHTLCDecodeErrorZClone(long _orig);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_ok(struct LDKUpdateFee o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_ok")] public static extern long CResultUpdateFeeDecodeErrorZOk(long _o);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_err")] public static extern long CResultUpdateFeeDecodeErrorZErr(long _e);
	// bool CResult_UpdateFeeDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_is_ok")] public static extern bool CResultUpdateFeeDecodeErrorZIsOk(long _o);
	// void CResult_UpdateFeeDecodeErrorZ_free(struct LDKCResult_UpdateFeeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_free")] public static extern void CResultUpdateFeeDecodeErrorZFree(long __res);
	// uint64_t CResult_UpdateFeeDecodeErrorZ_clone_ptr(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone_ptr")] public static extern long CResultUpdateFeeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_clone(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone")] public static extern long CResultUpdateFeeDecodeErrorZClone(long _orig);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_ok(struct LDKUpdateFulfillHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_ok")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZOk(long _o);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_err")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZErr(long _e);
	// bool CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok")] public static extern bool CResultUpdateFulfillHTLCDecodeErrorZIsOk(long _o);
	// void CResult_UpdateFulfillHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_free")] public static extern void CResultUpdateFulfillHTLCDecodeErrorZFree(long __res);
	// uint64_t CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone")] public static extern long CResultUpdateFulfillHTLCDecodeErrorZClone(long _orig);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_ok(struct LDKOnionPacket o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_ok")] public static extern long CResultOnionPacketDecodeErrorZOk(long _o);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_err")] public static extern long CResultOnionPacketDecodeErrorZErr(long _e);
	// bool CResult_OnionPacketDecodeErrorZ_is_ok(const struct LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_is_ok")] public static extern bool CResultOnionPacketDecodeErrorZIsOk(long _o);
	// void CResult_OnionPacketDecodeErrorZ_free(struct LDKCResult_OnionPacketDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_free")] public static extern void CResultOnionPacketDecodeErrorZFree(long __res);
	// uint64_t CResult_OnionPacketDecodeErrorZ_clone_ptr(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_clone_ptr")] public static extern long CResultOnionPacketDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_clone(const struct LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_clone")] public static extern long CResultOnionPacketDecodeErrorZClone(long _orig);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_ok(struct LDKUpdateAddHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_ok")] public static extern long CResultUpdateAddHTLCDecodeErrorZOk(long _o);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_err")] public static extern long CResultUpdateAddHTLCDecodeErrorZErr(long _e);
	// bool CResult_UpdateAddHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_is_ok")] public static extern bool CResultUpdateAddHTLCDecodeErrorZIsOk(long _o);
	// void CResult_UpdateAddHTLCDecodeErrorZ_free(struct LDKCResult_UpdateAddHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_free")] public static extern void CResultUpdateAddHTLCDecodeErrorZFree(long __res);
	// uint64_t CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr")] public static extern long CResultUpdateAddHTLCDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone")] public static extern long CResultUpdateAddHTLCDecodeErrorZClone(long _orig);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_ok(struct LDKOnionMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_ok")] public static extern long CResultOnionMessageDecodeErrorZOk(long _o);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_err")] public static extern long CResultOnionMessageDecodeErrorZErr(long _e);
	// bool CResult_OnionMessageDecodeErrorZ_is_ok(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_is_ok")] public static extern bool CResultOnionMessageDecodeErrorZIsOk(long _o);
	// void CResult_OnionMessageDecodeErrorZ_free(struct LDKCResult_OnionMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_free")] public static extern void CResultOnionMessageDecodeErrorZFree(long __res);
	// uint64_t CResult_OnionMessageDecodeErrorZ_clone_ptr(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone_ptr")] public static extern long CResultOnionMessageDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_clone(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone")] public static extern long CResultOnionMessageDecodeErrorZClone(long _orig);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_ok(struct LDKFinalOnionHopData o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_ok")] public static extern long CResultFinalOnionHopDataDecodeErrorZOk(long _o);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_err")] public static extern long CResultFinalOnionHopDataDecodeErrorZErr(long _e);
	// bool CResult_FinalOnionHopDataDecodeErrorZ_is_ok(const struct LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_is_ok")] public static extern bool CResultFinalOnionHopDataDecodeErrorZIsOk(long _o);
	// void CResult_FinalOnionHopDataDecodeErrorZ_free(struct LDKCResult_FinalOnionHopDataDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_free")] public static extern void CResultFinalOnionHopDataDecodeErrorZFree(long __res);
	// uint64_t CResult_FinalOnionHopDataDecodeErrorZ_clone_ptr(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_clone_ptr")] public static extern long CResultFinalOnionHopDataDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_clone(const struct LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_clone")] public static extern long CResultFinalOnionHopDataDecodeErrorZClone(long _orig);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_ok(struct LDKPing o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_ok")] public static extern long CResultPingDecodeErrorZOk(long _o);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_err")] public static extern long CResultPingDecodeErrorZErr(long _e);
	// bool CResult_PingDecodeErrorZ_is_ok(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_is_ok")] public static extern bool CResultPingDecodeErrorZIsOk(long _o);
	// void CResult_PingDecodeErrorZ_free(struct LDKCResult_PingDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_free")] public static extern void CResultPingDecodeErrorZFree(long __res);
	// uint64_t CResult_PingDecodeErrorZ_clone_ptr(LDKCResult_PingDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone_ptr")] public static extern long CResultPingDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_clone(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone")] public static extern long CResultPingDecodeErrorZClone(long _orig);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_ok(struct LDKPong o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_ok")] public static extern long CResultPongDecodeErrorZOk(long _o);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_err")] public static extern long CResultPongDecodeErrorZErr(long _e);
	// bool CResult_PongDecodeErrorZ_is_ok(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_is_ok")] public static extern bool CResultPongDecodeErrorZIsOk(long _o);
	// void CResult_PongDecodeErrorZ_free(struct LDKCResult_PongDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_free")] public static extern void CResultPongDecodeErrorZFree(long __res);
	// uint64_t CResult_PongDecodeErrorZ_clone_ptr(LDKCResult_PongDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone_ptr")] public static extern long CResultPongDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_clone(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone")] public static extern long CResultPongDecodeErrorZClone(long _orig);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(struct LDKUnsignedChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZOk(long _o);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_err")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZErr(long _e);
	// bool CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResultUnsignedChannelAnnouncementDecodeErrorZIsOk(long _o);
	// void CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_free")] public static extern void CResultUnsignedChannelAnnouncementDecodeErrorZFree(long __res);
	// uint64_t CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResultUnsignedChannelAnnouncementDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_ok(struct LDKChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResultChannelAnnouncementDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_err")] public static extern long CResultChannelAnnouncementDecodeErrorZErr(long _e);
	// bool CResult_ChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResultChannelAnnouncementDecodeErrorZIsOk(long _o);
	// void CResult_ChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_ChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_free")] public static extern void CResultChannelAnnouncementDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResultChannelAnnouncementDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResultChannelAnnouncementDecodeErrorZClone(long _orig);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_ok(struct LDKUnsignedChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_ok")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZOk(long _o);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_err")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZErr(long _e);
	// bool CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResultUnsignedChannelUpdateDecodeErrorZIsOk(long _o);
	// void CResult_UnsignedChannelUpdateDecodeErrorZ_free(struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_free")] public static extern void CResultUnsignedChannelUpdateDecodeErrorZFree(long __res);
	// uint64_t CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone")] public static extern long CResultUnsignedChannelUpdateDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_ok(struct LDKChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_ok")] public static extern long CResultChannelUpdateDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_err")] public static extern long CResultChannelUpdateDecodeErrorZErr(long _e);
	// bool CResult_ChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResultChannelUpdateDecodeErrorZIsOk(long _o);
	// void CResult_ChannelUpdateDecodeErrorZ_free(struct LDKCResult_ChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_free")] public static extern void CResultChannelUpdateDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResultChannelUpdateDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone")] public static extern long CResultChannelUpdateDecodeErrorZClone(long _orig);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_ok(struct LDKErrorMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_ok")] public static extern long CResultErrorMessageDecodeErrorZOk(long _o);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_err")] public static extern long CResultErrorMessageDecodeErrorZErr(long _e);
	// bool CResult_ErrorMessageDecodeErrorZ_is_ok(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_is_ok")] public static extern bool CResultErrorMessageDecodeErrorZIsOk(long _o);
	// void CResult_ErrorMessageDecodeErrorZ_free(struct LDKCResult_ErrorMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_free")] public static extern void CResultErrorMessageDecodeErrorZFree(long __res);
	// uint64_t CResult_ErrorMessageDecodeErrorZ_clone_ptr(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone_ptr")] public static extern long CResultErrorMessageDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_clone(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone")] public static extern long CResultErrorMessageDecodeErrorZClone(long _orig);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_ok(struct LDKWarningMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_ok")] public static extern long CResultWarningMessageDecodeErrorZOk(long _o);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_err")] public static extern long CResultWarningMessageDecodeErrorZErr(long _e);
	// bool CResult_WarningMessageDecodeErrorZ_is_ok(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_is_ok")] public static extern bool CResultWarningMessageDecodeErrorZIsOk(long _o);
	// void CResult_WarningMessageDecodeErrorZ_free(struct LDKCResult_WarningMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_free")] public static extern void CResultWarningMessageDecodeErrorZFree(long __res);
	// uint64_t CResult_WarningMessageDecodeErrorZ_clone_ptr(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone_ptr")] public static extern long CResultWarningMessageDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_clone(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone")] public static extern long CResultWarningMessageDecodeErrorZClone(long _orig);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(struct LDKUnsignedNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZOk(long _o);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_err")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZErr(long _e);
	// bool CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResultUnsignedNodeAnnouncementDecodeErrorZIsOk(long _o);
	// void CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_free")] public static extern void CResultUnsignedNodeAnnouncementDecodeErrorZFree(long __res);
	// uint64_t CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone")] public static extern long CResultUnsignedNodeAnnouncementDecodeErrorZClone(long _orig);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_ok(struct LDKNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_ok")] public static extern long CResultNodeAnnouncementDecodeErrorZOk(long _o);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_err")] public static extern long CResultNodeAnnouncementDecodeErrorZErr(long _e);
	// bool CResult_NodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResultNodeAnnouncementDecodeErrorZIsOk(long _o);
	// void CResult_NodeAnnouncementDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_free")] public static extern void CResultNodeAnnouncementDecodeErrorZFree(long __res);
	// uint64_t CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResultNodeAnnouncementDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone")] public static extern long CResultNodeAnnouncementDecodeErrorZClone(long _orig);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_ok(struct LDKQueryShortChannelIds o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_ok")] public static extern long CResultQueryShortChannelIdsDecodeErrorZOk(long _o);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_err")] public static extern long CResultQueryShortChannelIdsDecodeErrorZErr(long _e);
	// bool CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_is_ok")] public static extern bool CResultQueryShortChannelIdsDecodeErrorZIsOk(long _o);
	// void CResult_QueryShortChannelIdsDecodeErrorZ_free(struct LDKCResult_QueryShortChannelIdsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_free")] public static extern void CResultQueryShortChannelIdsDecodeErrorZFree(long __res);
	// uint64_t CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr")] public static extern long CResultQueryShortChannelIdsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_clone(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone")] public static extern long CResultQueryShortChannelIdsDecodeErrorZClone(long _orig);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(struct LDKReplyShortChannelIdsEnd o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZOk(long _o);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_err")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZErr(long _e);
	// bool CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok")] public static extern bool CResultReplyShortChannelIdsEndDecodeErrorZIsOk(long _o);
	// void CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_free")] public static extern void CResultReplyShortChannelIdsEndDecodeErrorZFree(long __res);
	// uint64_t CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone")] public static extern long CResultReplyShortChannelIdsEndDecodeErrorZClone(long _orig);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_ok(struct LDKQueryChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_ok")] public static extern long CResultQueryChannelRangeDecodeErrorZOk(long _o);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_err")] public static extern long CResultQueryChannelRangeDecodeErrorZErr(long _e);
	// bool CResult_QueryChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResultQueryChannelRangeDecodeErrorZIsOk(long _o);
	// void CResult_QueryChannelRangeDecodeErrorZ_free(struct LDKCResult_QueryChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_free")] public static extern void CResultQueryChannelRangeDecodeErrorZFree(long __res);
	// uint64_t CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResultQueryChannelRangeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_clone(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone")] public static extern long CResultQueryChannelRangeDecodeErrorZClone(long _orig);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_ok(struct LDKReplyChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_ok")] public static extern long CResultReplyChannelRangeDecodeErrorZOk(long _o);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_err")] public static extern long CResultReplyChannelRangeDecodeErrorZErr(long _e);
	// bool CResult_ReplyChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResultReplyChannelRangeDecodeErrorZIsOk(long _o);
	// void CResult_ReplyChannelRangeDecodeErrorZ_free(struct LDKCResult_ReplyChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_free")] public static extern void CResultReplyChannelRangeDecodeErrorZFree(long __res);
	// uint64_t CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResultReplyChannelRangeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_clone(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone")] public static extern long CResultReplyChannelRangeDecodeErrorZClone(long _orig);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_ok(struct LDKGossipTimestampFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_ok")] public static extern long CResultGossipTimestampFilterDecodeErrorZOk(long _o);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_err")] public static extern long CResultGossipTimestampFilterDecodeErrorZErr(long _e);
	// bool CResult_GossipTimestampFilterDecodeErrorZ_is_ok(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_is_ok")] public static extern bool CResultGossipTimestampFilterDecodeErrorZIsOk(long _o);
	// void CResult_GossipTimestampFilterDecodeErrorZ_free(struct LDKCResult_GossipTimestampFilterDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_free")] public static extern void CResultGossipTimestampFilterDecodeErrorZFree(long __res);
	// uint64_t CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr")] public static extern long CResultGossipTimestampFilterDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_clone(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone")] public static extern long CResultGossipTimestampFilterDecodeErrorZClone(long _orig);
	// void CVec_PhantomRouteHintsZ_free(struct LDKCVec_PhantomRouteHintsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PhantomRouteHintsZ_free")] public static extern void CVecPhantomRouteHintsZFree(long __res);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_ok")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZOk(long _o);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_err(struct LDKSignOrCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_err")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZErr(long _e);
	// bool CResult_Bolt11InvoiceSignOrCreationErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_is_ok")] public static extern bool CResultBolt11InvoiceSignOrCreationErrorZIsOk(long _o);
	// void CResult_Bolt11InvoiceSignOrCreationErrorZ_free(struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_free")] public static extern void CResultBolt11InvoiceSignOrCreationErrorZFree(long __res);
	// uint64_t CResult_Bolt11InvoiceSignOrCreationErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_clone_ptr")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZClonePtr(long _arg);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_clone(const struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_clone")] public static extern long CResultBolt11InvoiceSignOrCreationErrorZClone(long _orig);
	// void CVec_FutureZ_free(struct LDKCVec_FutureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_FutureZ_free")] public static extern void CVecFutureZFree(long __res);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_ok(struct LDKOffersMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_ok")] public static extern long CResultOffersMessageDecodeErrorZOk(long _o);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_err")] public static extern long CResultOffersMessageDecodeErrorZErr(long _e);
	// bool CResult_OffersMessageDecodeErrorZ_is_ok(const struct LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_is_ok")] public static extern bool CResultOffersMessageDecodeErrorZIsOk(long _o);
	// void CResult_OffersMessageDecodeErrorZ_free(struct LDKCResult_OffersMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_free")] public static extern void CResultOffersMessageDecodeErrorZFree(long __res);
	// uint64_t CResult_OffersMessageDecodeErrorZ_clone_ptr(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_clone_ptr")] public static extern long CResultOffersMessageDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_clone(const struct LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_clone")] public static extern long CResultOffersMessageDecodeErrorZClone(long _orig);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_some(enum LDKHTLCClaim o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_some")] public static extern long COptionHTLCClaimZSome(HTLCClaim _o);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_none")] public static extern long COptionHTLCClaimZNone();
	// void COption_HTLCClaimZ_free(struct LDKCOption_HTLCClaimZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_free")] public static extern void COptionHTLCClaimZFree(long __res);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(struct LDKCounterpartyCommitmentSecrets o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZOk(long _o);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZErr(long _e);
	// bool CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok")] public static extern bool CResultCounterpartyCommitmentSecretsDecodeErrorZIsOk(long _o);
	// void CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free")] public static extern void CResultCounterpartyCommitmentSecretsDecodeErrorZFree(long __res);
	// uint64_t CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone")] public static extern long CResultCounterpartyCommitmentSecretsDecodeErrorZClone(long _orig);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_ok(struct LDKTxCreationKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_ok")] public static extern long CResultTxCreationKeysDecodeErrorZOk(long _o);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_err")] public static extern long CResultTxCreationKeysDecodeErrorZErr(long _e);
	// bool CResult_TxCreationKeysDecodeErrorZ_is_ok(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_is_ok")] public static extern bool CResultTxCreationKeysDecodeErrorZIsOk(long _o);
	// void CResult_TxCreationKeysDecodeErrorZ_free(struct LDKCResult_TxCreationKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_free")] public static extern void CResultTxCreationKeysDecodeErrorZFree(long __res);
	// uint64_t CResult_TxCreationKeysDecodeErrorZ_clone_ptr(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone_ptr")] public static extern long CResultTxCreationKeysDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_clone(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone")] public static extern long CResultTxCreationKeysDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_ok(struct LDKChannelPublicKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_ok")] public static extern long CResultChannelPublicKeysDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_err")] public static extern long CResultChannelPublicKeysDecodeErrorZErr(long _e);
	// bool CResult_ChannelPublicKeysDecodeErrorZ_is_ok(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_is_ok")] public static extern bool CResultChannelPublicKeysDecodeErrorZIsOk(long _o);
	// void CResult_ChannelPublicKeysDecodeErrorZ_free(struct LDKCResult_ChannelPublicKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_free")] public static extern void CResultChannelPublicKeysDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr")] public static extern long CResultChannelPublicKeysDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_clone(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone")] public static extern long CResultChannelPublicKeysDecodeErrorZClone(long _orig);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(struct LDKHTLCOutputInCommitment o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_ok")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZOk(long _o);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_err")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZErr(long _e);
	// bool CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok")] public static extern bool CResultHTLCOutputInCommitmentDecodeErrorZIsOk(long _o);
	// void CResult_HTLCOutputInCommitmentDecodeErrorZ_free(struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_free")] public static extern void CResultHTLCOutputInCommitmentDecodeErrorZFree(long __res);
	// uint64_t CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone")] public static extern long CResultHTLCOutputInCommitmentDecodeErrorZClone(long _orig);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(struct LDKCounterpartyChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZOk(long _o);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZErr(long _e);
	// bool CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResultCounterpartyChannelTransactionParametersDecodeErrorZIsOk(long _o);
	// void CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResultCounterpartyChannelTransactionParametersDecodeErrorZFree(long __res);
	// uint64_t CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResultCounterpartyChannelTransactionParametersDecodeErrorZClone(long _orig);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_ok(struct LDKChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResultChannelTransactionParametersDecodeErrorZOk(long _o);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResultChannelTransactionParametersDecodeErrorZErr(long _e);
	// bool CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResultChannelTransactionParametersDecodeErrorZIsOk(long _o);
	// void CResult_ChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_ChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResultChannelTransactionParametersDecodeErrorZFree(long __res);
	// uint64_t CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResultChannelTransactionParametersDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResultChannelTransactionParametersDecodeErrorZClone(long _orig);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_ok(struct LDKHolderCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZOk(long _o);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_err")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZErr(long _e);
	// bool CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResultHolderCommitmentTransactionDecodeErrorZIsOk(long _o);
	// void CResult_HolderCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_free")] public static extern void CResultHolderCommitmentTransactionDecodeErrorZFree(long __res);
	// uint64_t CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResultHolderCommitmentTransactionDecodeErrorZClone(long _orig);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(struct LDKBuiltCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZOk(long _o);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_err")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZErr(long _e);
	// bool CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResultBuiltCommitmentTransactionDecodeErrorZIsOk(long _o);
	// void CResult_BuiltCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_free")] public static extern void CResultBuiltCommitmentTransactionDecodeErrorZFree(long __res);
	// uint64_t CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResultBuiltCommitmentTransactionDecodeErrorZClone(long _orig);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_ok(struct LDKTrustedClosingTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_ok")] public static extern long CResultTrustedClosingTransactionNoneZOk(long _o);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_err")] public static extern long CResultTrustedClosingTransactionNoneZErr();
	// bool CResult_TrustedClosingTransactionNoneZ_is_ok(const struct LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_is_ok")] public static extern bool CResultTrustedClosingTransactionNoneZIsOk(long _o);
	// void CResult_TrustedClosingTransactionNoneZ_free(struct LDKCResult_TrustedClosingTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_free")] public static extern void CResultTrustedClosingTransactionNoneZFree(long __res);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_ok(struct LDKCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_ok")] public static extern long CResultCommitmentTransactionDecodeErrorZOk(long _o);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_err")] public static extern long CResultCommitmentTransactionDecodeErrorZErr(long _e);
	// bool CResult_CommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResultCommitmentTransactionDecodeErrorZIsOk(long _o);
	// void CResult_CommitmentTransactionDecodeErrorZ_free(struct LDKCResult_CommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_free")] public static extern void CResultCommitmentTransactionDecodeErrorZFree(long __res);
	// uint64_t CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResultCommitmentTransactionDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone")] public static extern long CResultCommitmentTransactionDecodeErrorZClone(long _orig);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_ok(struct LDKTrustedCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_ok")] public static extern long CResultTrustedCommitmentTransactionNoneZOk(long _o);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_err")] public static extern long CResultTrustedCommitmentTransactionNoneZErr();
	// bool CResult_TrustedCommitmentTransactionNoneZ_is_ok(const struct LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_is_ok")] public static extern bool CResultTrustedCommitmentTransactionNoneZIsOk(long _o);
	// void CResult_TrustedCommitmentTransactionNoneZ_free(struct LDKCResult_TrustedCommitmentTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_free")] public static extern void CResultTrustedCommitmentTransactionNoneZFree(long __res);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_ok(struct LDKCVec_ECDSASignatureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_ok")] public static extern long CResultCVecECDSASignatureZNoneZOk(long _o);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_err")] public static extern long CResultCVecECDSASignatureZNoneZErr();
	// bool CResult_CVec_ECDSASignatureZNoneZ_is_ok(const struct LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_is_ok")] public static extern bool CResultCVecECDSASignatureZNoneZIsOk(long _o);
	// void CResult_CVec_ECDSASignatureZNoneZ_free(struct LDKCResult_CVec_ECDSASignatureZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_free")] public static extern void CResultCVecECDSASignatureZNoneZFree(long __res);
	// uint64_t CResult_CVec_ECDSASignatureZNoneZ_clone_ptr(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_clone_ptr")] public static extern long CResultCVecECDSASignatureZNoneZClonePtr(long _arg);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_clone(const struct LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_clone")] public static extern long CResultCVecECDSASignatureZNoneZClone(long _orig);
	// struct LDKCOption_usizeZ COption_usizeZ_some(uintptr_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_some")] public static extern long COptionUsizezSome(long _o);
	// struct LDKCOption_usizeZ COption_usizeZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_none")] public static extern long COptionUsizezNone();
	// void COption_usizeZ_free(struct LDKCOption_usizeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_free")] public static extern void COptionUsizezFree(long __res);
	// uint64_t COption_usizeZ_clone_ptr(LDKCOption_usizeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_clone_ptr")] public static extern long COptionUsizezClonePtr(long _arg);
	// struct LDKCOption_usizeZ COption_usizeZ_clone(const struct LDKCOption_usizeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_clone")] public static extern long COptionUsizezClone(long _orig);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_ok")] public static extern long CResultShutdownScriptDecodeErrorZOk(long _o);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_err")] public static extern long CResultShutdownScriptDecodeErrorZErr(long _e);
	// bool CResult_ShutdownScriptDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_is_ok")] public static extern bool CResultShutdownScriptDecodeErrorZIsOk(long _o);
	// void CResult_ShutdownScriptDecodeErrorZ_free(struct LDKCResult_ShutdownScriptDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_free")] public static extern void CResultShutdownScriptDecodeErrorZFree(long __res);
	// uint64_t CResult_ShutdownScriptDecodeErrorZ_clone_ptr(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone_ptr")] public static extern long CResultShutdownScriptDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_clone(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone")] public static extern long CResultShutdownScriptDecodeErrorZClone(long _orig);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_ok")] public static extern long CResultShutdownScriptInvalidShutdownScriptZOk(long _o);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_err(struct LDKInvalidShutdownScript e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_err")] public static extern long CResultShutdownScriptInvalidShutdownScriptZErr(long _e);
	// bool CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok")] public static extern bool CResultShutdownScriptInvalidShutdownScriptZIsOk(long _o);
	// void CResult_ShutdownScriptInvalidShutdownScriptZ_free(struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_free")] public static extern void CResultShutdownScriptInvalidShutdownScriptZFree(long __res);
	// uint64_t CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr")] public static extern long CResultShutdownScriptInvalidShutdownScriptZClonePtr(long _arg);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_clone(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone")] public static extern long CResultShutdownScriptInvalidShutdownScriptZClone(long _orig);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_ok(struct LDKPaymentPurpose o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_ok")] public static extern long CResultPaymentPurposeDecodeErrorZOk(long _o);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_err")] public static extern long CResultPaymentPurposeDecodeErrorZErr(long _e);
	// bool CResult_PaymentPurposeDecodeErrorZ_is_ok(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_is_ok")] public static extern bool CResultPaymentPurposeDecodeErrorZIsOk(long _o);
	// void CResult_PaymentPurposeDecodeErrorZ_free(struct LDKCResult_PaymentPurposeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_free")] public static extern void CResultPaymentPurposeDecodeErrorZFree(long __res);
	// uint64_t CResult_PaymentPurposeDecodeErrorZ_clone_ptr(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone_ptr")] public static extern long CResultPaymentPurposeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_clone(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone")] public static extern long CResultPaymentPurposeDecodeErrorZClone(long _orig);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_ok(struct LDKClaimedHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_ok")] public static extern long CResultClaimedHTLCDecodeErrorZOk(long _o);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_err")] public static extern long CResultClaimedHTLCDecodeErrorZErr(long _e);
	// bool CResult_ClaimedHTLCDecodeErrorZ_is_ok(const struct LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_is_ok")] public static extern bool CResultClaimedHTLCDecodeErrorZIsOk(long _o);
	// void CResult_ClaimedHTLCDecodeErrorZ_free(struct LDKCResult_ClaimedHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_free")] public static extern void CResultClaimedHTLCDecodeErrorZFree(long __res);
	// uint64_t CResult_ClaimedHTLCDecodeErrorZ_clone_ptr(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_clone_ptr")] public static extern long CResultClaimedHTLCDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_clone(const struct LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_clone")] public static extern long CResultClaimedHTLCDecodeErrorZClone(long _orig);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_some(struct LDKPathFailure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_some")] public static extern long COptionPathFailureZSome(long _o);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_none")] public static extern long COptionPathFailureZNone();
	// void COption_PathFailureZ_free(struct LDKCOption_PathFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_free")] public static extern void COptionPathFailureZFree(long __res);
	// uint64_t COption_PathFailureZ_clone_ptr(LDKCOption_PathFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_clone_ptr")] public static extern long COptionPathFailureZClonePtr(long _arg);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_clone(const struct LDKCOption_PathFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_clone")] public static extern long COptionPathFailureZClone(long _orig);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_ok(struct LDKCOption_PathFailureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_ok")] public static extern long CResultCOptionPathFailureZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_err")] public static extern long CResultCOptionPathFailureZDecodeErrorZErr(long _e);
	// bool CResult_COption_PathFailureZDecodeErrorZ_is_ok(const struct LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionPathFailureZDecodeErrorZIsOk(long _o);
	// void CResult_COption_PathFailureZDecodeErrorZ_free(struct LDKCResult_COption_PathFailureZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_free")] public static extern void CResultCOptionPathFailureZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_PathFailureZDecodeErrorZ_clone_ptr(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionPathFailureZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_clone(const struct LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_clone")] public static extern long CResultCOptionPathFailureZDecodeErrorZClone(long _orig);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_some(struct LDKClosureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_some")] public static extern long COptionClosureReasonZSome(long _o);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_none")] public static extern long COptionClosureReasonZNone();
	// void COption_ClosureReasonZ_free(struct LDKCOption_ClosureReasonZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_free")] public static extern void COptionClosureReasonZFree(long __res);
	// uint64_t COption_ClosureReasonZ_clone_ptr(LDKCOption_ClosureReasonZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone_ptr")] public static extern long COptionClosureReasonZClonePtr(long _arg);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_clone(const struct LDKCOption_ClosureReasonZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone")] public static extern long COptionClosureReasonZClone(long _orig);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_ok(struct LDKCOption_ClosureReasonZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_ok")] public static extern long CResultCOptionClosureReasonZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_err")] public static extern long CResultCOptionClosureReasonZDecodeErrorZErr(long _e);
	// bool CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionClosureReasonZDecodeErrorZIsOk(long _o);
	// void CResult_COption_ClosureReasonZDecodeErrorZ_free(struct LDKCResult_COption_ClosureReasonZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_free")] public static extern void CResultCOptionClosureReasonZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionClosureReasonZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_clone(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone")] public static extern long CResultCOptionClosureReasonZDecodeErrorZClone(long _orig);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_some(struct LDKHTLCDestination o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_some")] public static extern long COptionHTLCDestinationZSome(long _o);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_none")] public static extern long COptionHTLCDestinationZNone();
	// void COption_HTLCDestinationZ_free(struct LDKCOption_HTLCDestinationZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_free")] public static extern void COptionHTLCDestinationZFree(long __res);
	// uint64_t COption_HTLCDestinationZ_clone_ptr(LDKCOption_HTLCDestinationZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone_ptr")] public static extern long COptionHTLCDestinationZClonePtr(long _arg);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_clone(const struct LDKCOption_HTLCDestinationZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone")] public static extern long COptionHTLCDestinationZClone(long _orig);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_ok(struct LDKCOption_HTLCDestinationZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_ok")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_err")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZErr(long _e);
	// bool CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionHTLCDestinationZDecodeErrorZIsOk(long _o);
	// void CResult_COption_HTLCDestinationZDecodeErrorZ_free(struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_free")] public static extern void CResultCOptionHTLCDestinationZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_clone(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone")] public static extern long CResultCOptionHTLCDestinationZDecodeErrorZClone(long _orig);
	// struct LDKCResult_PaymentFailureReasonDecodeErrorZ CResult_PaymentFailureReasonDecodeErrorZ_ok(enum LDKPaymentFailureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_ok")] public static extern long CResultPaymentFailureReasonDecodeErrorZOk(PaymentFailureReason _o);
	// struct LDKCResult_PaymentFailureReasonDecodeErrorZ CResult_PaymentFailureReasonDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_err")] public static extern long CResultPaymentFailureReasonDecodeErrorZErr(long _e);
	// bool CResult_PaymentFailureReasonDecodeErrorZ_is_ok(const struct LDKCResult_PaymentFailureReasonDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_is_ok")] public static extern bool CResultPaymentFailureReasonDecodeErrorZIsOk(long _o);
	// void CResult_PaymentFailureReasonDecodeErrorZ_free(struct LDKCResult_PaymentFailureReasonDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_free")] public static extern void CResultPaymentFailureReasonDecodeErrorZFree(long __res);
	// uint64_t CResult_PaymentFailureReasonDecodeErrorZ_clone_ptr(LDKCResult_PaymentFailureReasonDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_clone_ptr")] public static extern long CResultPaymentFailureReasonDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PaymentFailureReasonDecodeErrorZ CResult_PaymentFailureReasonDecodeErrorZ_clone(const struct LDKCResult_PaymentFailureReasonDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentFailureReasonDecodeErrorZ_clone")] public static extern long CResultPaymentFailureReasonDecodeErrorZClone(long _orig);
	// struct LDKCOption_U128Z COption_U128Z_some(struct LDKU128 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_some")] public static extern long COptionU128ZSome(long _o);
	// struct LDKCOption_U128Z COption_U128Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_none")] public static extern long COptionU128ZNone();
	// void COption_U128Z_free(struct LDKCOption_U128Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_free")] public static extern void COptionU128ZFree(long __res);
	// uint64_t COption_U128Z_clone_ptr(LDKCOption_U128Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_clone_ptr")] public static extern long COptionU128ZClonePtr(long _arg);
	// struct LDKCOption_U128Z COption_U128Z_clone(const struct LDKCOption_U128Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_clone")] public static extern long COptionU128ZClone(long _orig);
	// void CVec_ClaimedHTLCZ_free(struct LDKCVec_ClaimedHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ClaimedHTLCZ_free")] public static extern void CVecClaimedHTLCZFree(long __res);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_some(enum LDKPaymentFailureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_some")] public static extern long COptionPaymentFailureReasonZSome(PaymentFailureReason _o);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_none")] public static extern long COptionPaymentFailureReasonZNone();
	// void COption_PaymentFailureReasonZ_free(struct LDKCOption_PaymentFailureReasonZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_free")] public static extern void COptionPaymentFailureReasonZFree(long __res);
	// uint64_t COption_PaymentFailureReasonZ_clone_ptr(LDKCOption_PaymentFailureReasonZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_clone_ptr")] public static extern long COptionPaymentFailureReasonZClonePtr(long _arg);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_clone(const struct LDKCOption_PaymentFailureReasonZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_clone")] public static extern long COptionPaymentFailureReasonZClone(long _orig);
	// struct LDKCOption_EventZ COption_EventZ_some(struct LDKEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_some")] public static extern long COptionEventZSome(long _o);
	// struct LDKCOption_EventZ COption_EventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_none")] public static extern long COptionEventZNone();
	// void COption_EventZ_free(struct LDKCOption_EventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_free")] public static extern void COptionEventZFree(long __res);
	// uint64_t COption_EventZ_clone_ptr(LDKCOption_EventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone_ptr")] public static extern long COptionEventZClonePtr(long _arg);
	// struct LDKCOption_EventZ COption_EventZ_clone(const struct LDKCOption_EventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone")] public static extern long COptionEventZClone(long _orig);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_ok(struct LDKCOption_EventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_ok")] public static extern long CResultCOptionEventZDecodeErrorZOk(long _o);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_err")] public static extern long CResultCOptionEventZDecodeErrorZErr(long _e);
	// bool CResult_COption_EventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_is_ok")] public static extern bool CResultCOptionEventZDecodeErrorZIsOk(long _o);
	// void CResult_COption_EventZDecodeErrorZ_free(struct LDKCResult_COption_EventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_free")] public static extern void CResultCOptionEventZDecodeErrorZFree(long __res);
	// uint64_t CResult_COption_EventZDecodeErrorZ_clone_ptr(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone_ptr")] public static extern long CResultCOptionEventZDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_clone(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone")] public static extern long CResultCOptionEventZDecodeErrorZClone(long _orig);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_ok(enum LDKSiPrefix o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_ok")] public static extern long CResultSiPrefixBolt11ParseErrorZOk(SiPrefix _o);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_err(struct LDKBolt11ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_err")] public static extern long CResultSiPrefixBolt11ParseErrorZErr(long _e);
	// bool CResult_SiPrefixBolt11ParseErrorZ_is_ok(const struct LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_is_ok")] public static extern bool CResultSiPrefixBolt11ParseErrorZIsOk(long _o);
	// void CResult_SiPrefixBolt11ParseErrorZ_free(struct LDKCResult_SiPrefixBolt11ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_free")] public static extern void CResultSiPrefixBolt11ParseErrorZFree(long __res);
	// uint64_t CResult_SiPrefixBolt11ParseErrorZ_clone_ptr(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_clone_ptr")] public static extern long CResultSiPrefixBolt11ParseErrorZClonePtr(long _arg);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_clone(const struct LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_clone")] public static extern long CResultSiPrefixBolt11ParseErrorZClone(long _orig);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_ok")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZOk(long _o);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_err(struct LDKParseOrSemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_err")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZErr(long _e);
	// bool CResult_Bolt11InvoiceParseOrSemanticErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_is_ok")] public static extern bool CResultBolt11InvoiceParseOrSemanticErrorZIsOk(long _o);
	// void CResult_Bolt11InvoiceParseOrSemanticErrorZ_free(struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_free")] public static extern void CResultBolt11InvoiceParseOrSemanticErrorZFree(long __res);
	// uint64_t CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone_ptr")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZClonePtr(long _arg);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone(const struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone")] public static extern long CResultBolt11InvoiceParseOrSemanticErrorZClone(long _orig);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_ok(struct LDKSignedRawBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_ok")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZOk(long _o);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_err(struct LDKBolt11ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_err")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZErr(long _e);
	// bool CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_is_ok(const struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_is_ok")] public static extern bool CResultSignedRawBolt11InvoiceBolt11ParseErrorZIsOk(long _o);
	// void CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_free(struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_free")] public static extern void CResultSignedRawBolt11InvoiceBolt11ParseErrorZFree(long __res);
	// uint64_t CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone_ptr(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone_ptr")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZClonePtr(long _arg);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone(const struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone")] public static extern long CResultSignedRawBolt11InvoiceBolt11ParseErrorZClone(long _orig);
	// uint64_t C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone_ptr(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone_ptr")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezClonePtr(long _arg);
	// struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone(const struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezClone(long _orig);
	// struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_new(struct LDKRawBolt11Invoice a, struct LDKThirtyTwoBytes b, struct LDKBolt11InvoiceSignature c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_new")] public static extern long C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezNew(long _a, long _b, long _c);
	// void C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_free(struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_free")] public static extern void C3TupleRawBolt11InvoiceU832Bolt11InvoicesignaturezFree(long __res);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_ok(struct LDKPayeePubKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_ok")] public static extern long CResultPayeePubKeySecp256k1ErrorZOk(long _o);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_err")] public static extern long CResultPayeePubKeySecp256k1ErrorZErr(Secp256k1Error _e);
	// bool CResult_PayeePubKeySecp256k1ErrorZ_is_ok(const struct LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_is_ok")] public static extern bool CResultPayeePubKeySecp256k1ErrorZIsOk(long _o);
	// void CResult_PayeePubKeySecp256k1ErrorZ_free(struct LDKCResult_PayeePubKeySecp256k1ErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_free")] public static extern void CResultPayeePubKeySecp256k1ErrorZFree(long __res);
	// uint64_t CResult_PayeePubKeySecp256k1ErrorZ_clone_ptr(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_clone_ptr")] public static extern long CResultPayeePubKeySecp256k1ErrorZClonePtr(long _arg);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_clone(const struct LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_clone")] public static extern long CResultPayeePubKeySecp256k1ErrorZClone(long _orig);
	// void CVec_PrivateRouteZ_free(struct LDKCVec_PrivateRouteZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PrivateRouteZ_free")] public static extern void CVecPrivateRouteZFree(long __res);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_ok(struct LDKPositiveTimestamp o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_ok")] public static extern long CResultPositiveTimestampCreationErrorZOk(long _o);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_err")] public static extern long CResultPositiveTimestampCreationErrorZErr(CreationError _e);
	// bool CResult_PositiveTimestampCreationErrorZ_is_ok(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_is_ok")] public static extern bool CResultPositiveTimestampCreationErrorZIsOk(long _o);
	// void CResult_PositiveTimestampCreationErrorZ_free(struct LDKCResult_PositiveTimestampCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_free")] public static extern void CResultPositiveTimestampCreationErrorZFree(long __res);
	// uint64_t CResult_PositiveTimestampCreationErrorZ_clone_ptr(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone_ptr")] public static extern long CResultPositiveTimestampCreationErrorZClonePtr(long _arg);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_clone(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone")] public static extern long CResultPositiveTimestampCreationErrorZClone(long _orig);
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_ok")] public static extern long CResultNoneBolt11SemanticErrorZOk();
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_err(enum LDKBolt11SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_err")] public static extern long CResultNoneBolt11SemanticErrorZErr(Bolt11SemanticError _e);
	// bool CResult_NoneBolt11SemanticErrorZ_is_ok(const struct LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_is_ok")] public static extern bool CResultNoneBolt11SemanticErrorZIsOk(long _o);
	// void CResult_NoneBolt11SemanticErrorZ_free(struct LDKCResult_NoneBolt11SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_free")] public static extern void CResultNoneBolt11SemanticErrorZFree(long __res);
	// uint64_t CResult_NoneBolt11SemanticErrorZ_clone_ptr(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_clone_ptr")] public static extern long CResultNoneBolt11SemanticErrorZClonePtr(long _arg);
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_clone(const struct LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_clone")] public static extern long CResultNoneBolt11SemanticErrorZClone(long _orig);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_ok")] public static extern long CResultBolt11InvoiceBolt11SemanticErrorZOk(long _o);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_err(enum LDKBolt11SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_err")] public static extern long CResultBolt11InvoiceBolt11SemanticErrorZErr(Bolt11SemanticError _e);
	// bool CResult_Bolt11InvoiceBolt11SemanticErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_is_ok")] public static extern bool CResultBolt11InvoiceBolt11SemanticErrorZIsOk(long _o);
	// void CResult_Bolt11InvoiceBolt11SemanticErrorZ_free(struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_free")] public static extern void CResultBolt11InvoiceBolt11SemanticErrorZFree(long __res);
	// uint64_t CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone_ptr")] public static extern long CResultBolt11InvoiceBolt11SemanticErrorZClonePtr(long _arg);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone(const struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone")] public static extern long CResultBolt11InvoiceBolt11SemanticErrorZClone(long _orig);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_ok(struct LDKDescription o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_ok")] public static extern long CResultDescriptionCreationErrorZOk(long _o);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_err")] public static extern long CResultDescriptionCreationErrorZErr(CreationError _e);
	// bool CResult_DescriptionCreationErrorZ_is_ok(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_is_ok")] public static extern bool CResultDescriptionCreationErrorZIsOk(long _o);
	// void CResult_DescriptionCreationErrorZ_free(struct LDKCResult_DescriptionCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_free")] public static extern void CResultDescriptionCreationErrorZFree(long __res);
	// uint64_t CResult_DescriptionCreationErrorZ_clone_ptr(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone_ptr")] public static extern long CResultDescriptionCreationErrorZClonePtr(long _arg);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_clone(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone")] public static extern long CResultDescriptionCreationErrorZClone(long _orig);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_ok(struct LDKPrivateRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_ok")] public static extern long CResultPrivateRouteCreationErrorZOk(long _o);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_err")] public static extern long CResultPrivateRouteCreationErrorZErr(CreationError _e);
	// bool CResult_PrivateRouteCreationErrorZ_is_ok(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_is_ok")] public static extern bool CResultPrivateRouteCreationErrorZIsOk(long _o);
	// void CResult_PrivateRouteCreationErrorZ_free(struct LDKCResult_PrivateRouteCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_free")] public static extern void CResultPrivateRouteCreationErrorZFree(long __res);
	// uint64_t CResult_PrivateRouteCreationErrorZ_clone_ptr(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone_ptr")] public static extern long CResultPrivateRouteCreationErrorZClonePtr(long _arg);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_clone(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone")] public static extern long CResultPrivateRouteCreationErrorZClone(long _orig);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_ok(struct LDKOutPoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_ok")] public static extern long CResultOutPointDecodeErrorZOk(long _o);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_err")] public static extern long CResultOutPointDecodeErrorZErr(long _e);
	// bool CResult_OutPointDecodeErrorZ_is_ok(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_is_ok")] public static extern bool CResultOutPointDecodeErrorZIsOk(long _o);
	// void CResult_OutPointDecodeErrorZ_free(struct LDKCResult_OutPointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_free")] public static extern void CResultOutPointDecodeErrorZFree(long __res);
	// uint64_t CResult_OutPointDecodeErrorZ_clone_ptr(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone_ptr")] public static extern long CResultOutPointDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_clone(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone")] public static extern long CResultOutPointDecodeErrorZClone(long _orig);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_ok(struct LDKBigSize o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_ok")] public static extern long CResultBigSizeDecodeErrorZOk(long _o);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_err")] public static extern long CResultBigSizeDecodeErrorZErr(long _e);
	// bool CResult_BigSizeDecodeErrorZ_is_ok(const struct LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_is_ok")] public static extern bool CResultBigSizeDecodeErrorZIsOk(long _o);
	// void CResult_BigSizeDecodeErrorZ_free(struct LDKCResult_BigSizeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_free")] public static extern void CResultBigSizeDecodeErrorZFree(long __res);
	// uint64_t CResult_BigSizeDecodeErrorZ_clone_ptr(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_clone_ptr")] public static extern long CResultBigSizeDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_clone(const struct LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_clone")] public static extern long CResultBigSizeDecodeErrorZClone(long _orig);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_ok(struct LDKHostname o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_ok")] public static extern long CResultHostnameDecodeErrorZOk(long _o);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_err")] public static extern long CResultHostnameDecodeErrorZErr(long _e);
	// bool CResult_HostnameDecodeErrorZ_is_ok(const struct LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_is_ok")] public static extern bool CResultHostnameDecodeErrorZIsOk(long _o);
	// void CResult_HostnameDecodeErrorZ_free(struct LDKCResult_HostnameDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_free")] public static extern void CResultHostnameDecodeErrorZFree(long __res);
	// uint64_t CResult_HostnameDecodeErrorZ_clone_ptr(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_clone_ptr")] public static extern long CResultHostnameDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_clone(const struct LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_clone")] public static extern long CResultHostnameDecodeErrorZClone(long _orig);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_ok(struct LDKTransactionU16LenLimited o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_ok")] public static extern long CResultTransactionU16LenLimitedNoneZOk(long _o);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_err")] public static extern long CResultTransactionU16LenLimitedNoneZErr();
	// bool CResult_TransactionU16LenLimitedNoneZ_is_ok(const struct LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_is_ok")] public static extern bool CResultTransactionU16LenLimitedNoneZIsOk(long _o);
	// void CResult_TransactionU16LenLimitedNoneZ_free(struct LDKCResult_TransactionU16LenLimitedNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_free")] public static extern void CResultTransactionU16LenLimitedNoneZFree(long __res);
	// uint64_t CResult_TransactionU16LenLimitedNoneZ_clone_ptr(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_clone_ptr")] public static extern long CResultTransactionU16LenLimitedNoneZClonePtr(long _arg);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_clone(const struct LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_clone")] public static extern long CResultTransactionU16LenLimitedNoneZClone(long _orig);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_ok(struct LDKTransactionU16LenLimited o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_ok")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZOk(long _o);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_err")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZErr(long _e);
	// bool CResult_TransactionU16LenLimitedDecodeErrorZ_is_ok(const struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_is_ok")] public static extern bool CResultTransactionU16LenLimitedDecodeErrorZIsOk(long _o);
	// void CResult_TransactionU16LenLimitedDecodeErrorZ_free(struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_free")] public static extern void CResultTransactionU16LenLimitedDecodeErrorZFree(long __res);
	// uint64_t CResult_TransactionU16LenLimitedDecodeErrorZ_clone_ptr(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_clone_ptr")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_clone(const struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_clone")] public static extern long CResultTransactionU16LenLimitedDecodeErrorZClone(long _orig);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_ok(struct LDKUntrustedString o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_ok")] public static extern long CResultUntrustedStringDecodeErrorZOk(long _o);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_err")] public static extern long CResultUntrustedStringDecodeErrorZErr(long _e);
	// bool CResult_UntrustedStringDecodeErrorZ_is_ok(const struct LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_is_ok")] public static extern bool CResultUntrustedStringDecodeErrorZIsOk(long _o);
	// void CResult_UntrustedStringDecodeErrorZ_free(struct LDKCResult_UntrustedStringDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_free")] public static extern void CResultUntrustedStringDecodeErrorZFree(long __res);
	// uint64_t CResult_UntrustedStringDecodeErrorZ_clone_ptr(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_clone_ptr")] public static extern long CResultUntrustedStringDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_clone(const struct LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_clone")] public static extern long CResultUntrustedStringDecodeErrorZClone(long _orig);
	// uint64_t C2Tuple__u832u16Z_clone_ptr(LDKC2Tuple__u832u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_clone_ptr")] public static extern long C2TupleU832U16ZClonePtr(long _arg);
	// struct LDKC2Tuple__u832u16Z C2Tuple__u832u16Z_clone(const struct LDKC2Tuple__u832u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_clone")] public static extern long C2TupleU832U16ZClone(long _orig);
	// struct LDKC2Tuple__u832u16Z C2Tuple__u832u16Z_new(struct LDKThirtyTwoBytes a, uint16_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_new")] public static extern long C2TupleU832U16ZNew(long _a, short _b);
	// void C2Tuple__u832u16Z_free(struct LDKC2Tuple__u832u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_free")] public static extern void C2TupleU832U16ZFree(long __res);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_ok(struct LDKPaymentRelay o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_ok")] public static extern long CResultPaymentRelayDecodeErrorZOk(long _o);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_err")] public static extern long CResultPaymentRelayDecodeErrorZErr(long _e);
	// bool CResult_PaymentRelayDecodeErrorZ_is_ok(const struct LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_is_ok")] public static extern bool CResultPaymentRelayDecodeErrorZIsOk(long _o);
	// void CResult_PaymentRelayDecodeErrorZ_free(struct LDKCResult_PaymentRelayDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_free")] public static extern void CResultPaymentRelayDecodeErrorZFree(long __res);
	// uint64_t CResult_PaymentRelayDecodeErrorZ_clone_ptr(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_clone_ptr")] public static extern long CResultPaymentRelayDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_clone(const struct LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_clone")] public static extern long CResultPaymentRelayDecodeErrorZClone(long _orig);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_ok(struct LDKPaymentConstraints o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_ok")] public static extern long CResultPaymentConstraintsDecodeErrorZOk(long _o);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_err")] public static extern long CResultPaymentConstraintsDecodeErrorZErr(long _e);
	// bool CResult_PaymentConstraintsDecodeErrorZ_is_ok(const struct LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_is_ok")] public static extern bool CResultPaymentConstraintsDecodeErrorZIsOk(long _o);
	// void CResult_PaymentConstraintsDecodeErrorZ_free(struct LDKCResult_PaymentConstraintsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_free")] public static extern void CResultPaymentConstraintsDecodeErrorZFree(long __res);
	// uint64_t CResult_PaymentConstraintsDecodeErrorZ_clone_ptr(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_clone_ptr")] public static extern long CResultPaymentConstraintsDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_clone(const struct LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_clone")] public static extern long CResultPaymentConstraintsDecodeErrorZClone(long _orig);
	// uint64_t C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone_ptr(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone_ptr")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZClonePtr(long _arg);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone(const struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZClone(long _orig);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_new(struct LDKThirtyTwoBytes a, struct LDKRecipientOnionFields b, struct LDKRouteParameters c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_new")] public static extern long C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNew(long _a, long _b, long _c);
	// void C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_free(struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_free")] public static extern void C3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZFree(long __res);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_ok(struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_ok")] public static extern long CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZOk(long _o);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_err")] public static extern long CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZErr();
	// bool CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_is_ok(const struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_is_ok")] public static extern bool CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZIsOk(long _o);
	// void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_free(struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_free")] public static extern void CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZFree(long __res);
	// uint64_t CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone_ptr(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone_ptr")] public static extern long CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZClonePtr(long _arg);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone(const struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone")] public static extern long CResultC3TupleThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZClone(long _orig);
	// struct LDKCResult_StrSecp256k1ErrorZ CResult_StrSecp256k1ErrorZ_ok(struct LDKStr o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_ok")] public static extern long CResultStrSecp256k1ErrorZOk(long _o);
	// struct LDKCResult_StrSecp256k1ErrorZ CResult_StrSecp256k1ErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_err")] public static extern long CResultStrSecp256k1ErrorZErr(Secp256k1Error _e);
	// bool CResult_StrSecp256k1ErrorZ_is_ok(const struct LDKCResult_StrSecp256k1ErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_is_ok")] public static extern bool CResultStrSecp256k1ErrorZIsOk(long _o);
	// void CResult_StrSecp256k1ErrorZ_free(struct LDKCResult_StrSecp256k1ErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_free")] public static extern void CResultStrSecp256k1ErrorZFree(long __res);
	// uint64_t CResult_StrSecp256k1ErrorZ_clone_ptr(LDKCResult_StrSecp256k1ErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_clone_ptr")] public static extern long CResultStrSecp256k1ErrorZClonePtr(long _arg);
	// struct LDKCResult_StrSecp256k1ErrorZ CResult_StrSecp256k1ErrorZ_clone(const struct LDKCResult_StrSecp256k1ErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StrSecp256k1ErrorZ_clone")] public static extern long CResultStrSecp256k1ErrorZClone(long _orig);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_ok(struct LDKTxOut o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_ok")] public static extern long CResultTxOutUtxoLookupErrorZOk(long _o);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_err(enum LDKUtxoLookupError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_err")] public static extern long CResultTxOutUtxoLookupErrorZErr(UtxoLookupError _e);
	// bool CResult_TxOutUtxoLookupErrorZ_is_ok(const struct LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_is_ok")] public static extern bool CResultTxOutUtxoLookupErrorZIsOk(long _o);
	// void CResult_TxOutUtxoLookupErrorZ_free(struct LDKCResult_TxOutUtxoLookupErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_free")] public static extern void CResultTxOutUtxoLookupErrorZFree(long __res);
	// uint64_t CResult_TxOutUtxoLookupErrorZ_clone_ptr(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_clone_ptr")] public static extern long CResultTxOutUtxoLookupErrorZClonePtr(long _arg);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_clone(const struct LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_clone")] public static extern long CResultTxOutUtxoLookupErrorZClone(long _orig);
	// uint64_t C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone_ptr(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone_ptr")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZClonePtr(long _arg);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone(const struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZClone(long _orig);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_new(struct LDKPublicKey a, struct LDKOnionMessage b, struct LDKCOption_CVec_SocketAddressZZ c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_new")] public static extern long C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZNew(long _a, long _b, long _c);
	// void C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_free(struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_free")] public static extern void C3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZFree(long __res);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_ok(struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_ok")] public static extern long CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZOk(long _o);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_err")] public static extern long CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZErr(long _e);
	// bool CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_is_ok(const struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_is_ok")] public static extern bool CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZIsOk(long _o);
	// void CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_free(struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_free")] public static extern void CResultC3TuplePublicKeyOnionMessageCOptionCVecSocketAddressZZZSendErrorZFree(long __res);
	// struct LDKCResult_PeeledOnionNoneZ CResult_PeeledOnionNoneZ_ok(struct LDKPeeledOnion o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_ok")] public static extern long CResultPeeledOnionNoneZOk(long _o);
	// struct LDKCResult_PeeledOnionNoneZ CResult_PeeledOnionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_err")] public static extern long CResultPeeledOnionNoneZErr();
	// bool CResult_PeeledOnionNoneZ_is_ok(const struct LDKCResult_PeeledOnionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_is_ok")] public static extern bool CResultPeeledOnionNoneZIsOk(long _o);
	// void CResult_PeeledOnionNoneZ_free(struct LDKCResult_PeeledOnionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_free")] public static extern void CResultPeeledOnionNoneZFree(long __res);
	// struct LDKCResult_SendSuccessSendErrorZ CResult_SendSuccessSendErrorZ_ok(struct LDKSendSuccess o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_ok")] public static extern long CResultSendSuccessSendErrorZOk(long _o);
	// struct LDKCResult_SendSuccessSendErrorZ CResult_SendSuccessSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_err")] public static extern long CResultSendSuccessSendErrorZErr(long _e);
	// bool CResult_SendSuccessSendErrorZ_is_ok(const struct LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_is_ok")] public static extern bool CResultSendSuccessSendErrorZIsOk(long _o);
	// void CResult_SendSuccessSendErrorZ_free(struct LDKCResult_SendSuccessSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_free")] public static extern void CResultSendSuccessSendErrorZFree(long __res);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_ok(struct LDKBlindedPath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_ok")] public static extern long CResultBlindedPathNoneZOk(long _o);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_err")] public static extern long CResultBlindedPathNoneZErr();
	// bool CResult_BlindedPathNoneZ_is_ok(const struct LDKCResult_BlindedPathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_is_ok")] public static extern bool CResultBlindedPathNoneZIsOk(long _o);
	// void CResult_BlindedPathNoneZ_free(struct LDKCResult_BlindedPathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_free")] public static extern void CResultBlindedPathNoneZFree(long __res);
	// uint64_t CResult_BlindedPathNoneZ_clone_ptr(LDKCResult_BlindedPathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_clone_ptr")] public static extern long CResultBlindedPathNoneZClonePtr(long _arg);
	// struct LDKCResult_BlindedPathNoneZ CResult_BlindedPathNoneZ_clone(const struct LDKCResult_BlindedPathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathNoneZ_clone")] public static extern long CResultBlindedPathNoneZClone(long _orig);
	// struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_ok(struct LDKC2Tuple_BlindedPayInfoBlindedPathZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_ok")] public static extern long CResultC2TupleBlindedPayInfoBlindedPathZNoneZOk(long _o);
	// struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_err")] public static extern long CResultC2TupleBlindedPayInfoBlindedPathZNoneZErr();
	// bool CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_is_ok(const struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_is_ok")] public static extern bool CResultC2TupleBlindedPayInfoBlindedPathZNoneZIsOk(long _o);
	// void CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_free(struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_free")] public static extern void CResultC2TupleBlindedPayInfoBlindedPathZNoneZFree(long __res);
	// uint64_t CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_clone_ptr(LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_clone_ptr")] public static extern long CResultC2TupleBlindedPayInfoBlindedPathZNoneZClonePtr(long _arg);
	// struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_clone(const struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ_clone")] public static extern long CResultC2TupleBlindedPayInfoBlindedPathZNoneZClone(long _orig);
	// void CVec_ForwardNodeZ_free(struct LDKCVec_ForwardNodeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ForwardNodeZ_free")] public static extern void CVecForwardNodeZFree(long __res);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_ok(struct LDKBlindedPath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_ok")] public static extern long CResultBlindedPathDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_err")] public static extern long CResultBlindedPathDecodeErrorZErr(long _e);
	// bool CResult_BlindedPathDecodeErrorZ_is_ok(const struct LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_is_ok")] public static extern bool CResultBlindedPathDecodeErrorZIsOk(long _o);
	// void CResult_BlindedPathDecodeErrorZ_free(struct LDKCResult_BlindedPathDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_free")] public static extern void CResultBlindedPathDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedPathDecodeErrorZ_clone_ptr(LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedPathDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedPathDecodeErrorZ CResult_BlindedPathDecodeErrorZ_clone(const struct LDKCResult_BlindedPathDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPathDecodeErrorZ_clone")] public static extern long CResultBlindedPathDecodeErrorZClone(long _orig);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_ok(struct LDKBlindedHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_ok")] public static extern long CResultBlindedHopDecodeErrorZOk(long _o);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_err")] public static extern long CResultBlindedHopDecodeErrorZErr(long _e);
	// bool CResult_BlindedHopDecodeErrorZ_is_ok(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_is_ok")] public static extern bool CResultBlindedHopDecodeErrorZIsOk(long _o);
	// void CResult_BlindedHopDecodeErrorZ_free(struct LDKCResult_BlindedHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_free")] public static extern void CResultBlindedHopDecodeErrorZFree(long __res);
	// uint64_t CResult_BlindedHopDecodeErrorZ_clone_ptr(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone_ptr")] public static extern long CResultBlindedHopDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_clone(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone")] public static extern long CResultBlindedHopDecodeErrorZClone(long _orig);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_ok(struct LDKInvoiceError o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_ok")] public static extern long CResultInvoiceErrorDecodeErrorZOk(long _o);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_err")] public static extern long CResultInvoiceErrorDecodeErrorZErr(long _e);
	// bool CResult_InvoiceErrorDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_is_ok")] public static extern bool CResultInvoiceErrorDecodeErrorZIsOk(long _o);
	// void CResult_InvoiceErrorDecodeErrorZ_free(struct LDKCResult_InvoiceErrorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_free")] public static extern void CResultInvoiceErrorDecodeErrorZFree(long __res);
	// uint64_t CResult_InvoiceErrorDecodeErrorZ_clone_ptr(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_clone_ptr")] public static extern long CResultInvoiceErrorDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_clone(const struct LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_clone")] public static extern long CResultInvoiceErrorDecodeErrorZClone(long _orig);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_ok(struct LDKDelayedPaymentBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_ok")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZOk(long _o);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_err")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZErr(long _e);
	// bool CResult_DelayedPaymentBasepointDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_is_ok")] public static extern bool CResultDelayedPaymentBasepointDecodeErrorZIsOk(long _o);
	// void CResult_DelayedPaymentBasepointDecodeErrorZ_free(struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_free")] public static extern void CResultDelayedPaymentBasepointDecodeErrorZFree(long __res);
	// uint64_t CResult_DelayedPaymentBasepointDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_clone_ptr")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_clone")] public static extern long CResultDelayedPaymentBasepointDecodeErrorZClone(long _orig);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_ok(struct LDKDelayedPaymentKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_ok")] public static extern long CResultDelayedPaymentKeyDecodeErrorZOk(long _o);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_err")] public static extern long CResultDelayedPaymentKeyDecodeErrorZErr(long _e);
	// bool CResult_DelayedPaymentKeyDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_is_ok")] public static extern bool CResultDelayedPaymentKeyDecodeErrorZIsOk(long _o);
	// void CResult_DelayedPaymentKeyDecodeErrorZ_free(struct LDKCResult_DelayedPaymentKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_free")] public static extern void CResultDelayedPaymentKeyDecodeErrorZFree(long __res);
	// uint64_t CResult_DelayedPaymentKeyDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_clone_ptr")] public static extern long CResultDelayedPaymentKeyDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_clone")] public static extern long CResultDelayedPaymentKeyDecodeErrorZClone(long _orig);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_ok(struct LDKHtlcBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_ok")] public static extern long CResultHtlcBasepointDecodeErrorZOk(long _o);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_err")] public static extern long CResultHtlcBasepointDecodeErrorZErr(long _e);
	// bool CResult_HtlcBasepointDecodeErrorZ_is_ok(const struct LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_is_ok")] public static extern bool CResultHtlcBasepointDecodeErrorZIsOk(long _o);
	// void CResult_HtlcBasepointDecodeErrorZ_free(struct LDKCResult_HtlcBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_free")] public static extern void CResultHtlcBasepointDecodeErrorZFree(long __res);
	// uint64_t CResult_HtlcBasepointDecodeErrorZ_clone_ptr(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_clone_ptr")] public static extern long CResultHtlcBasepointDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_clone(const struct LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_clone")] public static extern long CResultHtlcBasepointDecodeErrorZClone(long _orig);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_ok(struct LDKHtlcKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_ok")] public static extern long CResultHtlcKeyDecodeErrorZOk(long _o);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_err")] public static extern long CResultHtlcKeyDecodeErrorZErr(long _e);
	// bool CResult_HtlcKeyDecodeErrorZ_is_ok(const struct LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_is_ok")] public static extern bool CResultHtlcKeyDecodeErrorZIsOk(long _o);
	// void CResult_HtlcKeyDecodeErrorZ_free(struct LDKCResult_HtlcKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_free")] public static extern void CResultHtlcKeyDecodeErrorZFree(long __res);
	// uint64_t CResult_HtlcKeyDecodeErrorZ_clone_ptr(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_clone_ptr")] public static extern long CResultHtlcKeyDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_clone(const struct LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_clone")] public static extern long CResultHtlcKeyDecodeErrorZClone(long _orig);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_ok(struct LDKRevocationBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_ok")] public static extern long CResultRevocationBasepointDecodeErrorZOk(long _o);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_err")] public static extern long CResultRevocationBasepointDecodeErrorZErr(long _e);
	// bool CResult_RevocationBasepointDecodeErrorZ_is_ok(const struct LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_is_ok")] public static extern bool CResultRevocationBasepointDecodeErrorZIsOk(long _o);
	// void CResult_RevocationBasepointDecodeErrorZ_free(struct LDKCResult_RevocationBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_free")] public static extern void CResultRevocationBasepointDecodeErrorZFree(long __res);
	// uint64_t CResult_RevocationBasepointDecodeErrorZ_clone_ptr(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_clone_ptr")] public static extern long CResultRevocationBasepointDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_clone(const struct LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_clone")] public static extern long CResultRevocationBasepointDecodeErrorZClone(long _orig);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_ok(struct LDKRevocationKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_ok")] public static extern long CResultRevocationKeyDecodeErrorZOk(long _o);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_err")] public static extern long CResultRevocationKeyDecodeErrorZErr(long _e);
	// bool CResult_RevocationKeyDecodeErrorZ_is_ok(const struct LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_is_ok")] public static extern bool CResultRevocationKeyDecodeErrorZIsOk(long _o);
	// void CResult_RevocationKeyDecodeErrorZ_free(struct LDKCResult_RevocationKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_free")] public static extern void CResultRevocationKeyDecodeErrorZFree(long __res);
	// uint64_t CResult_RevocationKeyDecodeErrorZ_clone_ptr(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_clone_ptr")] public static extern long CResultRevocationKeyDecodeErrorZClonePtr(long _arg);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_clone(const struct LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_clone")] public static extern long CResultRevocationKeyDecodeErrorZClone(long _orig);
	// struct LDKCOption_FilterZ COption_FilterZ_some(struct LDKFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_some")] public static extern long COptionFilterZSome(long _o);
	// struct LDKCOption_FilterZ COption_FilterZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_none")] public static extern long COptionFilterZNone();
	// void COption_FilterZ_free(struct LDKCOption_FilterZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_free")] public static extern void COptionFilterZFree(long __res);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_ok(struct LDKLockedChannelMonitor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_ok")] public static extern long CResultLockedChannelMonitorNoneZOk(long _o);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_err")] public static extern long CResultLockedChannelMonitorNoneZErr();
	// bool CResult_LockedChannelMonitorNoneZ_is_ok(const struct LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_is_ok")] public static extern bool CResultLockedChannelMonitorNoneZIsOk(long _o);
	// void CResult_LockedChannelMonitorNoneZ_free(struct LDKCResult_LockedChannelMonitorNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_free")] public static extern void CResultLockedChannelMonitorNoneZFree(long __res);
	// void CVec_OutPointZ_free(struct LDKCVec_OutPointZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_OutPointZ_free")] public static extern void CVecOutPointZFree(long __res);
	// void CVec_MonitorUpdateIdZ_free(struct LDKCVec_MonitorUpdateIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MonitorUpdateIdZ_free")] public static extern void CVecMonitorUpdateIdZFree(long __res);
	// uint64_t C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone_ptr(LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone_ptr")] public static extern long C2TupleOutPointCVecMonitorUpdateIdZZClonePtr(long _arg);
	// struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone(const struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_clone")] public static extern long C2TupleOutPointCVecMonitorUpdateIdZZClone(long _orig);
	// struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ C2Tuple_OutPointCVec_MonitorUpdateIdZZ_new(struct LDKOutPoint a, struct LDKCVec_MonitorUpdateIdZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_new")] public static extern long C2TupleOutPointCVecMonitorUpdateIdZZNew(long _a, long _b);
	// void C2Tuple_OutPointCVec_MonitorUpdateIdZZ_free(struct LDKC2Tuple_OutPointCVec_MonitorUpdateIdZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_MonitorUpdateIdZZ_free")] public static extern void C2TupleOutPointCVecMonitorUpdateIdZZFree(long __res);
	// void CVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ_free(struct LDKCVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ_free")] public static extern void CVecC2TupleOutPointCVecMonitorUpdateIdZZZFree(long __res);
	// void APIError_free(struct LDKAPIError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_free")] public static extern void APIErrorFree(long _this_ptr);
	// uint64_t APIError_clone_ptr(LDKAPIError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone_ptr")] public static extern long APIErrorClonePtr(long _arg);
	// struct LDKAPIError APIError_clone(const struct LDKAPIError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone")] public static extern long APIErrorClone(long _orig);
	// struct LDKAPIError APIError_apimisuse_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_apimisuse_error")] public static extern long APIErrorApimisuseError(long _err);
	// struct LDKAPIError APIError_fee_rate_too_high(struct LDKStr err, uint32_t feerate);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_fee_rate_too_high")] public static extern long APIErrorFeeRateTooHigh(long _err, int _feerate);
	// struct LDKAPIError APIError_invalid_route(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_invalid_route")] public static extern long APIErrorInvalidRoute(long _err);
	// struct LDKAPIError APIError_channel_unavailable(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_channel_unavailable")] public static extern long APIErrorChannelUnavailable(long _err);
	// struct LDKAPIError APIError_monitor_update_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_monitor_update_in_progress")] public static extern long APIErrorMonitorUpdateInProgress();
	// struct LDKAPIError APIError_incompatible_shutdown_script(struct LDKShutdownScript script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_incompatible_shutdown_script")] public static extern long APIErrorIncompatibleShutdownScript(long _script);
	// bool APIError_eq(const struct LDKAPIError *NONNULL_PTR a, const struct LDKAPIError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_eq")] public static extern bool APIErrorEq(long _a, long _b);
	// struct LDKCVec_u8Z APIError_write(const struct LDKAPIError *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_write")] public static extern long APIErrorWrite(long _obj);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ APIError_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_read")] public static extern long APIErrorRead(long _ser);
	// void BigSize_free(struct LDKBigSize this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_free")] public static extern void BigSizeFree(long _this_obj);
	// uint64_t BigSize_get_a(const struct LDKBigSize *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_get_a")] public static extern long BigSizeGetA(long _this_ptr);
	// void BigSize_set_a(struct LDKBigSize *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_set_a")] public static extern void BigSizeSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBigSize BigSize_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_new")] public static extern long BigSizeNew(long _a_arg);
	// uint64_t BigSize_clone_ptr(LDKBigSize *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_clone_ptr")] public static extern long BigSizeClonePtr(long _arg);
	// struct LDKBigSize BigSize_clone(const struct LDKBigSize *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_clone")] public static extern long BigSizeClone(long _orig);
	// uint64_t BigSize_hash(const struct LDKBigSize *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_hash")] public static extern long BigSizeHash(long _o);
	// bool BigSize_eq(const struct LDKBigSize *NONNULL_PTR a, const struct LDKBigSize *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_eq")] public static extern bool BigSizeEq(long _a, long _b);
	// struct LDKCVec_u8Z BigSize_write(const struct LDKBigSize *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_write")] public static extern long BigSizeWrite(long _obj);
	// struct LDKCResult_BigSizeDecodeErrorZ BigSize_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_read")] public static extern long BigSizeRead(long _ser);
	// void Hostname_free(struct LDKHostname this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_free")] public static extern void HostnameFree(long _this_obj);
	// uint64_t Hostname_clone_ptr(LDKHostname *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone_ptr")] public static extern long HostnameClonePtr(long _arg);
	// struct LDKHostname Hostname_clone(const struct LDKHostname *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone")] public static extern long HostnameClone(long _orig);
	// uint64_t Hostname_hash(const struct LDKHostname *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_hash")] public static extern long HostnameHash(long _o);
	// bool Hostname_eq(const struct LDKHostname *NONNULL_PTR a, const struct LDKHostname *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_eq")] public static extern bool HostnameEq(long _a, long _b);
	// MUST_USE_RES uint8_t Hostname_len(const struct LDKHostname *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_len")] public static extern byte HostnameLen(long _this_arg);
	// struct LDKCVec_u8Z Hostname_write(const struct LDKHostname *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_write")] public static extern long HostnameWrite(long _obj);
	// struct LDKCResult_HostnameDecodeErrorZ Hostname_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_read")] public static extern long HostnameRead(long _ser);
	// void TransactionU16LenLimited_free(struct LDKTransactionU16LenLimited this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_free")] public static extern void TransactionU16LenLimitedFree(long _this_obj);
	// uint64_t TransactionU16LenLimited_clone_ptr(LDKTransactionU16LenLimited *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_clone_ptr")] public static extern long TransactionU16LenLimitedClonePtr(long _arg);
	// struct LDKTransactionU16LenLimited TransactionU16LenLimited_clone(const struct LDKTransactionU16LenLimited *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_clone")] public static extern long TransactionU16LenLimitedClone(long _orig);
	// uint64_t TransactionU16LenLimited_hash(const struct LDKTransactionU16LenLimited *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_hash")] public static extern long TransactionU16LenLimitedHash(long _o);
	// bool TransactionU16LenLimited_eq(const struct LDKTransactionU16LenLimited *NONNULL_PTR a, const struct LDKTransactionU16LenLimited *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_eq")] public static extern bool TransactionU16LenLimitedEq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_TransactionU16LenLimitedNoneZ TransactionU16LenLimited_new(struct LDKTransaction transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_new")] public static extern long TransactionU16LenLimitedNew(long _transaction);
	// MUST_USE_RES struct LDKTransaction TransactionU16LenLimited_into_transaction(struct LDKTransactionU16LenLimited this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_into_transaction")] public static extern long TransactionU16LenLimitedIntoTransaction(long _this_arg);
	// struct LDKCVec_u8Z TransactionU16LenLimited_write(const struct LDKTransactionU16LenLimited *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_write")] public static extern long TransactionU16LenLimitedWrite(long _obj);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ TransactionU16LenLimited_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_read")] public static extern long TransactionU16LenLimitedRead(long _ser);
	// struct LDKCResult_StrSecp256k1ErrorZ sign(struct LDKu8slice msg, const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_sign")] public static extern long Sign(long _msg, long _sk);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ recover_pk(struct LDKu8slice msg, struct LDKStr sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_recover_pk")] public static extern long RecoverPk(long _msg, long _sig);
	// bool verify(struct LDKu8slice msg, struct LDKStr sig, struct LDKPublicKey pk);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify")] public static extern bool Verify(long _msg, long _sig, long _pk);
	// struct LDKCVec_u8Z construct_invoice_preimage(struct LDKu8slice hrp_bytes, struct LDKCVec_U5Z data_without_signature);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_construct_invoice_preimage")] public static extern long ConstructInvoicePreimage(long _hrp_bytes, long _data_without_signature);
	// void KVStore_free(struct LDKKVStore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_free")] public static extern void KVStoreFree(long _this_ptr);
	// void Persister_free(struct LDKPersister this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_free")] public static extern void PersisterFree(long _this_ptr);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ read_channel_monitors(struct LDKKVStore kv_store, struct LDKEntropySource entropy_source, struct LDKSignerProvider signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_read_channel_monitors")] public static extern long ReadChannelMonitors(long _kv_store, long _entropy_source, long _signer_provider);
	// void MonitorUpdatingPersister_free(struct LDKMonitorUpdatingPersister this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_free")] public static extern void MonitorUpdatingPersisterFree(long _this_obj);
	// MUST_USE_RES struct LDKMonitorUpdatingPersister MonitorUpdatingPersister_new(struct LDKKVStore kv_store, struct LDKLogger logger, uint64_t maximum_pending_updates, struct LDKEntropySource entropy_source, struct LDKSignerProvider signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_new")] public static extern long MonitorUpdatingPersisterNew(long _kv_store, long _logger, long _maximum_pending_updates, long _entropy_source, long _signer_provider);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ MonitorUpdatingPersister_read_all_channel_monitors_with_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, const struct LDKFeeEstimator *NONNULL_PTR fee_estimator);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_read_all_channel_monitors_with_updates")] public static extern long MonitorUpdatingPersisterReadAllChannelMonitorsWithUpdates(long _this_arg, long _broadcaster, long _fee_estimator);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ MonitorUpdatingPersister_read_channel_monitor_with_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, const struct LDKFeeEstimator *NONNULL_PTR fee_estimator, struct LDKStr monitor_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_read_channel_monitor_with_updates")] public static extern long MonitorUpdatingPersisterReadChannelMonitorWithUpdates(long _this_arg, long _broadcaster, long _fee_estimator, long _monitor_key);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ MonitorUpdatingPersister_cleanup_stale_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg, bool lazy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_cleanup_stale_updates")] public static extern long MonitorUpdatingPersisterCleanupStaleUpdates(long _this_arg, bool _lazy);
	// struct LDKPersist MonitorUpdatingPersister_as_Persist(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_as_Persist")] public static extern long MonitorUpdatingPersisterAsPersist(long _this_arg);
	// void UntrustedString_free(struct LDKUntrustedString this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_free")] public static extern void UntrustedStringFree(long _this_obj);
	// struct LDKStr UntrustedString_get_a(const struct LDKUntrustedString *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_get_a")] public static extern long UntrustedStringGetA(long _this_ptr);
	// void UntrustedString_set_a(struct LDKUntrustedString *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_set_a")] public static extern void UntrustedStringSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUntrustedString UntrustedString_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_new")] public static extern long UntrustedStringNew(long _a_arg);
	// uint64_t UntrustedString_clone_ptr(LDKUntrustedString *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_clone_ptr")] public static extern long UntrustedStringClonePtr(long _arg);
	// struct LDKUntrustedString UntrustedString_clone(const struct LDKUntrustedString *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_clone")] public static extern long UntrustedStringClone(long _orig);
	// bool UntrustedString_eq(const struct LDKUntrustedString *NONNULL_PTR a, const struct LDKUntrustedString *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_eq")] public static extern bool UntrustedStringEq(long _a, long _b);
	// uint64_t UntrustedString_hash(const struct LDKUntrustedString *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_hash")] public static extern long UntrustedStringHash(long _o);
	// struct LDKCVec_u8Z UntrustedString_write(const struct LDKUntrustedString *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_write")] public static extern long UntrustedStringWrite(long _obj);
	// struct LDKCResult_UntrustedStringDecodeErrorZ UntrustedString_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_read")] public static extern long UntrustedStringRead(long _ser);
	// void PrintableString_free(struct LDKPrintableString this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_free")] public static extern void PrintableStringFree(long _this_obj);
	// struct LDKStr PrintableString_get_a(const struct LDKPrintableString *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_get_a")] public static extern long PrintableStringGetA(long _this_ptr);
	// void PrintableString_set_a(struct LDKPrintableString *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_set_a")] public static extern void PrintableStringSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPrintableString PrintableString_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_new")] public static extern long PrintableStringNew(long _a_arg);
	// void FutureCallback_free(struct LDKFutureCallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_free")] public static extern void FutureCallbackFree(long _this_ptr);
	// void Future_free(struct LDKFuture this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_free")] public static extern void FutureFree(long _this_obj);
	// uint64_t Future_clone_ptr(LDKFuture *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_clone_ptr")] public static extern long FutureClonePtr(long _arg);
	// struct LDKFuture Future_clone(const struct LDKFuture *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_clone")] public static extern long FutureClone(long _orig);
	// void Future_register_callback_fn(const struct LDKFuture *NONNULL_PTR this_arg, struct LDKFutureCallback callback);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_register_callback_fn")] public static extern void FutureRegisterCallbackFn(long _this_arg, long _callback);
	// void Future_wait(struct LDKFuture this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_wait")] public static extern void FutureWait(long _this_arg);
	// MUST_USE_RES bool Future_wait_timeout(struct LDKFuture this_arg, uint64_t max_wait);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_wait_timeout")] public static extern bool FutureWaitTimeout(long _this_arg, long _max_wait);
	// void Sleeper_free(struct LDKSleeper this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_free")] public static extern void SleeperFree(long _this_obj);
	// MUST_USE_RES struct LDKSleeper Sleeper_from_single_future(struct LDKFuture future);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_from_single_future")] public static extern long SleeperFromSingleFuture(long _future);
	// MUST_USE_RES struct LDKSleeper Sleeper_from_two_futures(struct LDKFuture fut_a, struct LDKFuture fut_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_from_two_futures")] public static extern long SleeperFromTwoFutures(long _fut_a, long _fut_b);
	// MUST_USE_RES struct LDKSleeper Sleeper_new(struct LDKCVec_FutureZ futures);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_new")] public static extern long SleeperNew(long _futures);
	// void Sleeper_wait(const struct LDKSleeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_wait")] public static extern void SleeperWait(long _this_arg);
	// MUST_USE_RES bool Sleeper_wait_timeout(const struct LDKSleeper *NONNULL_PTR this_arg, uint64_t max_wait);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_wait_timeout")] public static extern bool SleeperWaitTimeout(long _this_arg, long _max_wait);
	// enum LDKLevel Level_clone(const enum LDKLevel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_clone")] public static extern Level LevelClone(long _orig);
	// enum LDKLevel Level_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_gossip")] public static extern Level LevelGossip();
	// enum LDKLevel Level_trace(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_trace")] public static extern Level LevelTrace();
	// enum LDKLevel Level_debug(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_debug")] public static extern Level LevelDebug();
	// enum LDKLevel Level_info(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_info")] public static extern Level LevelInfo();
	// enum LDKLevel Level_warn(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_warn")] public static extern Level LevelWarn();
	// enum LDKLevel Level_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_error")] public static extern Level LevelError();
	// bool Level_eq(const enum LDKLevel *NONNULL_PTR a, const enum LDKLevel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_eq")] public static extern bool LevelEq(long _a, long _b);
	// uint64_t Level_hash(const enum LDKLevel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_hash")] public static extern long LevelHash(long _o);
	// MUST_USE_RES enum LDKLevel Level_max(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_max")] public static extern Level LevelMax();
	// void Record_free(struct LDKRecord this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_free")] public static extern void RecordFree(long _this_obj);
	// enum LDKLevel Record_get_level(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_level")] public static extern Level RecordGetLevel(long _this_ptr);
	// void Record_set_level(struct LDKRecord *NONNULL_PTR this_ptr, enum LDKLevel val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_level")] public static extern void RecordSetLevel(long _this_ptr, Level _val);
	// struct LDKPublicKey Record_get_peer_id(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_peer_id")] public static extern long RecordGetPeerId(long _this_ptr);
	// void Record_set_peer_id(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_peer_id")] public static extern void RecordSetPeerId(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ Record_get_channel_id(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_channel_id")] public static extern long RecordGetChannelId(long _this_ptr);
	// void Record_set_channel_id(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_channel_id")] public static extern void RecordSetChannelId(long _this_ptr, long _val);
	// struct LDKStr Record_get_args(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_args")] public static extern long RecordGetArgs(long _this_ptr);
	// void Record_set_args(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_args")] public static extern void RecordSetArgs(long _this_ptr, long _val);
	// struct LDKStr Record_get_module_path(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_module_path")] public static extern long RecordGetModulePath(long _this_ptr);
	// void Record_set_module_path(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_module_path")] public static extern void RecordSetModulePath(long _this_ptr, long _val);
	// struct LDKStr Record_get_file(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_file")] public static extern long RecordGetFile(long _this_ptr);
	// void Record_set_file(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_file")] public static extern void RecordSetFile(long _this_ptr, long _val);
	// uint32_t Record_get_line(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_line")] public static extern int RecordGetLine(long _this_ptr);
	// void Record_set_line(struct LDKRecord *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_line")] public static extern void RecordSetLine(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRecord Record_new(enum LDKLevel level_arg, struct LDKPublicKey peer_id_arg, struct LDKCOption_ThirtyTwoBytesZ channel_id_arg, struct LDKStr args_arg, struct LDKStr module_path_arg, struct LDKStr file_arg, uint32_t line_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_new")] public static extern long RecordNew(Level _level_arg, long _peer_id_arg, long _channel_id_arg, long _args_arg, long _module_path_arg, long _file_arg, int _line_arg);
	// uint64_t Record_clone_ptr(LDKRecord *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone_ptr")] public static extern long RecordClonePtr(long _arg);
	// struct LDKRecord Record_clone(const struct LDKRecord *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone")] public static extern long RecordClone(long _orig);
	// void Logger_free(struct LDKLogger this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Logger_free")] public static extern void LoggerFree(long _this_ptr);
	// void ChannelHandshakeConfig_free(struct LDKChannelHandshakeConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_free")] public static extern void ChannelHandshakeConfigFree(long _this_obj);
	// uint32_t ChannelHandshakeConfig_get_minimum_depth(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_minimum_depth")] public static extern int ChannelHandshakeConfigGetMinimumDepth(long _this_ptr);
	// void ChannelHandshakeConfig_set_minimum_depth(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_minimum_depth")] public static extern void ChannelHandshakeConfigSetMinimumDepth(long _this_ptr, int _val);
	// uint16_t ChannelHandshakeConfig_get_our_to_self_delay(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_to_self_delay")] public static extern short ChannelHandshakeConfigGetOurToSelfDelay(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_to_self_delay(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_to_self_delay")] public static extern void ChannelHandshakeConfigSetOurToSelfDelay(long _this_ptr, short _val);
	// uint64_t ChannelHandshakeConfig_get_our_htlc_minimum_msat(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_htlc_minimum_msat")] public static extern long ChannelHandshakeConfigGetOurHtlcMinimumMsat(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_htlc_minimum_msat(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_htlc_minimum_msat")] public static extern void ChannelHandshakeConfigSetOurHtlcMinimumMsat(long _this_ptr, long _val);
	// uint8_t ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern byte ChannelHandshakeConfigGetMaxInboundHtlcValueInFlightPercentOfChannel(long _this_ptr);
	// void ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern void ChannelHandshakeConfigSetMaxInboundHtlcValueInFlightPercentOfChannel(long _this_ptr, byte _val);
	// bool ChannelHandshakeConfig_get_negotiate_scid_privacy(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_negotiate_scid_privacy")] public static extern bool ChannelHandshakeConfigGetNegotiateScidPrivacy(long _this_ptr);
	// void ChannelHandshakeConfig_set_negotiate_scid_privacy(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_negotiate_scid_privacy")] public static extern void ChannelHandshakeConfigSetNegotiateScidPrivacy(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_announced_channel(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_announced_channel")] public static extern bool ChannelHandshakeConfigGetAnnouncedChannel(long _this_ptr);
	// void ChannelHandshakeConfig_set_announced_channel(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_announced_channel")] public static extern void ChannelHandshakeConfigSetAnnouncedChannel(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey")] public static extern bool ChannelHandshakeConfigGetCommitUpfrontShutdownPubkey(long _this_ptr);
	// void ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey")] public static extern void ChannelHandshakeConfigSetCommitUpfrontShutdownPubkey(long _this_ptr, bool _val);
	// uint32_t ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths")] public static extern int ChannelHandshakeConfigGetTheirChannelReserveProportionalMillionths(long _this_ptr);
	// void ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths")] public static extern void ChannelHandshakeConfigSetTheirChannelReserveProportionalMillionths(long _this_ptr, int _val);
	// bool ChannelHandshakeConfig_get_negotiate_anchors_zero_fee_htlc_tx(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_negotiate_anchors_zero_fee_htlc_tx")] public static extern bool ChannelHandshakeConfigGetNegotiateAnchorsZeroFeeHtlcTx(long _this_ptr);
	// void ChannelHandshakeConfig_set_negotiate_anchors_zero_fee_htlc_tx(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_negotiate_anchors_zero_fee_htlc_tx")] public static extern void ChannelHandshakeConfigSetNegotiateAnchorsZeroFeeHtlcTx(long _this_ptr, bool _val);
	// uint16_t ChannelHandshakeConfig_get_our_max_accepted_htlcs(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_max_accepted_htlcs")] public static extern short ChannelHandshakeConfigGetOurMaxAcceptedHtlcs(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_max_accepted_htlcs(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_max_accepted_htlcs")] public static extern void ChannelHandshakeConfigSetOurMaxAcceptedHtlcs(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_new(uint32_t minimum_depth_arg, uint16_t our_to_self_delay_arg, uint64_t our_htlc_minimum_msat_arg, uint8_t max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool negotiate_scid_privacy_arg, bool announced_channel_arg, bool commit_upfront_shutdown_pubkey_arg, uint32_t their_channel_reserve_proportional_millionths_arg, bool negotiate_anchors_zero_fee_htlc_tx_arg, uint16_t our_max_accepted_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_new")] public static extern long ChannelHandshakeConfigNew(int _minimum_depth_arg, short _our_to_self_delay_arg, long _our_htlc_minimum_msat_arg, byte _max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool _negotiate_scid_privacy_arg, bool _announced_channel_arg, bool _commit_upfront_shutdown_pubkey_arg, int _their_channel_reserve_proportional_millionths_arg, bool _negotiate_anchors_zero_fee_htlc_tx_arg, short _our_max_accepted_htlcs_arg);
	// uint64_t ChannelHandshakeConfig_clone_ptr(LDKChannelHandshakeConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone_ptr")] public static extern long ChannelHandshakeConfigClonePtr(long _arg);
	// struct LDKChannelHandshakeConfig ChannelHandshakeConfig_clone(const struct LDKChannelHandshakeConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone")] public static extern long ChannelHandshakeConfigClone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_default")] public static extern long ChannelHandshakeConfigDefault();
	// void ChannelHandshakeLimits_free(struct LDKChannelHandshakeLimits this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_free")] public static extern void ChannelHandshakeLimitsFree(long _this_obj);
	// uint64_t ChannelHandshakeLimits_get_min_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_funding_satoshis")] public static extern long ChannelHandshakeLimitsGetMinFundingSatoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_funding_satoshis")] public static extern void ChannelHandshakeLimitsSetMinFundingSatoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_funding_satoshis")] public static extern long ChannelHandshakeLimitsGetMaxFundingSatoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_funding_satoshis")] public static extern void ChannelHandshakeLimitsSetMaxFundingSatoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_htlc_minimum_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_htlc_minimum_msat")] public static extern long ChannelHandshakeLimitsGetMaxHtlcMinimumMsat(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_htlc_minimum_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_htlc_minimum_msat")] public static extern void ChannelHandshakeLimitsSetMaxHtlcMinimumMsat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat")] public static extern long ChannelHandshakeLimitsGetMinMaxHtlcValueInFlightMsat(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat")] public static extern void ChannelHandshakeLimitsSetMinMaxHtlcValueInFlightMsat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_channel_reserve_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_channel_reserve_satoshis")] public static extern long ChannelHandshakeLimitsGetMaxChannelReserveSatoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_channel_reserve_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_channel_reserve_satoshis")] public static extern void ChannelHandshakeLimitsSetMaxChannelReserveSatoshis(long _this_ptr, long _val);
	// uint16_t ChannelHandshakeLimits_get_min_max_accepted_htlcs(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_accepted_htlcs")] public static extern short ChannelHandshakeLimitsGetMinMaxAcceptedHtlcs(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_accepted_htlcs(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_accepted_htlcs")] public static extern void ChannelHandshakeLimitsSetMinMaxAcceptedHtlcs(long _this_ptr, short _val);
	// uint32_t ChannelHandshakeLimits_get_max_minimum_depth(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_minimum_depth")] public static extern int ChannelHandshakeLimitsGetMaxMinimumDepth(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_minimum_depth(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_minimum_depth")] public static extern void ChannelHandshakeLimitsSetMaxMinimumDepth(long _this_ptr, int _val);
	// bool ChannelHandshakeLimits_get_trust_own_funding_0conf(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_trust_own_funding_0conf")] public static extern bool ChannelHandshakeLimitsGetTrustOwnFunding0Conf(long _this_ptr);
	// void ChannelHandshakeLimits_set_trust_own_funding_0conf(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_trust_own_funding_0conf")] public static extern void ChannelHandshakeLimitsSetTrustOwnFunding0Conf(long _this_ptr, bool _val);
	// bool ChannelHandshakeLimits_get_force_announced_channel_preference(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_force_announced_channel_preference")] public static extern bool ChannelHandshakeLimitsGetForceAnnouncedChannelPreference(long _this_ptr);
	// void ChannelHandshakeLimits_set_force_announced_channel_preference(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_force_announced_channel_preference")] public static extern void ChannelHandshakeLimitsSetForceAnnouncedChannelPreference(long _this_ptr, bool _val);
	// uint16_t ChannelHandshakeLimits_get_their_to_self_delay(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_their_to_self_delay")] public static extern short ChannelHandshakeLimitsGetTheirToSelfDelay(long _this_ptr);
	// void ChannelHandshakeLimits_set_their_to_self_delay(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_their_to_self_delay")] public static extern void ChannelHandshakeLimitsSetTheirToSelfDelay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_new(uint64_t min_funding_satoshis_arg, uint64_t max_funding_satoshis_arg, uint64_t max_htlc_minimum_msat_arg, uint64_t min_max_htlc_value_in_flight_msat_arg, uint64_t max_channel_reserve_satoshis_arg, uint16_t min_max_accepted_htlcs_arg, uint32_t max_minimum_depth_arg, bool trust_own_funding_0conf_arg, bool force_announced_channel_preference_arg, uint16_t their_to_self_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_new")] public static extern long ChannelHandshakeLimitsNew(long _min_funding_satoshis_arg, long _max_funding_satoshis_arg, long _max_htlc_minimum_msat_arg, long _min_max_htlc_value_in_flight_msat_arg, long _max_channel_reserve_satoshis_arg, short _min_max_accepted_htlcs_arg, int _max_minimum_depth_arg, bool _trust_own_funding_0conf_arg, bool _force_announced_channel_preference_arg, short _their_to_self_delay_arg);
	// uint64_t ChannelHandshakeLimits_clone_ptr(LDKChannelHandshakeLimits *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone_ptr")] public static extern long ChannelHandshakeLimitsClonePtr(long _arg);
	// struct LDKChannelHandshakeLimits ChannelHandshakeLimits_clone(const struct LDKChannelHandshakeLimits *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone")] public static extern long ChannelHandshakeLimitsClone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_default")] public static extern long ChannelHandshakeLimitsDefault();
	// void MaxDustHTLCExposure_free(struct LDKMaxDustHTLCExposure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_free")] public static extern void MaxDustHTLCExposureFree(long _this_ptr);
	// uint64_t MaxDustHTLCExposure_clone_ptr(LDKMaxDustHTLCExposure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_clone_ptr")] public static extern long MaxDustHTLCExposureClonePtr(long _arg);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_clone(const struct LDKMaxDustHTLCExposure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_clone")] public static extern long MaxDustHTLCExposureClone(long _orig);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_fixed_limit_msat(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_fixed_limit_msat")] public static extern long MaxDustHTLCExposureFixedLimitMsat(long _a);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_fee_rate_multiplier(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_fee_rate_multiplier")] public static extern long MaxDustHTLCExposureFeeRateMultiplier(long _a);
	// bool MaxDustHTLCExposure_eq(const struct LDKMaxDustHTLCExposure *NONNULL_PTR a, const struct LDKMaxDustHTLCExposure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_eq")] public static extern bool MaxDustHTLCExposureEq(long _a, long _b);
	// struct LDKCVec_u8Z MaxDustHTLCExposure_write(const struct LDKMaxDustHTLCExposure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_write")] public static extern long MaxDustHTLCExposureWrite(long _obj);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ MaxDustHTLCExposure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_read")] public static extern long MaxDustHTLCExposureRead(long _ser);
	// void ChannelConfig_free(struct LDKChannelConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_free")] public static extern void ChannelConfigFree(long _this_obj);
	// uint32_t ChannelConfig_get_forwarding_fee_proportional_millionths(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_proportional_millionths")] public static extern int ChannelConfigGetForwardingFeeProportionalMillionths(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_proportional_millionths(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_proportional_millionths")] public static extern void ChannelConfigSetForwardingFeeProportionalMillionths(long _this_ptr, int _val);
	// uint32_t ChannelConfig_get_forwarding_fee_base_msat(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_base_msat")] public static extern int ChannelConfigGetForwardingFeeBaseMsat(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_base_msat(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_base_msat")] public static extern void ChannelConfigSetForwardingFeeBaseMsat(long _this_ptr, int _val);
	// uint16_t ChannelConfig_get_cltv_expiry_delta(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_cltv_expiry_delta")] public static extern short ChannelConfigGetCltvExpiryDelta(long _this_ptr);
	// void ChannelConfig_set_cltv_expiry_delta(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_cltv_expiry_delta")] public static extern void ChannelConfigSetCltvExpiryDelta(long _this_ptr, short _val);
	// struct LDKMaxDustHTLCExposure ChannelConfig_get_max_dust_htlc_exposure(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_max_dust_htlc_exposure")] public static extern long ChannelConfigGetMaxDustHtlcExposure(long _this_ptr);
	// void ChannelConfig_set_max_dust_htlc_exposure(struct LDKChannelConfig *NONNULL_PTR this_ptr, struct LDKMaxDustHTLCExposure val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_max_dust_htlc_exposure")] public static extern void ChannelConfigSetMaxDustHtlcExposure(long _this_ptr, long _val);
	// uint64_t ChannelConfig_get_force_close_avoidance_max_fee_satoshis(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_force_close_avoidance_max_fee_satoshis")] public static extern long ChannelConfigGetForceCloseAvoidanceMaxFeeSatoshis(long _this_ptr);
	// void ChannelConfig_set_force_close_avoidance_max_fee_satoshis(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_force_close_avoidance_max_fee_satoshis")] public static extern void ChannelConfigSetForceCloseAvoidanceMaxFeeSatoshis(long _this_ptr, long _val);
	// bool ChannelConfig_get_accept_underpaying_htlcs(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_accept_underpaying_htlcs")] public static extern bool ChannelConfigGetAcceptUnderpayingHtlcs(long _this_ptr);
	// void ChannelConfig_set_accept_underpaying_htlcs(struct LDKChannelConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_accept_underpaying_htlcs")] public static extern void ChannelConfigSetAcceptUnderpayingHtlcs(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_new(uint32_t forwarding_fee_proportional_millionths_arg, uint32_t forwarding_fee_base_msat_arg, uint16_t cltv_expiry_delta_arg, struct LDKMaxDustHTLCExposure max_dust_htlc_exposure_arg, uint64_t force_close_avoidance_max_fee_satoshis_arg, bool accept_underpaying_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_new")] public static extern long ChannelConfigNew(int _forwarding_fee_proportional_millionths_arg, int _forwarding_fee_base_msat_arg, short _cltv_expiry_delta_arg, long _max_dust_htlc_exposure_arg, long _force_close_avoidance_max_fee_satoshis_arg, bool _accept_underpaying_htlcs_arg);
	// uint64_t ChannelConfig_clone_ptr(LDKChannelConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone_ptr")] public static extern long ChannelConfigClonePtr(long _arg);
	// struct LDKChannelConfig ChannelConfig_clone(const struct LDKChannelConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone")] public static extern long ChannelConfigClone(long _orig);
	// bool ChannelConfig_eq(const struct LDKChannelConfig *NONNULL_PTR a, const struct LDKChannelConfig *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_eq")] public static extern bool ChannelConfigEq(long _a, long _b);
	// void ChannelConfig_apply(struct LDKChannelConfig *NONNULL_PTR this_arg, const struct LDKChannelConfigUpdate *NONNULL_PTR update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_apply")] public static extern void ChannelConfigApply(long _this_arg, long _update);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_default")] public static extern long ChannelConfigDefault();
	// struct LDKCVec_u8Z ChannelConfig_write(const struct LDKChannelConfig *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_write")] public static extern long ChannelConfigWrite(long _obj);
	// struct LDKCResult_ChannelConfigDecodeErrorZ ChannelConfig_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_read")] public static extern long ChannelConfigRead(long _ser);
	// void ChannelConfigUpdate_free(struct LDKChannelConfigUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_free")] public static extern void ChannelConfigUpdateFree(long _this_obj);
	// struct LDKCOption_u32Z ChannelConfigUpdate_get_forwarding_fee_proportional_millionths(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_forwarding_fee_proportional_millionths")] public static extern long ChannelConfigUpdateGetForwardingFeeProportionalMillionths(long _this_ptr);
	// void ChannelConfigUpdate_set_forwarding_fee_proportional_millionths(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_forwarding_fee_proportional_millionths")] public static extern void ChannelConfigUpdateSetForwardingFeeProportionalMillionths(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelConfigUpdate_get_forwarding_fee_base_msat(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_forwarding_fee_base_msat")] public static extern long ChannelConfigUpdateGetForwardingFeeBaseMsat(long _this_ptr);
	// void ChannelConfigUpdate_set_forwarding_fee_base_msat(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_forwarding_fee_base_msat")] public static extern void ChannelConfigUpdateSetForwardingFeeBaseMsat(long _this_ptr, long _val);
	// struct LDKCOption_u16Z ChannelConfigUpdate_get_cltv_expiry_delta(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_cltv_expiry_delta")] public static extern long ChannelConfigUpdateGetCltvExpiryDelta(long _this_ptr);
	// void ChannelConfigUpdate_set_cltv_expiry_delta(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_cltv_expiry_delta")] public static extern void ChannelConfigUpdateSetCltvExpiryDelta(long _this_ptr, long _val);
	// struct LDKCOption_MaxDustHTLCExposureZ ChannelConfigUpdate_get_max_dust_htlc_exposure_msat(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_max_dust_htlc_exposure_msat")] public static extern long ChannelConfigUpdateGetMaxDustHtlcExposureMsat(long _this_ptr);
	// void ChannelConfigUpdate_set_max_dust_htlc_exposure_msat(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_MaxDustHTLCExposureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_max_dust_htlc_exposure_msat")] public static extern void ChannelConfigUpdateSetMaxDustHtlcExposureMsat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelConfigUpdate_get_force_close_avoidance_max_fee_satoshis(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_force_close_avoidance_max_fee_satoshis")] public static extern long ChannelConfigUpdateGetForceCloseAvoidanceMaxFeeSatoshis(long _this_ptr);
	// void ChannelConfigUpdate_set_force_close_avoidance_max_fee_satoshis(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_force_close_avoidance_max_fee_satoshis")] public static extern void ChannelConfigUpdateSetForceCloseAvoidanceMaxFeeSatoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelConfigUpdate ChannelConfigUpdate_new(struct LDKCOption_u32Z forwarding_fee_proportional_millionths_arg, struct LDKCOption_u32Z forwarding_fee_base_msat_arg, struct LDKCOption_u16Z cltv_expiry_delta_arg, struct LDKCOption_MaxDustHTLCExposureZ max_dust_htlc_exposure_msat_arg, struct LDKCOption_u64Z force_close_avoidance_max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_new")] public static extern long ChannelConfigUpdateNew(long _forwarding_fee_proportional_millionths_arg, long _forwarding_fee_base_msat_arg, long _cltv_expiry_delta_arg, long _max_dust_htlc_exposure_msat_arg, long _force_close_avoidance_max_fee_satoshis_arg);
	// MUST_USE_RES struct LDKChannelConfigUpdate ChannelConfigUpdate_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_default")] public static extern long ChannelConfigUpdateDefault();
	// void UserConfig_free(struct LDKUserConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_free")] public static extern void UserConfigFree(long _this_obj);
	// struct LDKChannelHandshakeConfig UserConfig_get_channel_handshake_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_config")] public static extern long UserConfigGetChannelHandshakeConfig(long _this_ptr);
	// void UserConfig_set_channel_handshake_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_config")] public static extern void UserConfigSetChannelHandshakeConfig(long _this_ptr, long _val);
	// struct LDKChannelHandshakeLimits UserConfig_get_channel_handshake_limits(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_limits")] public static extern long UserConfigGetChannelHandshakeLimits(long _this_ptr);
	// void UserConfig_set_channel_handshake_limits(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeLimits val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_limits")] public static extern void UserConfigSetChannelHandshakeLimits(long _this_ptr, long _val);
	// struct LDKChannelConfig UserConfig_get_channel_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_config")] public static extern long UserConfigGetChannelConfig(long _this_ptr);
	// void UserConfig_set_channel_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_config")] public static extern void UserConfigSetChannelConfig(long _this_ptr, long _val);
	// bool UserConfig_get_accept_forwards_to_priv_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_forwards_to_priv_channels")] public static extern bool UserConfigGetAcceptForwardsToPrivChannels(long _this_ptr);
	// void UserConfig_set_accept_forwards_to_priv_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_forwards_to_priv_channels")] public static extern void UserConfigSetAcceptForwardsToPrivChannels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_inbound_channels")] public static extern bool UserConfigGetAcceptInboundChannels(long _this_ptr);
	// void UserConfig_set_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_inbound_channels")] public static extern void UserConfigSetAcceptInboundChannels(long _this_ptr, bool _val);
	// bool UserConfig_get_manually_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_manually_accept_inbound_channels")] public static extern bool UserConfigGetManuallyAcceptInboundChannels(long _this_ptr);
	// void UserConfig_set_manually_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_manually_accept_inbound_channels")] public static extern void UserConfigSetManuallyAcceptInboundChannels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_intercept_htlcs(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_intercept_htlcs")] public static extern bool UserConfigGetAcceptInterceptHtlcs(long _this_ptr);
	// void UserConfig_set_accept_intercept_htlcs(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_intercept_htlcs")] public static extern void UserConfigSetAcceptInterceptHtlcs(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_mpp_keysend(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_mpp_keysend")] public static extern bool UserConfigGetAcceptMppKeysend(long _this_ptr);
	// void UserConfig_set_accept_mpp_keysend(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_mpp_keysend")] public static extern void UserConfigSetAcceptMppKeysend(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKUserConfig UserConfig_new(struct LDKChannelHandshakeConfig channel_handshake_config_arg, struct LDKChannelHandshakeLimits channel_handshake_limits_arg, struct LDKChannelConfig channel_config_arg, bool accept_forwards_to_priv_channels_arg, bool accept_inbound_channels_arg, bool manually_accept_inbound_channels_arg, bool accept_intercept_htlcs_arg, bool accept_mpp_keysend_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_new")] public static extern long UserConfigNew(long _channel_handshake_config_arg, long _channel_handshake_limits_arg, long _channel_config_arg, bool _accept_forwards_to_priv_channels_arg, bool _accept_inbound_channels_arg, bool _manually_accept_inbound_channels_arg, bool _accept_intercept_htlcs_arg, bool _accept_mpp_keysend_arg);
	// uint64_t UserConfig_clone_ptr(LDKUserConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone_ptr")] public static extern long UserConfigClonePtr(long _arg);
	// struct LDKUserConfig UserConfig_clone(const struct LDKUserConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone")] public static extern long UserConfigClone(long _orig);
	// MUST_USE_RES struct LDKUserConfig UserConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_default")] public static extern long UserConfigDefault();
	// void BestBlock_free(struct LDKBestBlock this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_free")] public static extern void BestBlockFree(long _this_obj);
	// uint64_t BestBlock_clone_ptr(LDKBestBlock *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone_ptr")] public static extern long BestBlockClonePtr(long _arg);
	// struct LDKBestBlock BestBlock_clone(const struct LDKBestBlock *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone")] public static extern long BestBlockClone(long _orig);
	// bool BestBlock_eq(const struct LDKBestBlock *NONNULL_PTR a, const struct LDKBestBlock *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_eq")] public static extern bool BestBlockEq(long _a, long _b);
	// MUST_USE_RES struct LDKBestBlock BestBlock_from_network(enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_from_network")] public static extern long BestBlockFromNetwork(Network _network);
	// MUST_USE_RES struct LDKBestBlock BestBlock_new(struct LDKThirtyTwoBytes block_hash, uint32_t height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_new")] public static extern long BestBlockNew(long _block_hash, int _height);
	// MUST_USE_RES struct LDKThirtyTwoBytes BestBlock_block_hash(const struct LDKBestBlock *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_block_hash")] public static extern long BestBlockBlockHash(long _this_arg);
	// MUST_USE_RES uint32_t BestBlock_height(const struct LDKBestBlock *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_height")] public static extern int BestBlockHeight(long _this_arg);
	// void Listen_free(struct LDKListen this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_free")] public static extern void ListenFree(long _this_ptr);
	// void Confirm_free(struct LDKConfirm this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_free")] public static extern void ConfirmFree(long _this_ptr);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_clone(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_clone")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusClone(long _orig);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_completed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_completed")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusCompleted();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_in_progress")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusInProgress();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_unrecoverable_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_unrecoverable_error")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusUnrecoverableError();
	// bool ChannelMonitorUpdateStatus_eq(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR a, const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_eq")] public static extern bool ChannelMonitorUpdateStatusEq(long _a, long _b);
	// void Watch_free(struct LDKWatch this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_free")] public static extern void WatchFree(long _this_ptr);
	// void Filter_free(struct LDKFilter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_free")] public static extern void FilterFree(long _this_ptr);
	// void WatchedOutput_free(struct LDKWatchedOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_free")] public static extern void WatchedOutputFree(long _this_obj);
	// struct LDKCOption_ThirtyTwoBytesZ WatchedOutput_get_block_hash(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_block_hash")] public static extern long WatchedOutputGetBlockHash(long _this_ptr);
	// void WatchedOutput_set_block_hash(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_block_hash")] public static extern void WatchedOutputSetBlockHash(long _this_ptr, long _val);
	// struct LDKOutPoint WatchedOutput_get_outpoint(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_outpoint")] public static extern long WatchedOutputGetOutpoint(long _this_ptr);
	// void WatchedOutput_set_outpoint(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_outpoint")] public static extern void WatchedOutputSetOutpoint(long _this_ptr, long _val);
	// struct LDKCVec_u8Z WatchedOutput_get_script_pubkey(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_script_pubkey")] public static extern long WatchedOutputGetScriptPubkey(long _this_ptr);
	// void WatchedOutput_set_script_pubkey(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_script_pubkey")] public static extern void WatchedOutputSetScriptPubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKWatchedOutput WatchedOutput_new(struct LDKCOption_ThirtyTwoBytesZ block_hash_arg, struct LDKOutPoint outpoint_arg, struct LDKCVec_u8Z script_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_new")] public static extern long WatchedOutputNew(long _block_hash_arg, long _outpoint_arg, long _script_pubkey_arg);
	// uint64_t WatchedOutput_clone_ptr(LDKWatchedOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone_ptr")] public static extern long WatchedOutputClonePtr(long _arg);
	// struct LDKWatchedOutput WatchedOutput_clone(const struct LDKWatchedOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone")] public static extern long WatchedOutputClone(long _orig);
	// bool WatchedOutput_eq(const struct LDKWatchedOutput *NONNULL_PTR a, const struct LDKWatchedOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_eq")] public static extern bool WatchedOutputEq(long _a, long _b);
	// uint64_t WatchedOutput_hash(const struct LDKWatchedOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_hash")] public static extern long WatchedOutputHash(long _o);
	// void BroadcasterInterface_free(struct LDKBroadcasterInterface this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_free")] public static extern void BroadcasterInterfaceFree(long _this_ptr);
	// enum LDKConfirmationTarget ConfirmationTarget_clone(const enum LDKConfirmationTarget *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_clone")] public static extern ConfirmationTarget ConfirmationTargetClone(long _orig);
	// enum LDKConfirmationTarget ConfirmationTarget_on_chain_sweep(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_on_chain_sweep")] public static extern ConfirmationTarget ConfirmationTargetOnChainSweep();
	// enum LDKConfirmationTarget ConfirmationTarget_min_allowed_anchor_channel_remote_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_min_allowed_anchor_channel_remote_fee")] public static extern ConfirmationTarget ConfirmationTargetMinAllowedAnchorChannelRemoteFee();
	// enum LDKConfirmationTarget ConfirmationTarget_min_allowed_non_anchor_channel_remote_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_min_allowed_non_anchor_channel_remote_fee")] public static extern ConfirmationTarget ConfirmationTargetMinAllowedNonAnchorChannelRemoteFee();
	// enum LDKConfirmationTarget ConfirmationTarget_anchor_channel_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_anchor_channel_fee")] public static extern ConfirmationTarget ConfirmationTargetAnchorChannelFee();
	// enum LDKConfirmationTarget ConfirmationTarget_non_anchor_channel_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_non_anchor_channel_fee")] public static extern ConfirmationTarget ConfirmationTargetNonAnchorChannelFee();
	// enum LDKConfirmationTarget ConfirmationTarget_channel_close_minimum(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_channel_close_minimum")] public static extern ConfirmationTarget ConfirmationTargetChannelCloseMinimum();
	// uint64_t ConfirmationTarget_hash(const enum LDKConfirmationTarget *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_hash")] public static extern long ConfirmationTargetHash(long _o);
	// bool ConfirmationTarget_eq(const enum LDKConfirmationTarget *NONNULL_PTR a, const enum LDKConfirmationTarget *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_eq")] public static extern bool ConfirmationTargetEq(long _a, long _b);
	// void FeeEstimator_free(struct LDKFeeEstimator this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_free")] public static extern void FeeEstimatorFree(long _this_ptr);
	// void MonitorUpdateId_free(struct LDKMonitorUpdateId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_free")] public static extern void MonitorUpdateIdFree(long _this_obj);
	// uint64_t MonitorUpdateId_clone_ptr(LDKMonitorUpdateId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_clone_ptr")] public static extern long MonitorUpdateIdClonePtr(long _arg);
	// struct LDKMonitorUpdateId MonitorUpdateId_clone(const struct LDKMonitorUpdateId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_clone")] public static extern long MonitorUpdateIdClone(long _orig);
	// uint64_t MonitorUpdateId_hash(const struct LDKMonitorUpdateId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_hash")] public static extern long MonitorUpdateIdHash(long _o);
	// bool MonitorUpdateId_eq(const struct LDKMonitorUpdateId *NONNULL_PTR a, const struct LDKMonitorUpdateId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdateId_eq")] public static extern bool MonitorUpdateIdEq(long _a, long _b);
	// void Persist_free(struct LDKPersist this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_free")] public static extern void PersistFree(long _this_ptr);
	// void LockedChannelMonitor_free(struct LDKLockedChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockedChannelMonitor_free")] public static extern void LockedChannelMonitorFree(long _this_obj);
	// void ChainMonitor_free(struct LDKChainMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_free")] public static extern void ChainMonitorFree(long _this_obj);
	// MUST_USE_RES struct LDKChainMonitor ChainMonitor_new(struct LDKCOption_FilterZ chain_source, struct LDKBroadcasterInterface broadcaster, struct LDKLogger logger, struct LDKFeeEstimator feeest, struct LDKPersist persister);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_new")] public static extern long ChainMonitorNew(long _chain_source, long _broadcaster, long _logger, long _feeest, long _persister);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChainMonitor_get_claimable_balances(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKCVec_ChannelDetailsZ ignored_channels);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_claimable_balances")] public static extern long ChainMonitorGetClaimableBalances(long _this_arg, long _ignored_channels);
	// MUST_USE_RES struct LDKCResult_LockedChannelMonitorNoneZ ChainMonitor_get_monitor(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_monitor")] public static extern long ChainMonitorGetMonitor(long _this_arg, long _funding_txo);
	// MUST_USE_RES struct LDKCVec_OutPointZ ChainMonitor_list_monitors(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_monitors")] public static extern long ChainMonitorListMonitors(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_OutPointCVec_MonitorUpdateIdZZZ ChainMonitor_list_pending_monitor_updates(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_pending_monitor_updates")] public static extern long ChainMonitorListPendingMonitorUpdates(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChainMonitor_channel_monitor_updated(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKMonitorUpdateId completed_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_channel_monitor_updated")] public static extern long ChainMonitorChannelMonitorUpdated(long _this_arg, long _funding_txo, long _completed_update_id);
	// MUST_USE_RES struct LDKFuture ChainMonitor_get_update_future(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_update_future")] public static extern long ChainMonitorGetUpdateFuture(long _this_arg);
	// void ChainMonitor_rebroadcast_pending_claims(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_rebroadcast_pending_claims")] public static extern void ChainMonitorRebroadcastPendingClaims(long _this_arg);
	// struct LDKListen ChainMonitor_as_Listen(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Listen")] public static extern long ChainMonitorAsListen(long _this_arg);
	// struct LDKConfirm ChainMonitor_as_Confirm(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Confirm")] public static extern long ChainMonitorAsConfirm(long _this_arg);
	// struct LDKWatch ChainMonitor_as_Watch(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Watch")] public static extern long ChainMonitorAsWatch(long _this_arg);
	// struct LDKEventsProvider ChainMonitor_as_EventsProvider(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_EventsProvider")] public static extern long ChainMonitorAsEventsProvider(long _this_arg);
	// void ChannelMonitorUpdate_free(struct LDKChannelMonitorUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_free")] public static extern void ChannelMonitorUpdateFree(long _this_obj);
	// uint64_t ChannelMonitorUpdate_get_update_id(const struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_get_update_id")] public static extern long ChannelMonitorUpdateGetUpdateId(long _this_ptr);
	// void ChannelMonitorUpdate_set_update_id(struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_set_update_id")] public static extern void ChannelMonitorUpdateSetUpdateId(long _this_ptr, long _val);
	// uint64_t ChannelMonitorUpdate_clone_ptr(LDKChannelMonitorUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone_ptr")] public static extern long ChannelMonitorUpdateClonePtr(long _arg);
	// struct LDKChannelMonitorUpdate ChannelMonitorUpdate_clone(const struct LDKChannelMonitorUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone")] public static extern long ChannelMonitorUpdateClone(long _orig);
	// bool ChannelMonitorUpdate_eq(const struct LDKChannelMonitorUpdate *NONNULL_PTR a, const struct LDKChannelMonitorUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_eq")] public static extern bool ChannelMonitorUpdateEq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelMonitorUpdate_write(const struct LDKChannelMonitorUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_write")] public static extern long ChannelMonitorUpdateWrite(long _obj);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ ChannelMonitorUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_read")] public static extern long ChannelMonitorUpdateRead(long _ser);
	// void MonitorEvent_free(struct LDKMonitorEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_free")] public static extern void MonitorEventFree(long _this_ptr);
	// uint64_t MonitorEvent_clone_ptr(LDKMonitorEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone_ptr")] public static extern long MonitorEventClonePtr(long _arg);
	// struct LDKMonitorEvent MonitorEvent_clone(const struct LDKMonitorEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone")] public static extern long MonitorEventClone(long _orig);
	// struct LDKMonitorEvent MonitorEvent_htlcevent(struct LDKHTLCUpdate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_htlcevent")] public static extern long MonitorEventHtlcevent(long _a);
	// struct LDKMonitorEvent MonitorEvent_holder_force_closed(struct LDKOutPoint a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_holder_force_closed")] public static extern long MonitorEventHolderForceClosed(long _a);
	// struct LDKMonitorEvent MonitorEvent_completed(struct LDKOutPoint funding_txo, uint64_t monitor_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_completed")] public static extern long MonitorEventCompleted(long _funding_txo, long _monitor_update_id);
	// bool MonitorEvent_eq(const struct LDKMonitorEvent *NONNULL_PTR a, const struct LDKMonitorEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_eq")] public static extern bool MonitorEventEq(long _a, long _b);
	// struct LDKCVec_u8Z MonitorEvent_write(const struct LDKMonitorEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_write")] public static extern long MonitorEventWrite(long _obj);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ MonitorEvent_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_read")] public static extern long MonitorEventRead(long _ser);
	// void HTLCUpdate_free(struct LDKHTLCUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_free")] public static extern void HTLCUpdateFree(long _this_obj);
	// uint64_t HTLCUpdate_clone_ptr(LDKHTLCUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone_ptr")] public static extern long HTLCUpdateClonePtr(long _arg);
	// struct LDKHTLCUpdate HTLCUpdate_clone(const struct LDKHTLCUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone")] public static extern long HTLCUpdateClone(long _orig);
	// bool HTLCUpdate_eq(const struct LDKHTLCUpdate *NONNULL_PTR a, const struct LDKHTLCUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_eq")] public static extern bool HTLCUpdateEq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCUpdate_write(const struct LDKHTLCUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_write")] public static extern long HTLCUpdateWrite(long _obj);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ HTLCUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_read")] public static extern long HTLCUpdateRead(long _ser);
	// void Balance_free(struct LDKBalance this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_free")] public static extern void BalanceFree(long _this_ptr);
	// uint64_t Balance_clone_ptr(LDKBalance *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone_ptr")] public static extern long BalanceClonePtr(long _arg);
	// struct LDKBalance Balance_clone(const struct LDKBalance *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone")] public static extern long BalanceClone(long _orig);
	// struct LDKBalance Balance_claimable_on_channel_close(uint64_t amount_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_on_channel_close")] public static extern long BalanceClaimableOnChannelClose(long _amount_satoshis);
	// struct LDKBalance Balance_claimable_awaiting_confirmations(uint64_t amount_satoshis, uint32_t confirmation_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_awaiting_confirmations")] public static extern long BalanceClaimableAwaitingConfirmations(long _amount_satoshis, int _confirmation_height);
	// struct LDKBalance Balance_contentious_claimable(uint64_t amount_satoshis, uint32_t timeout_height, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_contentious_claimable")] public static extern long BalanceContentiousClaimable(long _amount_satoshis, int _timeout_height, long _payment_hash, long _payment_preimage);
	// struct LDKBalance Balance_maybe_timeout_claimable_htlc(uint64_t amount_satoshis, uint32_t claimable_height, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_timeout_claimable_htlc")] public static extern long BalanceMaybeTimeoutClaimableHtlc(long _amount_satoshis, int _claimable_height, long _payment_hash);
	// struct LDKBalance Balance_maybe_preimage_claimable_htlc(uint64_t amount_satoshis, uint32_t expiry_height, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_preimage_claimable_htlc")] public static extern long BalanceMaybePreimageClaimableHtlc(long _amount_satoshis, int _expiry_height, long _payment_hash);
	// struct LDKBalance Balance_counterparty_revoked_output_claimable(uint64_t amount_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_counterparty_revoked_output_claimable")] public static extern long BalanceCounterpartyRevokedOutputClaimable(long _amount_satoshis);
	// bool Balance_eq(const struct LDKBalance *NONNULL_PTR a, const struct LDKBalance *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_eq")] public static extern bool BalanceEq(long _a, long _b);
	// MUST_USE_RES uint64_t Balance_claimable_amount_satoshis(const struct LDKBalance *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_amount_satoshis")] public static extern long BalanceClaimableAmountSatoshis(long _this_arg);
	// void ChannelMonitor_free(struct LDKChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_free")] public static extern void ChannelMonitorFree(long _this_obj);
	// uint64_t ChannelMonitor_clone_ptr(LDKChannelMonitor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone_ptr")] public static extern long ChannelMonitorClonePtr(long _arg);
	// struct LDKChannelMonitor ChannelMonitor_clone(const struct LDKChannelMonitor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone")] public static extern long ChannelMonitorClone(long _orig);
	// struct LDKCVec_u8Z ChannelMonitor_write(const struct LDKChannelMonitor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_write")] public static extern long ChannelMonitorWrite(long _obj);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelMonitor_update_monitor(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKChannelMonitorUpdate *NONNULL_PTR updates, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, const struct LDKFeeEstimator *NONNULL_PTR fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_update_monitor")] public static extern long ChannelMonitorUpdateMonitor(long _this_arg, long _updates, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES uint64_t ChannelMonitor_get_latest_update_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_latest_update_id")] public static extern long ChannelMonitorGetLatestUpdateId(long _this_arg);
	// MUST_USE_RES struct LDKC2Tuple_OutPointCVec_u8ZZ ChannelMonitor_get_funding_txo(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_funding_txo")] public static extern long ChannelMonitorGetFundingTxo(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ ChannelMonitor_get_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_outputs_to_watch")] public static extern long ChannelMonitorGetOutputsToWatch(long _this_arg);
	// void ChannelMonitor_load_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKFilter *NONNULL_PTR filter, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_load_outputs_to_watch")] public static extern void ChannelMonitorLoadOutputsToWatch(long _this_arg, long _filter, long _logger);
	// MUST_USE_RES struct LDKCVec_MonitorEventZ ChannelMonitor_get_and_clear_pending_monitor_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_and_clear_pending_monitor_events")] public static extern long ChannelMonitorGetAndClearPendingMonitorEvents(long _this_arg);
	// void ChannelMonitor_process_pending_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKEventHandler *NONNULL_PTR handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_process_pending_events")] public static extern void ChannelMonitorProcessPendingEvents(long _this_arg, long _handler);
	// MUST_USE_RES struct LDKCommitmentTransaction ChannelMonitor_initial_counterparty_commitment_tx(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_initial_counterparty_commitment_tx")] public static extern long ChannelMonitorInitialCounterpartyCommitmentTx(long _this_arg);
	// MUST_USE_RES struct LDKCVec_CommitmentTransactionZ ChannelMonitor_counterparty_commitment_txs_from_update(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKChannelMonitorUpdate *NONNULL_PTR update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_counterparty_commitment_txs_from_update")] public static extern long ChannelMonitorCounterpartyCommitmentTxsFromUpdate(long _this_arg, long _update);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ ChannelMonitor_sign_to_local_justice_tx(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input_idx, uint64_t value, uint64_t commitment_number);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_sign_to_local_justice_tx")] public static extern long ChannelMonitorSignToLocalJusticeTx(long _this_arg, long _justice_tx, long _input_idx, long _value, long _commitment_number);
	// MUST_USE_RES struct LDKPublicKey ChannelMonitor_get_counterparty_node_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_counterparty_node_id")] public static extern long ChannelMonitorGetCounterpartyNodeId(long _this_arg);
	// MUST_USE_RES struct LDKCVec_TransactionZ ChannelMonitor_get_latest_holder_commitment_txn(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_latest_holder_commitment_txn")] public static extern long ChannelMonitorGetLatestHolderCommitmentTxn(long _this_arg, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_block_connected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_connected")] public static extern long ChannelMonitorBlockConnected(long _this_arg, long _header, long _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_block_disconnected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_disconnected")] public static extern void ChannelMonitorBlockDisconnected(long _this_arg, long _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_transactions_confirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transactions_confirmed")] public static extern long ChannelMonitorTransactionsConfirmed(long _this_arg, long _header, long _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_transaction_unconfirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transaction_unconfirmed")] public static extern void ChannelMonitorTransactionUnconfirmed(long _this_arg, long _txid, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_best_block_updated(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_best_block_updated")] public static extern long ChannelMonitorBestBlockUpdated(long _this_arg, long _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ ChannelMonitor_get_relevant_txids(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_relevant_txids")] public static extern long ChannelMonitorGetRelevantTxids(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelMonitor_current_best_block(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_current_best_block")] public static extern long ChannelMonitorCurrentBestBlock(long _this_arg);
	// void ChannelMonitor_rebroadcast_pending_claims(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_rebroadcast_pending_claims")] public static extern void ChannelMonitorRebroadcastPendingClaims(long _this_arg, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_SpendableOutputDescriptorZ ChannelMonitor_get_spendable_outputs(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKTransaction tx, uint32_t confirmation_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_spendable_outputs")] public static extern long ChannelMonitorGetSpendableOutputs(long _this_arg, long _tx, int _confirmation_height);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChannelMonitor_get_claimable_balances(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_claimable_balances")] public static extern long ChannelMonitorGetClaimableBalances(long _this_arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_read(struct LDKu8slice ser, const struct LDKEntropySource *NONNULL_PTR arg_a, const struct LDKSignerProvider *NONNULL_PTR arg_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_read")] public static extern long C2TupleThirtyTwoBytesChannelMonitorZRead(long _ser, long _arg_a, long _arg_b);
	// void OutPoint_free(struct LDKOutPoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_free")] public static extern void OutPointFree(long _this_obj);
	// const uint8_t (*OutPoint_get_txid(const struct LDKOutPoint *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_txid")] public static extern long OutPointGetTxid(long _this_ptr);
	// void OutPoint_set_txid(struct LDKOutPoint *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_txid")] public static extern void OutPointSetTxid(long _this_ptr, long _val);
	// uint16_t OutPoint_get_index(const struct LDKOutPoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_index")] public static extern short OutPointGetIndex(long _this_ptr);
	// void OutPoint_set_index(struct LDKOutPoint *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_index")] public static extern void OutPointSetIndex(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKOutPoint OutPoint_new(struct LDKThirtyTwoBytes txid_arg, uint16_t index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_new")] public static extern long OutPointNew(long _txid_arg, short _index_arg);
	// uint64_t OutPoint_clone_ptr(LDKOutPoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone_ptr")] public static extern long OutPointClonePtr(long _arg);
	// struct LDKOutPoint OutPoint_clone(const struct LDKOutPoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone")] public static extern long OutPointClone(long _orig);
	// bool OutPoint_eq(const struct LDKOutPoint *NONNULL_PTR a, const struct LDKOutPoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_eq")] public static extern bool OutPointEq(long _a, long _b);
	// uint64_t OutPoint_hash(const struct LDKOutPoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_hash")] public static extern long OutPointHash(long _o);
	// MUST_USE_RES struct LDKThirtyTwoBytes OutPoint_to_channel_id(const struct LDKOutPoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_to_channel_id")] public static extern long OutPointToChannelId(long _this_arg);
	// struct LDKCVec_u8Z OutPoint_write(const struct LDKOutPoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_write")] public static extern long OutPointWrite(long _obj);
	// struct LDKCResult_OutPointDecodeErrorZ OutPoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_read")] public static extern long OutPointRead(long _ser);
	// void InboundHTLCErr_free(struct LDKInboundHTLCErr this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_free")] public static extern void InboundHTLCErrFree(long _this_obj);
	// uint16_t InboundHTLCErr_get_err_code(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_err_code")] public static extern short InboundHTLCErrGetErrCode(long _this_ptr);
	// void InboundHTLCErr_set_err_code(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_err_code")] public static extern void InboundHTLCErrSetErrCode(long _this_ptr, short _val);
	// struct LDKCVec_u8Z InboundHTLCErr_get_err_data(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_err_data")] public static extern long InboundHTLCErrGetErrData(long _this_ptr);
	// void InboundHTLCErr_set_err_data(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_err_data")] public static extern void InboundHTLCErrSetErrData(long _this_ptr, long _val);
	// struct LDKStr InboundHTLCErr_get_msg(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_msg")] public static extern long InboundHTLCErrGetMsg(long _this_ptr);
	// void InboundHTLCErr_set_msg(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_msg")] public static extern void InboundHTLCErrSetMsg(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInboundHTLCErr InboundHTLCErr_new(uint16_t err_code_arg, struct LDKCVec_u8Z err_data_arg, struct LDKStr msg_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_new")] public static extern long InboundHTLCErrNew(short _err_code_arg, long _err_data_arg, long _msg_arg);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ peel_payment_onion(const struct LDKUpdateAddHTLC *NONNULL_PTR msg, const struct LDKNodeSigner *NONNULL_PTR node_signer, const struct LDKLogger *NONNULL_PTR logger, uint32_t cur_height, bool accept_mpp_keysend, bool allow_skimmed_fees);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_peel_payment_onion")] public static extern long PeelPaymentOnion(long _msg, long _node_signer, long _logger, int _cur_height, bool _accept_mpp_keysend, bool _allow_skimmed_fees);
	// void PendingHTLCRouting_free(struct LDKPendingHTLCRouting this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_free")] public static extern void PendingHTLCRoutingFree(long _this_ptr);
	// uint64_t PendingHTLCRouting_clone_ptr(LDKPendingHTLCRouting *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_clone_ptr")] public static extern long PendingHTLCRoutingClonePtr(long _arg);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_clone(const struct LDKPendingHTLCRouting *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_clone")] public static extern long PendingHTLCRoutingClone(long _orig);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_forward(struct LDKOnionPacket onion_packet, uint64_t short_channel_id, struct LDKBlindedForward blinded);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_forward")] public static extern long PendingHTLCRoutingForward(long _onion_packet, long _short_channel_id, long _blinded);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_receive(struct LDKFinalOnionHopData payment_data, struct LDKCOption_CVec_u8ZZ payment_metadata, uint32_t incoming_cltv_expiry, struct LDKThirtyTwoBytes phantom_shared_secret, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs, bool requires_blinded_error);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_receive")] public static extern long PendingHTLCRoutingReceive(long _payment_data, long _payment_metadata, int _incoming_cltv_expiry, long _phantom_shared_secret, long _custom_tlvs, bool _requires_blinded_error);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_receive_keysend(struct LDKFinalOnionHopData payment_data, struct LDKThirtyTwoBytes payment_preimage, struct LDKCOption_CVec_u8ZZ payment_metadata, uint32_t incoming_cltv_expiry, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_receive_keysend")] public static extern long PendingHTLCRoutingReceiveKeysend(long _payment_data, long _payment_preimage, long _payment_metadata, int _incoming_cltv_expiry, long _custom_tlvs);
	// void BlindedForward_free(struct LDKBlindedForward this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_free")] public static extern void BlindedForwardFree(long _this_obj);
	// struct LDKPublicKey BlindedForward_get_inbound_blinding_point(const struct LDKBlindedForward *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_get_inbound_blinding_point")] public static extern long BlindedForwardGetInboundBlindingPoint(long _this_ptr);
	// void BlindedForward_set_inbound_blinding_point(struct LDKBlindedForward *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_set_inbound_blinding_point")] public static extern void BlindedForwardSetInboundBlindingPoint(long _this_ptr, long _val);
	// enum LDKBlindedFailure BlindedForward_get_failure(const struct LDKBlindedForward *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_get_failure")] public static extern BlindedFailure BlindedForwardGetFailure(long _this_ptr);
	// void BlindedForward_set_failure(struct LDKBlindedForward *NONNULL_PTR this_ptr, enum LDKBlindedFailure val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_set_failure")] public static extern void BlindedForwardSetFailure(long _this_ptr, BlindedFailure _val);
	// MUST_USE_RES struct LDKBlindedForward BlindedForward_new(struct LDKPublicKey inbound_blinding_point_arg, enum LDKBlindedFailure failure_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_new")] public static extern long BlindedForwardNew(long _inbound_blinding_point_arg, BlindedFailure _failure_arg);
	// uint64_t BlindedForward_clone_ptr(LDKBlindedForward *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_clone_ptr")] public static extern long BlindedForwardClonePtr(long _arg);
	// struct LDKBlindedForward BlindedForward_clone(const struct LDKBlindedForward *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_clone")] public static extern long BlindedForwardClone(long _orig);
	// uint64_t BlindedForward_hash(const struct LDKBlindedForward *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_hash")] public static extern long BlindedForwardHash(long _o);
	// bool BlindedForward_eq(const struct LDKBlindedForward *NONNULL_PTR a, const struct LDKBlindedForward *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_eq")] public static extern bool BlindedForwardEq(long _a, long _b);
	// void PendingHTLCInfo_free(struct LDKPendingHTLCInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_free")] public static extern void PendingHTLCInfoFree(long _this_obj);
	// struct LDKPendingHTLCRouting PendingHTLCInfo_get_routing(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_routing")] public static extern long PendingHTLCInfoGetRouting(long _this_ptr);
	// void PendingHTLCInfo_set_routing(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKPendingHTLCRouting val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_routing")] public static extern void PendingHTLCInfoSetRouting(long _this_ptr, long _val);
	// const uint8_t (*PendingHTLCInfo_get_incoming_shared_secret(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_incoming_shared_secret")] public static extern long PendingHTLCInfoGetIncomingSharedSecret(long _this_ptr);
	// void PendingHTLCInfo_set_incoming_shared_secret(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_incoming_shared_secret")] public static extern void PendingHTLCInfoSetIncomingSharedSecret(long _this_ptr, long _val);
	// const uint8_t (*PendingHTLCInfo_get_payment_hash(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_payment_hash")] public static extern long PendingHTLCInfoGetPaymentHash(long _this_ptr);
	// void PendingHTLCInfo_set_payment_hash(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_payment_hash")] public static extern void PendingHTLCInfoSetPaymentHash(long _this_ptr, long _val);
	// struct LDKCOption_u64Z PendingHTLCInfo_get_incoming_amt_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_incoming_amt_msat")] public static extern long PendingHTLCInfoGetIncomingAmtMsat(long _this_ptr);
	// void PendingHTLCInfo_set_incoming_amt_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_incoming_amt_msat")] public static extern void PendingHTLCInfoSetIncomingAmtMsat(long _this_ptr, long _val);
	// uint64_t PendingHTLCInfo_get_outgoing_amt_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_outgoing_amt_msat")] public static extern long PendingHTLCInfoGetOutgoingAmtMsat(long _this_ptr);
	// void PendingHTLCInfo_set_outgoing_amt_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_outgoing_amt_msat")] public static extern void PendingHTLCInfoSetOutgoingAmtMsat(long _this_ptr, long _val);
	// uint32_t PendingHTLCInfo_get_outgoing_cltv_value(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_outgoing_cltv_value")] public static extern int PendingHTLCInfoGetOutgoingCltvValue(long _this_ptr);
	// void PendingHTLCInfo_set_outgoing_cltv_value(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_outgoing_cltv_value")] public static extern void PendingHTLCInfoSetOutgoingCltvValue(long _this_ptr, int _val);
	// struct LDKCOption_u64Z PendingHTLCInfo_get_skimmed_fee_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_skimmed_fee_msat")] public static extern long PendingHTLCInfoGetSkimmedFeeMsat(long _this_ptr);
	// void PendingHTLCInfo_set_skimmed_fee_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_skimmed_fee_msat")] public static extern void PendingHTLCInfoSetSkimmedFeeMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPendingHTLCInfo PendingHTLCInfo_new(struct LDKPendingHTLCRouting routing_arg, struct LDKThirtyTwoBytes incoming_shared_secret_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_u64Z incoming_amt_msat_arg, uint64_t outgoing_amt_msat_arg, uint32_t outgoing_cltv_value_arg, struct LDKCOption_u64Z skimmed_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_new")] public static extern long PendingHTLCInfoNew(long _routing_arg, long _incoming_shared_secret_arg, long _payment_hash_arg, long _incoming_amt_msat_arg, long _outgoing_amt_msat_arg, int _outgoing_cltv_value_arg, long _skimmed_fee_msat_arg);
	// uint64_t PendingHTLCInfo_clone_ptr(LDKPendingHTLCInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_clone_ptr")] public static extern long PendingHTLCInfoClonePtr(long _arg);
	// struct LDKPendingHTLCInfo PendingHTLCInfo_clone(const struct LDKPendingHTLCInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_clone")] public static extern long PendingHTLCInfoClone(long _orig);
	// enum LDKBlindedFailure BlindedFailure_clone(const enum LDKBlindedFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_clone")] public static extern BlindedFailure BlindedFailureClone(long _orig);
	// enum LDKBlindedFailure BlindedFailure_from_introduction_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_from_introduction_node")] public static extern BlindedFailure BlindedFailureFromIntroductionNode();
	// enum LDKBlindedFailure BlindedFailure_from_blinded_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_from_blinded_node")] public static extern BlindedFailure BlindedFailureFromBlindedNode();
	// uint64_t BlindedFailure_hash(const enum LDKBlindedFailure *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_hash")] public static extern long BlindedFailureHash(long _o);
	// bool BlindedFailure_eq(const enum LDKBlindedFailure *NONNULL_PTR a, const enum LDKBlindedFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_eq")] public static extern bool BlindedFailureEq(long _a, long _b);
	// void FailureCode_free(struct LDKFailureCode this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_free")] public static extern void FailureCodeFree(long _this_ptr);
	// uint64_t FailureCode_clone_ptr(LDKFailureCode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_clone_ptr")] public static extern long FailureCodeClonePtr(long _arg);
	// struct LDKFailureCode FailureCode_clone(const struct LDKFailureCode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_clone")] public static extern long FailureCodeClone(long _orig);
	// struct LDKFailureCode FailureCode_temporary_node_failure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_temporary_node_failure")] public static extern long FailureCodeTemporaryNodeFailure();
	// struct LDKFailureCode FailureCode_required_node_feature_missing(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_required_node_feature_missing")] public static extern long FailureCodeRequiredNodeFeatureMissing();
	// struct LDKFailureCode FailureCode_incorrect_or_unknown_payment_details(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_incorrect_or_unknown_payment_details")] public static extern long FailureCodeIncorrectOrUnknownPaymentDetails();
	// struct LDKFailureCode FailureCode_invalid_onion_payload(struct LDKCOption_C2Tuple_u64u16ZZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_invalid_onion_payload")] public static extern long FailureCodeInvalidOnionPayload(long _a);
	// void ChannelManager_free(struct LDKChannelManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_free")] public static extern void ChannelManagerFree(long _this_obj);
	// void ChainParameters_free(struct LDKChainParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_free")] public static extern void ChainParametersFree(long _this_obj);
	// enum LDKNetwork ChainParameters_get_network(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_network")] public static extern Network ChainParametersGetNetwork(long _this_ptr);
	// void ChainParameters_set_network(struct LDKChainParameters *NONNULL_PTR this_ptr, enum LDKNetwork val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_network")] public static extern void ChainParametersSetNetwork(long _this_ptr, Network _val);
	// struct LDKBestBlock ChainParameters_get_best_block(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_best_block")] public static extern long ChainParametersGetBestBlock(long _this_ptr);
	// void ChainParameters_set_best_block(struct LDKChainParameters *NONNULL_PTR this_ptr, struct LDKBestBlock val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_best_block")] public static extern void ChainParametersSetBestBlock(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChainParameters ChainParameters_new(enum LDKNetwork network_arg, struct LDKBestBlock best_block_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_new")] public static extern long ChainParametersNew(Network _network_arg, long _best_block_arg);
	// uint64_t ChainParameters_clone_ptr(LDKChainParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone_ptr")] public static extern long ChainParametersClonePtr(long _arg);
	// struct LDKChainParameters ChainParameters_clone(const struct LDKChainParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone")] public static extern long ChainParametersClone(long _orig);
	// void CounterpartyForwardingInfo_free(struct LDKCounterpartyForwardingInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_free")] public static extern void CounterpartyForwardingInfoFree(long _this_obj);
	// uint32_t CounterpartyForwardingInfo_get_fee_base_msat(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_base_msat")] public static extern int CounterpartyForwardingInfoGetFeeBaseMsat(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_base_msat(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_base_msat")] public static extern void CounterpartyForwardingInfoSetFeeBaseMsat(long _this_ptr, int _val);
	// uint32_t CounterpartyForwardingInfo_get_fee_proportional_millionths(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_proportional_millionths")] public static extern int CounterpartyForwardingInfoGetFeeProportionalMillionths(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_proportional_millionths(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_proportional_millionths")] public static extern void CounterpartyForwardingInfoSetFeeProportionalMillionths(long _this_ptr, int _val);
	// uint16_t CounterpartyForwardingInfo_get_cltv_expiry_delta(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_cltv_expiry_delta")] public static extern short CounterpartyForwardingInfoGetCltvExpiryDelta(long _this_ptr);
	// void CounterpartyForwardingInfo_set_cltv_expiry_delta(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_cltv_expiry_delta")] public static extern void CounterpartyForwardingInfoSetCltvExpiryDelta(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_new(uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, uint16_t cltv_expiry_delta_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_new")] public static extern long CounterpartyForwardingInfoNew(int _fee_base_msat_arg, int _fee_proportional_millionths_arg, short _cltv_expiry_delta_arg);
	// uint64_t CounterpartyForwardingInfo_clone_ptr(LDKCounterpartyForwardingInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone_ptr")] public static extern long CounterpartyForwardingInfoClonePtr(long _arg);
	// struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_clone(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone")] public static extern long CounterpartyForwardingInfoClone(long _orig);
	// void ChannelCounterparty_free(struct LDKChannelCounterparty this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_free")] public static extern void ChannelCounterpartyFree(long _this_obj);
	// struct LDKPublicKey ChannelCounterparty_get_node_id(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_node_id")] public static extern long ChannelCounterpartyGetNodeId(long _this_ptr);
	// void ChannelCounterparty_set_node_id(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_node_id")] public static extern void ChannelCounterpartySetNodeId(long _this_ptr, long _val);
	// struct LDKInitFeatures ChannelCounterparty_get_features(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_features")] public static extern long ChannelCounterpartyGetFeatures(long _this_ptr);
	// void ChannelCounterparty_set_features(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_features")] public static extern void ChannelCounterpartySetFeatures(long _this_ptr, long _val);
	// uint64_t ChannelCounterparty_get_unspendable_punishment_reserve(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_unspendable_punishment_reserve")] public static extern long ChannelCounterpartyGetUnspendablePunishmentReserve(long _this_ptr);
	// void ChannelCounterparty_set_unspendable_punishment_reserve(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_unspendable_punishment_reserve")] public static extern void ChannelCounterpartySetUnspendablePunishmentReserve(long _this_ptr, long _val);
	// struct LDKCounterpartyForwardingInfo ChannelCounterparty_get_forwarding_info(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_forwarding_info")] public static extern long ChannelCounterpartyGetForwardingInfo(long _this_ptr);
	// void ChannelCounterparty_set_forwarding_info(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCounterpartyForwardingInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_forwarding_info")] public static extern void ChannelCounterpartySetForwardingInfo(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_minimum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_minimum_msat")] public static extern long ChannelCounterpartyGetOutboundHtlcMinimumMsat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_minimum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_minimum_msat")] public static extern void ChannelCounterpartySetOutboundHtlcMinimumMsat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_maximum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_maximum_msat")] public static extern long ChannelCounterpartyGetOutboundHtlcMaximumMsat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_maximum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_maximum_msat")] public static extern void ChannelCounterpartySetOutboundHtlcMaximumMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelCounterparty ChannelCounterparty_new(struct LDKPublicKey node_id_arg, struct LDKInitFeatures features_arg, uint64_t unspendable_punishment_reserve_arg, struct LDKCounterpartyForwardingInfo forwarding_info_arg, struct LDKCOption_u64Z outbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z outbound_htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_new")] public static extern long ChannelCounterpartyNew(long _node_id_arg, long _features_arg, long _unspendable_punishment_reserve_arg, long _forwarding_info_arg, long _outbound_htlc_minimum_msat_arg, long _outbound_htlc_maximum_msat_arg);
	// uint64_t ChannelCounterparty_clone_ptr(LDKChannelCounterparty *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone_ptr")] public static extern long ChannelCounterpartyClonePtr(long _arg);
	// struct LDKChannelCounterparty ChannelCounterparty_clone(const struct LDKChannelCounterparty *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone")] public static extern long ChannelCounterpartyClone(long _orig);
	// void ChannelDetails_free(struct LDKChannelDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_free")] public static extern void ChannelDetailsFree(long _this_obj);
	// const uint8_t (*ChannelDetails_get_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_id")] public static extern long ChannelDetailsGetChannelId(long _this_ptr);
	// void ChannelDetails_set_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_id")] public static extern void ChannelDetailsSetChannelId(long _this_ptr, long _val);
	// struct LDKChannelCounterparty ChannelDetails_get_counterparty(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_counterparty")] public static extern long ChannelDetailsGetCounterparty(long _this_ptr);
	// void ChannelDetails_set_counterparty(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelCounterparty val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_counterparty")] public static extern void ChannelDetailsSetCounterparty(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelDetails_get_funding_txo(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_funding_txo")] public static extern long ChannelDetailsGetFundingTxo(long _this_ptr);
	// void ChannelDetails_set_funding_txo(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_funding_txo")] public static extern void ChannelDetailsSetFundingTxo(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures ChannelDetails_get_channel_type(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_type")] public static extern long ChannelDetailsGetChannelType(long _this_ptr);
	// void ChannelDetails_set_channel_type(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_type")] public static extern void ChannelDetailsSetChannelType(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_short_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_short_channel_id")] public static extern long ChannelDetailsGetShortChannelId(long _this_ptr);
	// void ChannelDetails_set_short_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_short_channel_id")] public static extern void ChannelDetailsSetShortChannelId(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_outbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_scid_alias")] public static extern long ChannelDetailsGetOutboundScidAlias(long _this_ptr);
	// void ChannelDetails_set_outbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_scid_alias")] public static extern void ChannelDetailsSetOutboundScidAlias(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_scid_alias")] public static extern long ChannelDetailsGetInboundScidAlias(long _this_ptr);
	// void ChannelDetails_set_inbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_scid_alias")] public static extern void ChannelDetailsSetInboundScidAlias(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_channel_value_satoshis(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_value_satoshis")] public static extern long ChannelDetailsGetChannelValueSatoshis(long _this_ptr);
	// void ChannelDetails_set_channel_value_satoshis(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_value_satoshis")] public static extern void ChannelDetailsSetChannelValueSatoshis(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_unspendable_punishment_reserve(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_unspendable_punishment_reserve")] public static extern long ChannelDetailsGetUnspendablePunishmentReserve(long _this_ptr);
	// void ChannelDetails_set_unspendable_punishment_reserve(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_unspendable_punishment_reserve")] public static extern void ChannelDetailsSetUnspendablePunishmentReserve(long _this_ptr, long _val);
	// struct LDKU128 ChannelDetails_get_user_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_user_channel_id")] public static extern long ChannelDetailsGetUserChannelId(long _this_ptr);
	// void ChannelDetails_set_user_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_user_channel_id")] public static extern void ChannelDetailsSetUserChannelId(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_feerate_sat_per_1000_weight(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_feerate_sat_per_1000_weight")] public static extern long ChannelDetailsGetFeerateSatPer1000Weight(long _this_ptr);
	// void ChannelDetails_set_feerate_sat_per_1000_weight(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_feerate_sat_per_1000_weight")] public static extern void ChannelDetailsSetFeerateSatPer1000Weight(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_balance_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_balance_msat")] public static extern long ChannelDetailsGetBalanceMsat(long _this_ptr);
	// void ChannelDetails_set_balance_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_balance_msat")] public static extern void ChannelDetailsSetBalanceMsat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_outbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_capacity_msat")] public static extern long ChannelDetailsGetOutboundCapacityMsat(long _this_ptr);
	// void ChannelDetails_set_outbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_capacity_msat")] public static extern void ChannelDetailsSetOutboundCapacityMsat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_next_outbound_htlc_limit_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_next_outbound_htlc_limit_msat")] public static extern long ChannelDetailsGetNextOutboundHtlcLimitMsat(long _this_ptr);
	// void ChannelDetails_set_next_outbound_htlc_limit_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_next_outbound_htlc_limit_msat")] public static extern void ChannelDetailsSetNextOutboundHtlcLimitMsat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_next_outbound_htlc_minimum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_next_outbound_htlc_minimum_msat")] public static extern long ChannelDetailsGetNextOutboundHtlcMinimumMsat(long _this_ptr);
	// void ChannelDetails_set_next_outbound_htlc_minimum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_next_outbound_htlc_minimum_msat")] public static extern void ChannelDetailsSetNextOutboundHtlcMinimumMsat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_inbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_capacity_msat")] public static extern long ChannelDetailsGetInboundCapacityMsat(long _this_ptr);
	// void ChannelDetails_set_inbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_capacity_msat")] public static extern void ChannelDetailsSetInboundCapacityMsat(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations_required(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations_required")] public static extern long ChannelDetailsGetConfirmationsRequired(long _this_ptr);
	// void ChannelDetails_set_confirmations_required(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations_required")] public static extern void ChannelDetailsSetConfirmationsRequired(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations")] public static extern long ChannelDetailsGetConfirmations(long _this_ptr);
	// void ChannelDetails_set_confirmations(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations")] public static extern void ChannelDetailsSetConfirmations(long _this_ptr, long _val);
	// struct LDKCOption_u16Z ChannelDetails_get_force_close_spend_delay(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_force_close_spend_delay")] public static extern long ChannelDetailsGetForceCloseSpendDelay(long _this_ptr);
	// void ChannelDetails_set_force_close_spend_delay(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_force_close_spend_delay")] public static extern void ChannelDetailsSetForceCloseSpendDelay(long _this_ptr, long _val);
	// bool ChannelDetails_get_is_outbound(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_outbound")] public static extern bool ChannelDetailsGetIsOutbound(long _this_ptr);
	// void ChannelDetails_set_is_outbound(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_outbound")] public static extern void ChannelDetailsSetIsOutbound(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_channel_ready(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_channel_ready")] public static extern bool ChannelDetailsGetIsChannelReady(long _this_ptr);
	// void ChannelDetails_set_is_channel_ready(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_channel_ready")] public static extern void ChannelDetailsSetIsChannelReady(long _this_ptr, bool _val);
	// struct LDKCOption_ChannelShutdownStateZ ChannelDetails_get_channel_shutdown_state(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_shutdown_state")] public static extern long ChannelDetailsGetChannelShutdownState(long _this_ptr);
	// void ChannelDetails_set_channel_shutdown_state(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_ChannelShutdownStateZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_shutdown_state")] public static extern void ChannelDetailsSetChannelShutdownState(long _this_ptr, long _val);
	// bool ChannelDetails_get_is_usable(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_usable")] public static extern bool ChannelDetailsGetIsUsable(long _this_ptr);
	// void ChannelDetails_set_is_usable(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_usable")] public static extern void ChannelDetailsSetIsUsable(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_public(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_public")] public static extern bool ChannelDetailsGetIsPublic(long _this_ptr);
	// void ChannelDetails_set_is_public(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_public")] public static extern void ChannelDetailsSetIsPublic(long _this_ptr, bool _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_minimum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_minimum_msat")] public static extern long ChannelDetailsGetInboundHtlcMinimumMsat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_minimum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_minimum_msat")] public static extern void ChannelDetailsSetInboundHtlcMinimumMsat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_maximum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_maximum_msat")] public static extern long ChannelDetailsGetInboundHtlcMaximumMsat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_maximum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_maximum_msat")] public static extern void ChannelDetailsSetInboundHtlcMaximumMsat(long _this_ptr, long _val);
	// struct LDKChannelConfig ChannelDetails_get_config(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_config")] public static extern long ChannelDetailsGetConfig(long _this_ptr);
	// void ChannelDetails_set_config(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_config")] public static extern void ChannelDetailsSetConfig(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelDetails ChannelDetails_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKChannelCounterparty counterparty_arg, struct LDKOutPoint funding_txo_arg, struct LDKChannelTypeFeatures channel_type_arg, struct LDKCOption_u64Z short_channel_id_arg, struct LDKCOption_u64Z outbound_scid_alias_arg, struct LDKCOption_u64Z inbound_scid_alias_arg, uint64_t channel_value_satoshis_arg, struct LDKCOption_u64Z unspendable_punishment_reserve_arg, struct LDKU128 user_channel_id_arg, struct LDKCOption_u32Z feerate_sat_per_1000_weight_arg, uint64_t balance_msat_arg, uint64_t outbound_capacity_msat_arg, uint64_t next_outbound_htlc_limit_msat_arg, uint64_t next_outbound_htlc_minimum_msat_arg, uint64_t inbound_capacity_msat_arg, struct LDKCOption_u32Z confirmations_required_arg, struct LDKCOption_u32Z confirmations_arg, struct LDKCOption_u16Z force_close_spend_delay_arg, bool is_outbound_arg, bool is_channel_ready_arg, struct LDKCOption_ChannelShutdownStateZ channel_shutdown_state_arg, bool is_usable_arg, bool is_public_arg, struct LDKCOption_u64Z inbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z inbound_htlc_maximum_msat_arg, struct LDKChannelConfig config_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_new")] public static extern long ChannelDetailsNew(long _channel_id_arg, long _counterparty_arg, long _funding_txo_arg, long _channel_type_arg, long _short_channel_id_arg, long _outbound_scid_alias_arg, long _inbound_scid_alias_arg, long _channel_value_satoshis_arg, long _unspendable_punishment_reserve_arg, long _user_channel_id_arg, long _feerate_sat_per_1000_weight_arg, long _balance_msat_arg, long _outbound_capacity_msat_arg, long _next_outbound_htlc_limit_msat_arg, long _next_outbound_htlc_minimum_msat_arg, long _inbound_capacity_msat_arg, long _confirmations_required_arg, long _confirmations_arg, long _force_close_spend_delay_arg, bool _is_outbound_arg, bool _is_channel_ready_arg, long _channel_shutdown_state_arg, bool _is_usable_arg, bool _is_public_arg, long _inbound_htlc_minimum_msat_arg, long _inbound_htlc_maximum_msat_arg, long _config_arg);
	// uint64_t ChannelDetails_clone_ptr(LDKChannelDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone_ptr")] public static extern long ChannelDetailsClonePtr(long _arg);
	// struct LDKChannelDetails ChannelDetails_clone(const struct LDKChannelDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone")] public static extern long ChannelDetailsClone(long _orig);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_inbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_payment_scid")] public static extern long ChannelDetailsGetInboundPaymentScid(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_outbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_payment_scid")] public static extern long ChannelDetailsGetOutboundPaymentScid(long _this_arg);
	// enum LDKChannelShutdownState ChannelShutdownState_clone(const enum LDKChannelShutdownState *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_clone")] public static extern ChannelShutdownState ChannelShutdownStateClone(long _orig);
	// enum LDKChannelShutdownState ChannelShutdownState_not_shutting_down(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_not_shutting_down")] public static extern ChannelShutdownState ChannelShutdownStateNotShuttingDown();
	// enum LDKChannelShutdownState ChannelShutdownState_shutdown_initiated(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_shutdown_initiated")] public static extern ChannelShutdownState ChannelShutdownStateShutdownInitiated();
	// enum LDKChannelShutdownState ChannelShutdownState_resolving_htlcs(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_resolving_htlcs")] public static extern ChannelShutdownState ChannelShutdownStateResolvingHtlcs();
	// enum LDKChannelShutdownState ChannelShutdownState_negotiating_closing_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_negotiating_closing_fee")] public static extern ChannelShutdownState ChannelShutdownStateNegotiatingClosingFee();
	// enum LDKChannelShutdownState ChannelShutdownState_shutdown_complete(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_shutdown_complete")] public static extern ChannelShutdownState ChannelShutdownStateShutdownComplete();
	// bool ChannelShutdownState_eq(const enum LDKChannelShutdownState *NONNULL_PTR a, const enum LDKChannelShutdownState *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_eq")] public static extern bool ChannelShutdownStateEq(long _a, long _b);
	// void RecentPaymentDetails_free(struct LDKRecentPaymentDetails this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_free")] public static extern void RecentPaymentDetailsFree(long _this_ptr);
	// uint64_t RecentPaymentDetails_clone_ptr(LDKRecentPaymentDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_clone_ptr")] public static extern long RecentPaymentDetailsClonePtr(long _arg);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_clone(const struct LDKRecentPaymentDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_clone")] public static extern long RecentPaymentDetailsClone(long _orig);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_awaiting_invoice(struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_awaiting_invoice")] public static extern long RecentPaymentDetailsAwaitingInvoice(long _payment_id);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_pending(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, uint64_t total_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_pending")] public static extern long RecentPaymentDetailsPending(long _payment_id, long _payment_hash, long _total_msat);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_fulfilled(struct LDKThirtyTwoBytes payment_id, struct LDKCOption_ThirtyTwoBytesZ payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_fulfilled")] public static extern long RecentPaymentDetailsFulfilled(long _payment_id, long _payment_hash);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_abandoned(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_abandoned")] public static extern long RecentPaymentDetailsAbandoned(long _payment_id, long _payment_hash);
	// void PhantomRouteHints_free(struct LDKPhantomRouteHints this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_free")] public static extern void PhantomRouteHintsFree(long _this_obj);
	// struct LDKCVec_ChannelDetailsZ PhantomRouteHints_get_channels(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_channels")] public static extern long PhantomRouteHintsGetChannels(long _this_ptr);
	// void PhantomRouteHints_set_channels(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKCVec_ChannelDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_channels")] public static extern void PhantomRouteHintsSetChannels(long _this_ptr, long _val);
	// uint64_t PhantomRouteHints_get_phantom_scid(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_phantom_scid")] public static extern long PhantomRouteHintsGetPhantomScid(long _this_ptr);
	// void PhantomRouteHints_set_phantom_scid(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_phantom_scid")] public static extern void PhantomRouteHintsSetPhantomScid(long _this_ptr, long _val);
	// struct LDKPublicKey PhantomRouteHints_get_real_node_pubkey(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_real_node_pubkey")] public static extern long PhantomRouteHintsGetRealNodePubkey(long _this_ptr);
	// void PhantomRouteHints_set_real_node_pubkey(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_real_node_pubkey")] public static extern void PhantomRouteHintsSetRealNodePubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPhantomRouteHints PhantomRouteHints_new(struct LDKCVec_ChannelDetailsZ channels_arg, uint64_t phantom_scid_arg, struct LDKPublicKey real_node_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_new")] public static extern long PhantomRouteHintsNew(long _channels_arg, long _phantom_scid_arg, long _real_node_pubkey_arg);
	// uint64_t PhantomRouteHints_clone_ptr(LDKPhantomRouteHints *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone_ptr")] public static extern long PhantomRouteHintsClonePtr(long _arg);
	// struct LDKPhantomRouteHints PhantomRouteHints_clone(const struct LDKPhantomRouteHints *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone")] public static extern long PhantomRouteHintsClone(long _orig);
	// MUST_USE_RES struct LDKChannelManager ChannelManager_new(struct LDKFeeEstimator fee_est, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKRouter router, struct LDKLogger logger, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKSignerProvider signer_provider, struct LDKUserConfig config, struct LDKChainParameters params, uint32_t current_timestamp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_new")] public static extern long ChannelManagerNew(long _fee_est, long _chain_monitor, long _tx_broadcaster, long _router, long _logger, long _entropy_source, long _node_signer, long _signer_provider, long _config, long _params, int _current_timestamp);
	// MUST_USE_RES struct LDKUserConfig ChannelManager_get_current_default_configuration(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_current_default_configuration")] public static extern long ChannelManagerGetCurrentDefaultConfiguration(long _this_arg);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesAPIErrorZ ChannelManager_create_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey their_network_key, uint64_t channel_value_satoshis, uint64_t push_msat, struct LDKU128 user_channel_id, struct LDKCOption_ThirtyTwoBytesZ temporary_channel_id, struct LDKUserConfig override_config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_channel")] public static extern long ChannelManagerCreateChannel(long _this_arg, long _their_network_key, long _channel_value_satoshis, long _push_msat, long _user_channel_id, long _temporary_channel_id, long _override_config);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_channels")] public static extern long ChannelManagerListChannels(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_usable_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_usable_channels")] public static extern long ChannelManagerListUsableChannels(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_channels_with_counterparty(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_channels_with_counterparty")] public static extern long ChannelManagerListChannelsWithCounterparty(long _this_arg, long _counterparty_node_id);
	// MUST_USE_RES struct LDKCVec_RecentPaymentDetailsZ ChannelManager_list_recent_payments(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_recent_payments")] public static extern long ChannelManagerListRecentPayments(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel")] public static extern long ChannelManagerCloseChannel(long _this_arg, long _channel_id, long _counterparty_node_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel_with_feerate_and_script(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKCOption_u32Z target_feerate_sats_per_1000_weight, struct LDKShutdownScript shutdown_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel_with_feerate_and_script")] public static extern long ChannelManagerCloseChannelWithFeerateAndScript(long _this_arg, long _channel_id, long _counterparty_node_id, long _target_feerate_sats_per_1000_weight, long _shutdown_script);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_broadcasting_latest_txn")] public static extern long ChannelManagerForceCloseBroadcastingLatestTxn(long _this_arg, long _channel_id, long _counterparty_node_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*channel_id)[32], struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_without_broadcasting_txn")] public static extern long ChannelManagerForceCloseWithoutBroadcastingTxn(long _this_arg, long _channel_id, long _counterparty_node_id);
	// void ChannelManager_force_close_all_channels_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_broadcasting_latest_txn")] public static extern void ChannelManagerForceCloseAllChannelsBroadcastingLatestTxn(long _this_arg);
	// void ChannelManager_force_close_all_channels_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_without_broadcasting_txn")] public static extern void ChannelManagerForceCloseAllChannelsWithoutBroadcastingTxn(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NonePaymentSendFailureZ ChannelManager_send_payment_with_route(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment_with_route")] public static extern long ChannelManagerSendPaymentWithRoute(long _this_arg, long _route, long _payment_hash, long _recipient_onion, long _payment_id);
	// MUST_USE_RES struct LDKCResult_NoneRetryableSendFailureZ ChannelManager_send_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id, struct LDKRouteParameters route_params, struct LDKRetry retry_strategy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment")] public static extern long ChannelManagerSendPayment(long _this_arg, long _payment_hash, long _recipient_onion, long _payment_id, long _route_params, long _retry_strategy);
	// void ChannelManager_abandon_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_abandon_payment")] public static extern void ChannelManagerAbandonPayment(long _this_arg, long _payment_id);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesPaymentSendFailureZ ChannelManager_send_spontaneous_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRoute *NONNULL_PTR route, struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_payment")] public static extern long ChannelManagerSendSpontaneousPayment(long _this_arg, long _route, long _payment_preimage, long _recipient_onion, long _payment_id);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ ChannelManager_send_spontaneous_payment_with_retry(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id, struct LDKRouteParameters route_params, struct LDKRetry retry_strategy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_payment_with_retry")] public static extern long ChannelManagerSendSpontaneousPaymentWithRetry(long _this_arg, long _payment_preimage, long _recipient_onion, long _payment_id, long _route_params, long _retry_strategy);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZPaymentSendFailureZ ChannelManager_send_probe(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_probe")] public static extern long ChannelManagerSendProbe(long _this_arg, long _path);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ ChannelManager_send_spontaneous_preflight_probes(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey node_id, uint64_t amount_msat, uint32_t final_cltv_expiry_delta, struct LDKCOption_u64Z liquidity_limit_multiplier);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_preflight_probes")] public static extern long ChannelManagerSendSpontaneousPreflightProbes(long _this_arg, long _node_id, long _amount_msat, int _final_cltv_expiry_delta, long _liquidity_limit_multiplier);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ ChannelManager_send_preflight_probes(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKRouteParameters route_params, struct LDKCOption_u64Z liquidity_limit_multiplier);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_preflight_probes")] public static extern long ChannelManagerSendPreflightProbes(long _this_arg, long _route_params, long _liquidity_limit_multiplier);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKTransaction funding_transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_funding_transaction_generated")] public static extern long ChannelManagerFundingTransactionGenerated(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _funding_transaction);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_batch_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCVec_C2Tuple_ThirtyTwoBytesPublicKeyZZ temporary_channels, struct LDKTransaction funding_transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_batch_funding_transaction_generated")] public static extern long ChannelManagerBatchFundingTransactionGenerated(long _this_arg, long _temporary_channels, long _funding_transaction);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_update_partial_channel_config(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCVec_ThirtyTwoBytesZ channel_ids, const struct LDKChannelConfigUpdate *NONNULL_PTR config_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_update_partial_channel_config")] public static extern long ChannelManagerUpdatePartialChannelConfig(long _this_arg, long _counterparty_node_id, long _channel_ids, long _config_update);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_update_channel_config(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCVec_ThirtyTwoBytesZ channel_ids, const struct LDKChannelConfig *NONNULL_PTR config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_update_channel_config")] public static extern long ChannelManagerUpdateChannelConfig(long _this_arg, long _counterparty_node_id, long _channel_ids, long _config);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_forward_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id, const uint8_t (*next_hop_channel_id)[32], struct LDKPublicKey next_node_id, uint64_t amt_to_forward_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_forward_intercepted_htlc")] public static extern long ChannelManagerForwardInterceptedHtlc(long _this_arg, long _intercept_id, long _next_hop_channel_id, long _next_node_id, long _amt_to_forward_msat);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_fail_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_intercepted_htlc")] public static extern long ChannelManagerFailInterceptedHtlc(long _this_arg, long _intercept_id);
	// void ChannelManager_process_pending_htlc_forwards(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_process_pending_htlc_forwards")] public static extern void ChannelManagerProcessPendingHtlcForwards(long _this_arg);
	// void ChannelManager_timer_tick_occurred(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_timer_tick_occurred")] public static extern void ChannelManagerTimerTickOccurred(long _this_arg);
	// void ChannelManager_fail_htlc_backwards(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_htlc_backwards")] public static extern void ChannelManagerFailHtlcBackwards(long _this_arg, long _payment_hash);
	// void ChannelManager_fail_htlc_backwards_with_reason(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32], struct LDKFailureCode failure_code);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_htlc_backwards_with_reason")] public static extern void ChannelManagerFailHtlcBackwardsWithReason(long _this_arg, long _payment_hash, long _failure_code);
	// void ChannelManager_claim_funds(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_claim_funds")] public static extern void ChannelManagerClaimFunds(long _this_arg, long _payment_preimage);
	// void ChannelManager_claim_funds_with_known_custom_tlvs(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_claim_funds_with_known_custom_tlvs")] public static extern void ChannelManagerClaimFundsWithKnownCustomTlvs(long _this_arg, long _payment_preimage);
	// MUST_USE_RES struct LDKPublicKey ChannelManager_get_our_node_id(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_our_node_id")] public static extern long ChannelManagerGetOurNodeId(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel")] public static extern long ChannelManagerAcceptInboundChannel(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _user_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel_from_trusted_peer_0conf(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*temporary_channel_id)[32], struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel_from_trusted_peer_0conf")] public static extern long ChannelManagerAcceptInboundChannelFromTrustedPeer0Conf(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _user_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ ChannelManager_pay_for_offer(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKOffer *NONNULL_PTR offer, struct LDKCOption_u64Z quantity, struct LDKCOption_u64Z amount_msats, struct LDKCOption_StrZ payer_note, struct LDKThirtyTwoBytes payment_id, struct LDKRetry retry_strategy, struct LDKCOption_u64Z max_total_routing_fee_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_pay_for_offer")] public static extern long ChannelManagerPayForOffer(long _this_arg, long _offer, long _quantity, long _amount_msats, long _payer_note, long _payment_id, long _retry_strategy, long _max_total_routing_fee_msat);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ ChannelManager_request_refund_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRefund *NONNULL_PTR refund);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_request_refund_payment")] public static extern long ChannelManagerRequestRefundPayment(long _this_arg, long _refund);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ ChannelManager_create_inbound_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment")] public static extern long ChannelManagerCreateInboundPayment(long _this_arg, long _min_value_msat, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesNoneZ ChannelManager_create_inbound_payment_for_hash(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment_for_hash")] public static extern long ChannelManagerCreateInboundPaymentForHash(long _this_arg, long _payment_hash, long _min_value_msat, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesAPIErrorZ ChannelManager_get_payment_preimage(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_payment_preimage")] public static extern long ChannelManagerGetPaymentPreimage(long _this_arg, long _payment_hash, long _payment_secret);
	// MUST_USE_RES uint64_t ChannelManager_get_phantom_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_scid")] public static extern long ChannelManagerGetPhantomScid(long _this_arg);
	// MUST_USE_RES struct LDKPhantomRouteHints ChannelManager_get_phantom_route_hints(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_route_hints")] public static extern long ChannelManagerGetPhantomRouteHints(long _this_arg);
	// MUST_USE_RES uint64_t ChannelManager_get_intercept_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_intercept_scid")] public static extern long ChannelManagerGetInterceptScid(long _this_arg);
	// MUST_USE_RES struct LDKInFlightHtlcs ChannelManager_compute_inflight_htlcs(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_compute_inflight_htlcs")] public static extern long ChannelManagerComputeInflightHtlcs(long _this_arg);
	// struct LDKMessageSendEventsProvider ChannelManager_as_MessageSendEventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_MessageSendEventsProvider")] public static extern long ChannelManagerAsMessageSendEventsProvider(long _this_arg);
	// struct LDKEventsProvider ChannelManager_as_EventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_EventsProvider")] public static extern long ChannelManagerAsEventsProvider(long _this_arg);
	// struct LDKListen ChannelManager_as_Listen(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Listen")] public static extern long ChannelManagerAsListen(long _this_arg);
	// struct LDKConfirm ChannelManager_as_Confirm(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Confirm")] public static extern long ChannelManagerAsConfirm(long _this_arg);
	// MUST_USE_RES struct LDKFuture ChannelManager_get_event_or_persistence_needed_future(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_event_or_persistence_needed_future")] public static extern long ChannelManagerGetEventOrPersistenceNeededFuture(long _this_arg);
	// MUST_USE_RES bool ChannelManager_get_and_clear_needs_persistence(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_and_clear_needs_persistence")] public static extern bool ChannelManagerGetAndClearNeedsPersistence(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelManager_current_best_block(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_current_best_block")] public static extern long ChannelManagerCurrentBestBlock(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures ChannelManager_node_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_node_features")] public static extern long ChannelManagerNodeFeatures(long _this_arg);
	// MUST_USE_RES struct LDKChannelFeatures ChannelManager_channel_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_channel_features")] public static extern long ChannelManagerChannelFeatures(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelManager_channel_type_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_channel_type_features")] public static extern long ChannelManagerChannelTypeFeatures(long _this_arg);
	// MUST_USE_RES struct LDKInitFeatures ChannelManager_init_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_init_features")] public static extern long ChannelManagerInitFeatures(long _this_arg);
	// struct LDKChannelMessageHandler ChannelManager_as_ChannelMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_ChannelMessageHandler")] public static extern long ChannelManagerAsChannelMessageHandler(long _this_arg);
	// struct LDKOffersMessageHandler ChannelManager_as_OffersMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_OffersMessageHandler")] public static extern long ChannelManagerAsOffersMessageHandler(long _this_arg);
	// struct LDKInitFeatures provided_init_features(const struct LDKUserConfig *NONNULL_PTR config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_provided_init_features")] public static extern long ProvidedInitFeatures(long _config);
	// struct LDKCVec_u8Z CounterpartyForwardingInfo_write(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_write")] public static extern long CounterpartyForwardingInfoWrite(long _obj);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CounterpartyForwardingInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_read")] public static extern long CounterpartyForwardingInfoRead(long _ser);
	// struct LDKCVec_u8Z ChannelCounterparty_write(const struct LDKChannelCounterparty *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_write")] public static extern long ChannelCounterpartyWrite(long _obj);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ ChannelCounterparty_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_read")] public static extern long ChannelCounterpartyRead(long _ser);
	// struct LDKCVec_u8Z ChannelDetails_write(const struct LDKChannelDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_write")] public static extern long ChannelDetailsWrite(long _obj);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ ChannelDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_read")] public static extern long ChannelDetailsRead(long _ser);
	// struct LDKCVec_u8Z PhantomRouteHints_write(const struct LDKPhantomRouteHints *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_write")] public static extern long PhantomRouteHintsWrite(long _obj);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ PhantomRouteHints_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_read")] public static extern long PhantomRouteHintsRead(long _ser);
	// struct LDKCVec_u8Z BlindedForward_write(const struct LDKBlindedForward *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_write")] public static extern long BlindedForwardWrite(long _obj);
	// struct LDKCResult_BlindedForwardDecodeErrorZ BlindedForward_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_read")] public static extern long BlindedForwardRead(long _ser);
	// struct LDKCVec_u8Z PendingHTLCRouting_write(const struct LDKPendingHTLCRouting *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_write")] public static extern long PendingHTLCRoutingWrite(long _obj);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ PendingHTLCRouting_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_read")] public static extern long PendingHTLCRoutingRead(long _ser);
	// struct LDKCVec_u8Z PendingHTLCInfo_write(const struct LDKPendingHTLCInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_write")] public static extern long PendingHTLCInfoWrite(long _obj);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ PendingHTLCInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_read")] public static extern long PendingHTLCInfoRead(long _ser);
	// struct LDKCVec_u8Z BlindedFailure_write(const enum LDKBlindedFailure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_write")] public static extern long BlindedFailureWrite(long _obj);
	// struct LDKCResult_BlindedFailureDecodeErrorZ BlindedFailure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_read")] public static extern long BlindedFailureRead(long _ser);
	// struct LDKCVec_u8Z ChannelManager_write(const struct LDKChannelManager *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_write")] public static extern long ChannelManagerWrite(long _obj);
	// struct LDKCVec_u8Z ChannelShutdownState_write(const enum LDKChannelShutdownState *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_write")] public static extern long ChannelShutdownStateWrite(long _obj);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ ChannelShutdownState_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_read")] public static extern long ChannelShutdownStateRead(long _ser);
	// void ChannelManagerReadArgs_free(struct LDKChannelManagerReadArgs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_free")] public static extern void ChannelManagerReadArgsFree(long _this_obj);
	// const struct LDKEntropySource *ChannelManagerReadArgs_get_entropy_source(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_entropy_source")] public static extern long ChannelManagerReadArgsGetEntropySource(long _this_ptr);
	// void ChannelManagerReadArgs_set_entropy_source(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKEntropySource val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_entropy_source")] public static extern void ChannelManagerReadArgsSetEntropySource(long _this_ptr, long _val);
	// const struct LDKNodeSigner *ChannelManagerReadArgs_get_node_signer(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_node_signer")] public static extern long ChannelManagerReadArgsGetNodeSigner(long _this_ptr);
	// void ChannelManagerReadArgs_set_node_signer(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKNodeSigner val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_node_signer")] public static extern void ChannelManagerReadArgsSetNodeSigner(long _this_ptr, long _val);
	// const struct LDKSignerProvider *ChannelManagerReadArgs_get_signer_provider(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_signer_provider")] public static extern long ChannelManagerReadArgsGetSignerProvider(long _this_ptr);
	// void ChannelManagerReadArgs_set_signer_provider(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKSignerProvider val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_signer_provider")] public static extern void ChannelManagerReadArgsSetSignerProvider(long _this_ptr, long _val);
	// const struct LDKFeeEstimator *ChannelManagerReadArgs_get_fee_estimator(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_fee_estimator")] public static extern long ChannelManagerReadArgsGetFeeEstimator(long _this_ptr);
	// void ChannelManagerReadArgs_set_fee_estimator(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKFeeEstimator val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_fee_estimator")] public static extern void ChannelManagerReadArgsSetFeeEstimator(long _this_ptr, long _val);
	// const struct LDKWatch *ChannelManagerReadArgs_get_chain_monitor(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_chain_monitor")] public static extern long ChannelManagerReadArgsGetChainMonitor(long _this_ptr);
	// void ChannelManagerReadArgs_set_chain_monitor(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKWatch val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_chain_monitor")] public static extern void ChannelManagerReadArgsSetChainMonitor(long _this_ptr, long _val);
	// const struct LDKBroadcasterInterface *ChannelManagerReadArgs_get_tx_broadcaster(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_tx_broadcaster")] public static extern long ChannelManagerReadArgsGetTxBroadcaster(long _this_ptr);
	// void ChannelManagerReadArgs_set_tx_broadcaster(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKBroadcasterInterface val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_tx_broadcaster")] public static extern void ChannelManagerReadArgsSetTxBroadcaster(long _this_ptr, long _val);
	// const struct LDKRouter *ChannelManagerReadArgs_get_router(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_router")] public static extern long ChannelManagerReadArgsGetRouter(long _this_ptr);
	// void ChannelManagerReadArgs_set_router(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKRouter val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_router")] public static extern void ChannelManagerReadArgsSetRouter(long _this_ptr, long _val);
	// const struct LDKLogger *ChannelManagerReadArgs_get_logger(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_logger")] public static extern long ChannelManagerReadArgsGetLogger(long _this_ptr);
	// void ChannelManagerReadArgs_set_logger(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKLogger val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_logger")] public static extern void ChannelManagerReadArgsSetLogger(long _this_ptr, long _val);
	// struct LDKUserConfig ChannelManagerReadArgs_get_default_config(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_default_config")] public static extern long ChannelManagerReadArgsGetDefaultConfig(long _this_ptr);
	// void ChannelManagerReadArgs_set_default_config(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKUserConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_default_config")] public static extern void ChannelManagerReadArgsSetDefaultConfig(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelManagerReadArgs ChannelManagerReadArgs_new(struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKSignerProvider signer_provider, struct LDKFeeEstimator fee_estimator, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKRouter router, struct LDKLogger logger, struct LDKUserConfig default_config, struct LDKCVec_ChannelMonitorZ channel_monitors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_new")] public static extern long ChannelManagerReadArgsNew(long _entropy_source, long _node_signer, long _signer_provider, long _fee_estimator, long _chain_monitor, long _tx_broadcaster, long _router, long _logger, long _default_config, long _channel_monitors);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ C2Tuple_ThirtyTwoBytesChannelManagerZ_read(struct LDKu8slice ser, struct LDKChannelManagerReadArgs arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_read")] public static extern long C2TupleThirtyTwoBytesChannelManagerZRead(long _ser, long _arg);
	// void DelayedPaymentBasepoint_free(struct LDKDelayedPaymentBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_free")] public static extern void DelayedPaymentBasepointFree(long _this_obj);
	// struct LDKPublicKey DelayedPaymentBasepoint_get_a(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_get_a")] public static extern long DelayedPaymentBasepointGetA(long _this_ptr);
	// void DelayedPaymentBasepoint_set_a(struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_set_a")] public static extern void DelayedPaymentBasepointSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentBasepoint DelayedPaymentBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_new")] public static extern long DelayedPaymentBasepointNew(long _a_arg);
	// bool DelayedPaymentBasepoint_eq(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR a, const struct LDKDelayedPaymentBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_eq")] public static extern bool DelayedPaymentBasepointEq(long _a, long _b);
	// uint64_t DelayedPaymentBasepoint_clone_ptr(LDKDelayedPaymentBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_clone_ptr")] public static extern long DelayedPaymentBasepointClonePtr(long _arg);
	// struct LDKDelayedPaymentBasepoint DelayedPaymentBasepoint_clone(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_clone")] public static extern long DelayedPaymentBasepointClone(long _orig);
	// uint64_t DelayedPaymentBasepoint_hash(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_hash")] public static extern long DelayedPaymentBasepointHash(long _o);
	// MUST_USE_RES struct LDKPublicKey DelayedPaymentBasepoint_to_public_key(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_to_public_key")] public static extern long DelayedPaymentBasepointToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z DelayedPaymentBasepoint_write(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_write")] public static extern long DelayedPaymentBasepointWrite(long _obj);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ DelayedPaymentBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_read")] public static extern long DelayedPaymentBasepointRead(long _ser);
	// void DelayedPaymentKey_free(struct LDKDelayedPaymentKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_free")] public static extern void DelayedPaymentKeyFree(long _this_obj);
	// struct LDKPublicKey DelayedPaymentKey_get_a(const struct LDKDelayedPaymentKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_get_a")] public static extern long DelayedPaymentKeyGetA(long _this_ptr);
	// void DelayedPaymentKey_set_a(struct LDKDelayedPaymentKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_set_a")] public static extern void DelayedPaymentKeySetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_new")] public static extern long DelayedPaymentKeyNew(long _a_arg);
	// bool DelayedPaymentKey_eq(const struct LDKDelayedPaymentKey *NONNULL_PTR a, const struct LDKDelayedPaymentKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_eq")] public static extern bool DelayedPaymentKeyEq(long _a, long _b);
	// uint64_t DelayedPaymentKey_clone_ptr(LDKDelayedPaymentKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_clone_ptr")] public static extern long DelayedPaymentKeyClonePtr(long _arg);
	// struct LDKDelayedPaymentKey DelayedPaymentKey_clone(const struct LDKDelayedPaymentKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_clone")] public static extern long DelayedPaymentKeyClone(long _orig);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_from_basepoint(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_from_basepoint")] public static extern long DelayedPaymentKeyFromBasepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_from_secret_key(const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_from_secret_key")] public static extern long DelayedPaymentKeyFromSecretKey(long _sk);
	// MUST_USE_RES struct LDKPublicKey DelayedPaymentKey_to_public_key(const struct LDKDelayedPaymentKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_to_public_key")] public static extern long DelayedPaymentKeyToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z DelayedPaymentKey_write(const struct LDKDelayedPaymentKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_write")] public static extern long DelayedPaymentKeyWrite(long _obj);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ DelayedPaymentKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_read")] public static extern long DelayedPaymentKeyRead(long _ser);
	// void HtlcBasepoint_free(struct LDKHtlcBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_free")] public static extern void HtlcBasepointFree(long _this_obj);
	// struct LDKPublicKey HtlcBasepoint_get_a(const struct LDKHtlcBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_get_a")] public static extern long HtlcBasepointGetA(long _this_ptr);
	// void HtlcBasepoint_set_a(struct LDKHtlcBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_set_a")] public static extern void HtlcBasepointSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHtlcBasepoint HtlcBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_new")] public static extern long HtlcBasepointNew(long _a_arg);
	// bool HtlcBasepoint_eq(const struct LDKHtlcBasepoint *NONNULL_PTR a, const struct LDKHtlcBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_eq")] public static extern bool HtlcBasepointEq(long _a, long _b);
	// uint64_t HtlcBasepoint_clone_ptr(LDKHtlcBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_clone_ptr")] public static extern long HtlcBasepointClonePtr(long _arg);
	// struct LDKHtlcBasepoint HtlcBasepoint_clone(const struct LDKHtlcBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_clone")] public static extern long HtlcBasepointClone(long _orig);
	// uint64_t HtlcBasepoint_hash(const struct LDKHtlcBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_hash")] public static extern long HtlcBasepointHash(long _o);
	// MUST_USE_RES struct LDKPublicKey HtlcBasepoint_to_public_key(const struct LDKHtlcBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_to_public_key")] public static extern long HtlcBasepointToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z HtlcBasepoint_write(const struct LDKHtlcBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_write")] public static extern long HtlcBasepointWrite(long _obj);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ HtlcBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_read")] public static extern long HtlcBasepointRead(long _ser);
	// void HtlcKey_free(struct LDKHtlcKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_free")] public static extern void HtlcKeyFree(long _this_obj);
	// struct LDKPublicKey HtlcKey_get_a(const struct LDKHtlcKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_get_a")] public static extern long HtlcKeyGetA(long _this_ptr);
	// void HtlcKey_set_a(struct LDKHtlcKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_set_a")] public static extern void HtlcKeySetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_new")] public static extern long HtlcKeyNew(long _a_arg);
	// bool HtlcKey_eq(const struct LDKHtlcKey *NONNULL_PTR a, const struct LDKHtlcKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_eq")] public static extern bool HtlcKeyEq(long _a, long _b);
	// uint64_t HtlcKey_clone_ptr(LDKHtlcKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_clone_ptr")] public static extern long HtlcKeyClonePtr(long _arg);
	// struct LDKHtlcKey HtlcKey_clone(const struct LDKHtlcKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_clone")] public static extern long HtlcKeyClone(long _orig);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_from_basepoint(const struct LDKHtlcBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_from_basepoint")] public static extern long HtlcKeyFromBasepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_from_secret_key(const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_from_secret_key")] public static extern long HtlcKeyFromSecretKey(long _sk);
	// MUST_USE_RES struct LDKPublicKey HtlcKey_to_public_key(const struct LDKHtlcKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_to_public_key")] public static extern long HtlcKeyToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z HtlcKey_write(const struct LDKHtlcKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_write")] public static extern long HtlcKeyWrite(long _obj);
	// struct LDKCResult_HtlcKeyDecodeErrorZ HtlcKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_read")] public static extern long HtlcKeyRead(long _ser);
	// void RevocationBasepoint_free(struct LDKRevocationBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_free")] public static extern void RevocationBasepointFree(long _this_obj);
	// struct LDKPublicKey RevocationBasepoint_get_a(const struct LDKRevocationBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_get_a")] public static extern long RevocationBasepointGetA(long _this_ptr);
	// void RevocationBasepoint_set_a(struct LDKRevocationBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_set_a")] public static extern void RevocationBasepointSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevocationBasepoint RevocationBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_new")] public static extern long RevocationBasepointNew(long _a_arg);
	// bool RevocationBasepoint_eq(const struct LDKRevocationBasepoint *NONNULL_PTR a, const struct LDKRevocationBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_eq")] public static extern bool RevocationBasepointEq(long _a, long _b);
	// uint64_t RevocationBasepoint_clone_ptr(LDKRevocationBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_clone_ptr")] public static extern long RevocationBasepointClonePtr(long _arg);
	// struct LDKRevocationBasepoint RevocationBasepoint_clone(const struct LDKRevocationBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_clone")] public static extern long RevocationBasepointClone(long _orig);
	// uint64_t RevocationBasepoint_hash(const struct LDKRevocationBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_hash")] public static extern long RevocationBasepointHash(long _o);
	// MUST_USE_RES struct LDKPublicKey RevocationBasepoint_to_public_key(const struct LDKRevocationBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_to_public_key")] public static extern long RevocationBasepointToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z RevocationBasepoint_write(const struct LDKRevocationBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_write")] public static extern long RevocationBasepointWrite(long _obj);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ RevocationBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_read")] public static extern long RevocationBasepointRead(long _ser);
	// void RevocationKey_free(struct LDKRevocationKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_free")] public static extern void RevocationKeyFree(long _this_obj);
	// struct LDKPublicKey RevocationKey_get_a(const struct LDKRevocationKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_get_a")] public static extern long RevocationKeyGetA(long _this_ptr);
	// void RevocationKey_set_a(struct LDKRevocationKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_set_a")] public static extern void RevocationKeySetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevocationKey RevocationKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_new")] public static extern long RevocationKeyNew(long _a_arg);
	// bool RevocationKey_eq(const struct LDKRevocationKey *NONNULL_PTR a, const struct LDKRevocationKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_eq")] public static extern bool RevocationKeyEq(long _a, long _b);
	// uint64_t RevocationKey_clone_ptr(LDKRevocationKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_clone_ptr")] public static extern long RevocationKeyClonePtr(long _arg);
	// struct LDKRevocationKey RevocationKey_clone(const struct LDKRevocationKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_clone")] public static extern long RevocationKeyClone(long _orig);
	// uint64_t RevocationKey_hash(const struct LDKRevocationKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_hash")] public static extern long RevocationKeyHash(long _o);
	// MUST_USE_RES struct LDKRevocationKey RevocationKey_from_basepoint(const struct LDKRevocationBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_from_basepoint")] public static extern long RevocationKeyFromBasepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKPublicKey RevocationKey_to_public_key(const struct LDKRevocationKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_to_public_key")] public static extern long RevocationKeyToPublicKey(long _this_arg);
	// struct LDKCVec_u8Z RevocationKey_write(const struct LDKRevocationKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_write")] public static extern long RevocationKeyWrite(long _obj);
	// struct LDKCResult_RevocationKeyDecodeErrorZ RevocationKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_read")] public static extern long RevocationKeyRead(long _ser);
	// void ExpandedKey_free(struct LDKExpandedKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_free")] public static extern void ExpandedKeyFree(long _this_obj);
	// MUST_USE_RES struct LDKExpandedKey ExpandedKey_new(const uint8_t (*key_material)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_new")] public static extern long ExpandedKeyNew(long _key_material);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ create(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, const struct LDKEntropySource *NONNULL_PTR entropy_source, uint64_t current_time, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create")] public static extern long Create(long _keys, long _min_value_msat, int _invoice_expiry_delta_secs, long _entropy_source, long _current_time, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_ThirtyTwoBytesNoneZ create_from_hash(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, struct LDKThirtyTwoBytes payment_hash, uint32_t invoice_expiry_delta_secs, uint64_t current_time, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_from_hash")] public static extern long CreateFromHash(long _keys, long _min_value_msat, long _payment_hash, int _invoice_expiry_delta_secs, long _current_time, long _min_final_cltv_expiry_delta);
	// void DecodeError_free(struct LDKDecodeError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_free")] public static extern void DecodeErrorFree(long _this_ptr);
	// uint64_t DecodeError_clone_ptr(LDKDecodeError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone_ptr")] public static extern long DecodeErrorClonePtr(long _arg);
	// struct LDKDecodeError DecodeError_clone(const struct LDKDecodeError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone")] public static extern long DecodeErrorClone(long _orig);
	// struct LDKDecodeError DecodeError_unknown_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_version")] public static extern long DecodeErrorUnknownVersion();
	// struct LDKDecodeError DecodeError_unknown_required_feature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_required_feature")] public static extern long DecodeErrorUnknownRequiredFeature();
	// struct LDKDecodeError DecodeError_invalid_value(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_invalid_value")] public static extern long DecodeErrorInvalidValue();
	// struct LDKDecodeError DecodeError_short_read(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_short_read")] public static extern long DecodeErrorShortRead();
	// struct LDKDecodeError DecodeError_bad_length_descriptor(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_bad_length_descriptor")] public static extern long DecodeErrorBadLengthDescriptor();
	// struct LDKDecodeError DecodeError_io(enum LDKIOError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_io")] public static extern long DecodeErrorIo(IOError _a);
	// struct LDKDecodeError DecodeError_unsupported_compression(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unsupported_compression")] public static extern long DecodeErrorUnsupportedCompression();
	// uint64_t DecodeError_hash(const struct LDKDecodeError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_hash")] public static extern long DecodeErrorHash(long _o);
	// bool DecodeError_eq(const struct LDKDecodeError *NONNULL_PTR a, const struct LDKDecodeError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_eq")] public static extern bool DecodeErrorEq(long _a, long _b);
	// void Init_free(struct LDKInit this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_free")] public static extern void InitFree(long _this_obj);
	// struct LDKInitFeatures Init_get_features(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_features")] public static extern long InitGetFeatures(long _this_ptr);
	// void Init_set_features(struct LDKInit *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_features")] public static extern void InitSetFeatures(long _this_ptr, long _val);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ Init_get_networks(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_networks")] public static extern long InitGetNetworks(long _this_ptr);
	// void Init_set_networks(struct LDKInit *NONNULL_PTR this_ptr, struct LDKCOption_CVec_ThirtyTwoBytesZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_networks")] public static extern void InitSetNetworks(long _this_ptr, long _val);
	// struct LDKCOption_SocketAddressZ Init_get_remote_network_address(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_remote_network_address")] public static extern long InitGetRemoteNetworkAddress(long _this_ptr);
	// void Init_set_remote_network_address(struct LDKInit *NONNULL_PTR this_ptr, struct LDKCOption_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_remote_network_address")] public static extern void InitSetRemoteNetworkAddress(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInit Init_new(struct LDKInitFeatures features_arg, struct LDKCOption_CVec_ThirtyTwoBytesZZ networks_arg, struct LDKCOption_SocketAddressZ remote_network_address_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_new")] public static extern long InitNew(long _features_arg, long _networks_arg, long _remote_network_address_arg);
	// uint64_t Init_clone_ptr(LDKInit *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone_ptr")] public static extern long InitClonePtr(long _arg);
	// struct LDKInit Init_clone(const struct LDKInit *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone")] public static extern long InitClone(long _orig);
	// uint64_t Init_hash(const struct LDKInit *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_hash")] public static extern long InitHash(long _o);
	// bool Init_eq(const struct LDKInit *NONNULL_PTR a, const struct LDKInit *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_eq")] public static extern bool InitEq(long _a, long _b);
	// void ErrorMessage_free(struct LDKErrorMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_free")] public static extern void ErrorMessageFree(long _this_obj);
	// const uint8_t (*ErrorMessage_get_channel_id(const struct LDKErrorMessage *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_channel_id")] public static extern long ErrorMessageGetChannelId(long _this_ptr);
	// void ErrorMessage_set_channel_id(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_channel_id")] public static extern void ErrorMessageSetChannelId(long _this_ptr, long _val);
	// struct LDKStr ErrorMessage_get_data(const struct LDKErrorMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_data")] public static extern long ErrorMessageGetData(long _this_ptr);
	// void ErrorMessage_set_data(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_data")] public static extern void ErrorMessageSetData(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKErrorMessage ErrorMessage_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_new")] public static extern long ErrorMessageNew(long _channel_id_arg, long _data_arg);
	// uint64_t ErrorMessage_clone_ptr(LDKErrorMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone_ptr")] public static extern long ErrorMessageClonePtr(long _arg);
	// struct LDKErrorMessage ErrorMessage_clone(const struct LDKErrorMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone")] public static extern long ErrorMessageClone(long _orig);
	// uint64_t ErrorMessage_hash(const struct LDKErrorMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_hash")] public static extern long ErrorMessageHash(long _o);
	// bool ErrorMessage_eq(const struct LDKErrorMessage *NONNULL_PTR a, const struct LDKErrorMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_eq")] public static extern bool ErrorMessageEq(long _a, long _b);
	// void WarningMessage_free(struct LDKWarningMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_free")] public static extern void WarningMessageFree(long _this_obj);
	// const uint8_t (*WarningMessage_get_channel_id(const struct LDKWarningMessage *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_channel_id")] public static extern long WarningMessageGetChannelId(long _this_ptr);
	// void WarningMessage_set_channel_id(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_channel_id")] public static extern void WarningMessageSetChannelId(long _this_ptr, long _val);
	// struct LDKStr WarningMessage_get_data(const struct LDKWarningMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_data")] public static extern long WarningMessageGetData(long _this_ptr);
	// void WarningMessage_set_data(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_data")] public static extern void WarningMessageSetData(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKWarningMessage WarningMessage_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_new")] public static extern long WarningMessageNew(long _channel_id_arg, long _data_arg);
	// uint64_t WarningMessage_clone_ptr(LDKWarningMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone_ptr")] public static extern long WarningMessageClonePtr(long _arg);
	// struct LDKWarningMessage WarningMessage_clone(const struct LDKWarningMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone")] public static extern long WarningMessageClone(long _orig);
	// uint64_t WarningMessage_hash(const struct LDKWarningMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_hash")] public static extern long WarningMessageHash(long _o);
	// bool WarningMessage_eq(const struct LDKWarningMessage *NONNULL_PTR a, const struct LDKWarningMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_eq")] public static extern bool WarningMessageEq(long _a, long _b);
	// void Ping_free(struct LDKPing this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_free")] public static extern void PingFree(long _this_obj);
	// uint16_t Ping_get_ponglen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_ponglen")] public static extern short PingGetPonglen(long _this_ptr);
	// void Ping_set_ponglen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_ponglen")] public static extern void PingSetPonglen(long _this_ptr, short _val);
	// uint16_t Ping_get_byteslen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_byteslen")] public static extern short PingGetByteslen(long _this_ptr);
	// void Ping_set_byteslen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_byteslen")] public static extern void PingSetByteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPing Ping_new(uint16_t ponglen_arg, uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_new")] public static extern long PingNew(short _ponglen_arg, short _byteslen_arg);
	// uint64_t Ping_clone_ptr(LDKPing *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone_ptr")] public static extern long PingClonePtr(long _arg);
	// struct LDKPing Ping_clone(const struct LDKPing *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone")] public static extern long PingClone(long _orig);
	// uint64_t Ping_hash(const struct LDKPing *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_hash")] public static extern long PingHash(long _o);
	// bool Ping_eq(const struct LDKPing *NONNULL_PTR a, const struct LDKPing *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_eq")] public static extern bool PingEq(long _a, long _b);
	// void Pong_free(struct LDKPong this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_free")] public static extern void PongFree(long _this_obj);
	// uint16_t Pong_get_byteslen(const struct LDKPong *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_get_byteslen")] public static extern short PongGetByteslen(long _this_ptr);
	// void Pong_set_byteslen(struct LDKPong *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_set_byteslen")] public static extern void PongSetByteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPong Pong_new(uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_new")] public static extern long PongNew(short _byteslen_arg);
	// uint64_t Pong_clone_ptr(LDKPong *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone_ptr")] public static extern long PongClonePtr(long _arg);
	// struct LDKPong Pong_clone(const struct LDKPong *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone")] public static extern long PongClone(long _orig);
	// uint64_t Pong_hash(const struct LDKPong *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_hash")] public static extern long PongHash(long _o);
	// bool Pong_eq(const struct LDKPong *NONNULL_PTR a, const struct LDKPong *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_eq")] public static extern bool PongEq(long _a, long _b);
	// void OpenChannel_free(struct LDKOpenChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_free")] public static extern void OpenChannelFree(long _this_obj);
	// const uint8_t (*OpenChannel_get_chain_hash(const struct LDKOpenChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_chain_hash")] public static extern long OpenChannelGetChainHash(long _this_ptr);
	// void OpenChannel_set_chain_hash(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_chain_hash")] public static extern void OpenChannelSetChainHash(long _this_ptr, long _val);
	// const uint8_t (*OpenChannel_get_temporary_channel_id(const struct LDKOpenChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_temporary_channel_id")] public static extern long OpenChannelGetTemporaryChannelId(long _this_ptr);
	// void OpenChannel_set_temporary_channel_id(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_temporary_channel_id")] public static extern void OpenChannelSetTemporaryChannelId(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_funding_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_funding_satoshis")] public static extern long OpenChannelGetFundingSatoshis(long _this_ptr);
	// void OpenChannel_set_funding_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_funding_satoshis")] public static extern void OpenChannelSetFundingSatoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_push_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_push_msat")] public static extern long OpenChannelGetPushMsat(long _this_ptr);
	// void OpenChannel_set_push_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_push_msat")] public static extern void OpenChannelSetPushMsat(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_dust_limit_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_dust_limit_satoshis")] public static extern long OpenChannelGetDustLimitSatoshis(long _this_ptr);
	// void OpenChannel_set_dust_limit_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_dust_limit_satoshis")] public static extern void OpenChannelSetDustLimitSatoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_max_htlc_value_in_flight_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_max_htlc_value_in_flight_msat")] public static extern long OpenChannelGetMaxHtlcValueInFlightMsat(long _this_ptr);
	// void OpenChannel_set_max_htlc_value_in_flight_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_max_htlc_value_in_flight_msat")] public static extern void OpenChannelSetMaxHtlcValueInFlightMsat(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_channel_reserve_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_reserve_satoshis")] public static extern long OpenChannelGetChannelReserveSatoshis(long _this_ptr);
	// void OpenChannel_set_channel_reserve_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_reserve_satoshis")] public static extern void OpenChannelSetChannelReserveSatoshis(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_htlc_minimum_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_htlc_minimum_msat")] public static extern long OpenChannelGetHtlcMinimumMsat(long _this_ptr);
	// void OpenChannel_set_htlc_minimum_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_htlc_minimum_msat")] public static extern void OpenChannelSetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint32_t OpenChannel_get_feerate_per_kw(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_feerate_per_kw")] public static extern int OpenChannelGetFeeratePerKw(long _this_ptr);
	// void OpenChannel_set_feerate_per_kw(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_feerate_per_kw")] public static extern void OpenChannelSetFeeratePerKw(long _this_ptr, int _val);
	// uint16_t OpenChannel_get_to_self_delay(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_to_self_delay")] public static extern short OpenChannelGetToSelfDelay(long _this_ptr);
	// void OpenChannel_set_to_self_delay(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_to_self_delay")] public static extern void OpenChannelSetToSelfDelay(long _this_ptr, short _val);
	// uint16_t OpenChannel_get_max_accepted_htlcs(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_max_accepted_htlcs")] public static extern short OpenChannelGetMaxAcceptedHtlcs(long _this_ptr);
	// void OpenChannel_set_max_accepted_htlcs(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_max_accepted_htlcs")] public static extern void OpenChannelSetMaxAcceptedHtlcs(long _this_ptr, short _val);
	// struct LDKPublicKey OpenChannel_get_funding_pubkey(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_funding_pubkey")] public static extern long OpenChannelGetFundingPubkey(long _this_ptr);
	// void OpenChannel_set_funding_pubkey(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_funding_pubkey")] public static extern void OpenChannelSetFundingPubkey(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannel_get_revocation_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_revocation_basepoint")] public static extern long OpenChannelGetRevocationBasepoint(long _this_ptr);
	// void OpenChannel_set_revocation_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_revocation_basepoint")] public static extern void OpenChannelSetRevocationBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannel_get_payment_point(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_payment_point")] public static extern long OpenChannelGetPaymentPoint(long _this_ptr);
	// void OpenChannel_set_payment_point(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_payment_point")] public static extern void OpenChannelSetPaymentPoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannel_get_delayed_payment_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_delayed_payment_basepoint")] public static extern long OpenChannelGetDelayedPaymentBasepoint(long _this_ptr);
	// void OpenChannel_set_delayed_payment_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_delayed_payment_basepoint")] public static extern void OpenChannelSetDelayedPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannel_get_htlc_basepoint(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_htlc_basepoint")] public static extern long OpenChannelGetHtlcBasepoint(long _this_ptr);
	// void OpenChannel_set_htlc_basepoint(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_htlc_basepoint")] public static extern void OpenChannelSetHtlcBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannel_get_first_per_commitment_point(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_first_per_commitment_point")] public static extern long OpenChannelGetFirstPerCommitmentPoint(long _this_ptr);
	// void OpenChannel_set_first_per_commitment_point(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_first_per_commitment_point")] public static extern void OpenChannelSetFirstPerCommitmentPoint(long _this_ptr, long _val);
	// uint8_t OpenChannel_get_channel_flags(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_flags")] public static extern byte OpenChannelGetChannelFlags(long _this_ptr);
	// void OpenChannel_set_channel_flags(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_flags")] public static extern void OpenChannelSetChannelFlags(long _this_ptr, byte _val);
	// struct LDKCOption_CVec_u8ZZ OpenChannel_get_shutdown_scriptpubkey(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_shutdown_scriptpubkey")] public static extern long OpenChannelGetShutdownScriptpubkey(long _this_ptr);
	// void OpenChannel_set_shutdown_scriptpubkey(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_shutdown_scriptpubkey")] public static extern void OpenChannelSetShutdownScriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures OpenChannel_get_channel_type(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_type")] public static extern long OpenChannelGetChannelType(long _this_ptr);
	// void OpenChannel_set_channel_type(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_type")] public static extern void OpenChannelSetChannelType(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOpenChannel OpenChannel_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKThirtyTwoBytes temporary_channel_id_arg, uint64_t funding_satoshis_arg, uint64_t push_msat_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t channel_reserve_satoshis_arg, uint64_t htlc_minimum_msat_arg, uint32_t feerate_per_kw_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_point_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, uint8_t channel_flags_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_new")] public static extern long OpenChannelNew(long _chain_hash_arg, long _temporary_channel_id_arg, long _funding_satoshis_arg, long _push_msat_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _channel_reserve_satoshis_arg, long _htlc_minimum_msat_arg, int _feerate_per_kw_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_point_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, byte _channel_flags_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg);
	// uint64_t OpenChannel_clone_ptr(LDKOpenChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone_ptr")] public static extern long OpenChannelClonePtr(long _arg);
	// struct LDKOpenChannel OpenChannel_clone(const struct LDKOpenChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone")] public static extern long OpenChannelClone(long _orig);
	// uint64_t OpenChannel_hash(const struct LDKOpenChannel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_hash")] public static extern long OpenChannelHash(long _o);
	// bool OpenChannel_eq(const struct LDKOpenChannel *NONNULL_PTR a, const struct LDKOpenChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_eq")] public static extern bool OpenChannelEq(long _a, long _b);
	// void OpenChannelV2_free(struct LDKOpenChannelV2 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_free")] public static extern void OpenChannelV2Free(long _this_obj);
	// const uint8_t (*OpenChannelV2_get_chain_hash(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_chain_hash")] public static extern long OpenChannelV2GetChainHash(long _this_ptr);
	// void OpenChannelV2_set_chain_hash(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_chain_hash")] public static extern void OpenChannelV2SetChainHash(long _this_ptr, long _val);
	// const uint8_t (*OpenChannelV2_get_temporary_channel_id(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_temporary_channel_id")] public static extern long OpenChannelV2GetTemporaryChannelId(long _this_ptr);
	// void OpenChannelV2_set_temporary_channel_id(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_temporary_channel_id")] public static extern void OpenChannelV2SetTemporaryChannelId(long _this_ptr, long _val);
	// uint32_t OpenChannelV2_get_funding_feerate_sat_per_1000_weight(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_funding_feerate_sat_per_1000_weight")] public static extern int OpenChannelV2GetFundingFeerateSatPer1000Weight(long _this_ptr);
	// void OpenChannelV2_set_funding_feerate_sat_per_1000_weight(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_funding_feerate_sat_per_1000_weight")] public static extern void OpenChannelV2SetFundingFeerateSatPer1000Weight(long _this_ptr, int _val);
	// uint32_t OpenChannelV2_get_commitment_feerate_sat_per_1000_weight(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_commitment_feerate_sat_per_1000_weight")] public static extern int OpenChannelV2GetCommitmentFeerateSatPer1000Weight(long _this_ptr);
	// void OpenChannelV2_set_commitment_feerate_sat_per_1000_weight(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_commitment_feerate_sat_per_1000_weight")] public static extern void OpenChannelV2SetCommitmentFeerateSatPer1000Weight(long _this_ptr, int _val);
	// uint64_t OpenChannelV2_get_funding_satoshis(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_funding_satoshis")] public static extern long OpenChannelV2GetFundingSatoshis(long _this_ptr);
	// void OpenChannelV2_set_funding_satoshis(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_funding_satoshis")] public static extern void OpenChannelV2SetFundingSatoshis(long _this_ptr, long _val);
	// uint64_t OpenChannelV2_get_dust_limit_satoshis(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_dust_limit_satoshis")] public static extern long OpenChannelV2GetDustLimitSatoshis(long _this_ptr);
	// void OpenChannelV2_set_dust_limit_satoshis(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_dust_limit_satoshis")] public static extern void OpenChannelV2SetDustLimitSatoshis(long _this_ptr, long _val);
	// uint64_t OpenChannelV2_get_max_htlc_value_in_flight_msat(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_max_htlc_value_in_flight_msat")] public static extern long OpenChannelV2GetMaxHtlcValueInFlightMsat(long _this_ptr);
	// void OpenChannelV2_set_max_htlc_value_in_flight_msat(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_max_htlc_value_in_flight_msat")] public static extern void OpenChannelV2SetMaxHtlcValueInFlightMsat(long _this_ptr, long _val);
	// uint64_t OpenChannelV2_get_htlc_minimum_msat(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_htlc_minimum_msat")] public static extern long OpenChannelV2GetHtlcMinimumMsat(long _this_ptr);
	// void OpenChannelV2_set_htlc_minimum_msat(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_htlc_minimum_msat")] public static extern void OpenChannelV2SetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint16_t OpenChannelV2_get_to_self_delay(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_to_self_delay")] public static extern short OpenChannelV2GetToSelfDelay(long _this_ptr);
	// void OpenChannelV2_set_to_self_delay(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_to_self_delay")] public static extern void OpenChannelV2SetToSelfDelay(long _this_ptr, short _val);
	// uint16_t OpenChannelV2_get_max_accepted_htlcs(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_max_accepted_htlcs")] public static extern short OpenChannelV2GetMaxAcceptedHtlcs(long _this_ptr);
	// void OpenChannelV2_set_max_accepted_htlcs(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_max_accepted_htlcs")] public static extern void OpenChannelV2SetMaxAcceptedHtlcs(long _this_ptr, short _val);
	// uint32_t OpenChannelV2_get_locktime(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_locktime")] public static extern int OpenChannelV2GetLocktime(long _this_ptr);
	// void OpenChannelV2_set_locktime(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_locktime")] public static extern void OpenChannelV2SetLocktime(long _this_ptr, int _val);
	// struct LDKPublicKey OpenChannelV2_get_funding_pubkey(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_funding_pubkey")] public static extern long OpenChannelV2GetFundingPubkey(long _this_ptr);
	// void OpenChannelV2_set_funding_pubkey(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_funding_pubkey")] public static extern void OpenChannelV2SetFundingPubkey(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_revocation_basepoint(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_revocation_basepoint")] public static extern long OpenChannelV2GetRevocationBasepoint(long _this_ptr);
	// void OpenChannelV2_set_revocation_basepoint(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_revocation_basepoint")] public static extern void OpenChannelV2SetRevocationBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_payment_basepoint(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_payment_basepoint")] public static extern long OpenChannelV2GetPaymentBasepoint(long _this_ptr);
	// void OpenChannelV2_set_payment_basepoint(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_payment_basepoint")] public static extern void OpenChannelV2SetPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_delayed_payment_basepoint(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_delayed_payment_basepoint")] public static extern long OpenChannelV2GetDelayedPaymentBasepoint(long _this_ptr);
	// void OpenChannelV2_set_delayed_payment_basepoint(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_delayed_payment_basepoint")] public static extern void OpenChannelV2SetDelayedPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_htlc_basepoint(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_htlc_basepoint")] public static extern long OpenChannelV2GetHtlcBasepoint(long _this_ptr);
	// void OpenChannelV2_set_htlc_basepoint(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_htlc_basepoint")] public static extern void OpenChannelV2SetHtlcBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_first_per_commitment_point(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_first_per_commitment_point")] public static extern long OpenChannelV2GetFirstPerCommitmentPoint(long _this_ptr);
	// void OpenChannelV2_set_first_per_commitment_point(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_first_per_commitment_point")] public static extern void OpenChannelV2SetFirstPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKPublicKey OpenChannelV2_get_second_per_commitment_point(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_second_per_commitment_point")] public static extern long OpenChannelV2GetSecondPerCommitmentPoint(long _this_ptr);
	// void OpenChannelV2_set_second_per_commitment_point(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_second_per_commitment_point")] public static extern void OpenChannelV2SetSecondPerCommitmentPoint(long _this_ptr, long _val);
	// uint8_t OpenChannelV2_get_channel_flags(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_channel_flags")] public static extern byte OpenChannelV2GetChannelFlags(long _this_ptr);
	// void OpenChannelV2_set_channel_flags(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_channel_flags")] public static extern void OpenChannelV2SetChannelFlags(long _this_ptr, byte _val);
	// struct LDKCOption_CVec_u8ZZ OpenChannelV2_get_shutdown_scriptpubkey(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_shutdown_scriptpubkey")] public static extern long OpenChannelV2GetShutdownScriptpubkey(long _this_ptr);
	// void OpenChannelV2_set_shutdown_scriptpubkey(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_shutdown_scriptpubkey")] public static extern void OpenChannelV2SetShutdownScriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures OpenChannelV2_get_channel_type(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_channel_type")] public static extern long OpenChannelV2GetChannelType(long _this_ptr);
	// void OpenChannelV2_set_channel_type(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_channel_type")] public static extern void OpenChannelV2SetChannelType(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ OpenChannelV2_get_require_confirmed_inputs(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_require_confirmed_inputs")] public static extern COption_NoneZ OpenChannelV2GetRequireConfirmedInputs(long _this_ptr);
	// void OpenChannelV2_set_require_confirmed_inputs(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_require_confirmed_inputs")] public static extern void OpenChannelV2SetRequireConfirmedInputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKOpenChannelV2 OpenChannelV2_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKThirtyTwoBytes temporary_channel_id_arg, uint32_t funding_feerate_sat_per_1000_weight_arg, uint32_t commitment_feerate_sat_per_1000_weight_arg, uint64_t funding_satoshis_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t htlc_minimum_msat_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, uint32_t locktime_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_basepoint_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, struct LDKPublicKey second_per_commitment_point_arg, uint8_t channel_flags_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_new")] public static extern long OpenChannelV2New(long _chain_hash_arg, long _temporary_channel_id_arg, int _funding_feerate_sat_per_1000_weight_arg, int _commitment_feerate_sat_per_1000_weight_arg, long _funding_satoshis_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _htlc_minimum_msat_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, int _locktime_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_basepoint_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, long _second_per_commitment_point_arg, byte _channel_flags_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t OpenChannelV2_clone_ptr(LDKOpenChannelV2 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_clone_ptr")] public static extern long OpenChannelV2ClonePtr(long _arg);
	// struct LDKOpenChannelV2 OpenChannelV2_clone(const struct LDKOpenChannelV2 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_clone")] public static extern long OpenChannelV2Clone(long _orig);
	// uint64_t OpenChannelV2_hash(const struct LDKOpenChannelV2 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_hash")] public static extern long OpenChannelV2Hash(long _o);
	// bool OpenChannelV2_eq(const struct LDKOpenChannelV2 *NONNULL_PTR a, const struct LDKOpenChannelV2 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_eq")] public static extern bool OpenChannelV2Eq(long _a, long _b);
	// void AcceptChannel_free(struct LDKAcceptChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_free")] public static extern void AcceptChannelFree(long _this_obj);
	// const uint8_t (*AcceptChannel_get_temporary_channel_id(const struct LDKAcceptChannel *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_temporary_channel_id")] public static extern long AcceptChannelGetTemporaryChannelId(long _this_ptr);
	// void AcceptChannel_set_temporary_channel_id(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_temporary_channel_id")] public static extern void AcceptChannelSetTemporaryChannelId(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_dust_limit_satoshis(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_dust_limit_satoshis")] public static extern long AcceptChannelGetDustLimitSatoshis(long _this_ptr);
	// void AcceptChannel_set_dust_limit_satoshis(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_dust_limit_satoshis")] public static extern void AcceptChannelSetDustLimitSatoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_max_htlc_value_in_flight_msat(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_max_htlc_value_in_flight_msat")] public static extern long AcceptChannelGetMaxHtlcValueInFlightMsat(long _this_ptr);
	// void AcceptChannel_set_max_htlc_value_in_flight_msat(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_max_htlc_value_in_flight_msat")] public static extern void AcceptChannelSetMaxHtlcValueInFlightMsat(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_channel_reserve_satoshis(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_channel_reserve_satoshis")] public static extern long AcceptChannelGetChannelReserveSatoshis(long _this_ptr);
	// void AcceptChannel_set_channel_reserve_satoshis(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_channel_reserve_satoshis")] public static extern void AcceptChannelSetChannelReserveSatoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_htlc_minimum_msat(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_htlc_minimum_msat")] public static extern long AcceptChannelGetHtlcMinimumMsat(long _this_ptr);
	// void AcceptChannel_set_htlc_minimum_msat(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_htlc_minimum_msat")] public static extern void AcceptChannelSetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint32_t AcceptChannel_get_minimum_depth(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_minimum_depth")] public static extern int AcceptChannelGetMinimumDepth(long _this_ptr);
	// void AcceptChannel_set_minimum_depth(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_minimum_depth")] public static extern void AcceptChannelSetMinimumDepth(long _this_ptr, int _val);
	// uint16_t AcceptChannel_get_to_self_delay(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_to_self_delay")] public static extern short AcceptChannelGetToSelfDelay(long _this_ptr);
	// void AcceptChannel_set_to_self_delay(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_to_self_delay")] public static extern void AcceptChannelSetToSelfDelay(long _this_ptr, short _val);
	// uint16_t AcceptChannel_get_max_accepted_htlcs(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_max_accepted_htlcs")] public static extern short AcceptChannelGetMaxAcceptedHtlcs(long _this_ptr);
	// void AcceptChannel_set_max_accepted_htlcs(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_max_accepted_htlcs")] public static extern void AcceptChannelSetMaxAcceptedHtlcs(long _this_ptr, short _val);
	// struct LDKPublicKey AcceptChannel_get_funding_pubkey(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_funding_pubkey")] public static extern long AcceptChannelGetFundingPubkey(long _this_ptr);
	// void AcceptChannel_set_funding_pubkey(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_funding_pubkey")] public static extern void AcceptChannelSetFundingPubkey(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannel_get_revocation_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_revocation_basepoint")] public static extern long AcceptChannelGetRevocationBasepoint(long _this_ptr);
	// void AcceptChannel_set_revocation_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_revocation_basepoint")] public static extern void AcceptChannelSetRevocationBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannel_get_payment_point(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_payment_point")] public static extern long AcceptChannelGetPaymentPoint(long _this_ptr);
	// void AcceptChannel_set_payment_point(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_payment_point")] public static extern void AcceptChannelSetPaymentPoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannel_get_delayed_payment_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_delayed_payment_basepoint")] public static extern long AcceptChannelGetDelayedPaymentBasepoint(long _this_ptr);
	// void AcceptChannel_set_delayed_payment_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_delayed_payment_basepoint")] public static extern void AcceptChannelSetDelayedPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannel_get_htlc_basepoint(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_htlc_basepoint")] public static extern long AcceptChannelGetHtlcBasepoint(long _this_ptr);
	// void AcceptChannel_set_htlc_basepoint(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_htlc_basepoint")] public static extern void AcceptChannelSetHtlcBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannel_get_first_per_commitment_point(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_first_per_commitment_point")] public static extern long AcceptChannelGetFirstPerCommitmentPoint(long _this_ptr);
	// void AcceptChannel_set_first_per_commitment_point(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_first_per_commitment_point")] public static extern void AcceptChannelSetFirstPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ AcceptChannel_get_shutdown_scriptpubkey(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_shutdown_scriptpubkey")] public static extern long AcceptChannelGetShutdownScriptpubkey(long _this_ptr);
	// void AcceptChannel_set_shutdown_scriptpubkey(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_shutdown_scriptpubkey")] public static extern void AcceptChannelSetShutdownScriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures AcceptChannel_get_channel_type(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_channel_type")] public static extern long AcceptChannelGetChannelType(long _this_ptr);
	// void AcceptChannel_set_channel_type(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_channel_type")] public static extern void AcceptChannelSetChannelType(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAcceptChannel AcceptChannel_new(struct LDKThirtyTwoBytes temporary_channel_id_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t channel_reserve_satoshis_arg, uint64_t htlc_minimum_msat_arg, uint32_t minimum_depth_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_point_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_new")] public static extern long AcceptChannelNew(long _temporary_channel_id_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _channel_reserve_satoshis_arg, long _htlc_minimum_msat_arg, int _minimum_depth_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_point_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg);
	// uint64_t AcceptChannel_clone_ptr(LDKAcceptChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone_ptr")] public static extern long AcceptChannelClonePtr(long _arg);
	// struct LDKAcceptChannel AcceptChannel_clone(const struct LDKAcceptChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone")] public static extern long AcceptChannelClone(long _orig);
	// uint64_t AcceptChannel_hash(const struct LDKAcceptChannel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_hash")] public static extern long AcceptChannelHash(long _o);
	// bool AcceptChannel_eq(const struct LDKAcceptChannel *NONNULL_PTR a, const struct LDKAcceptChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_eq")] public static extern bool AcceptChannelEq(long _a, long _b);
	// void AcceptChannelV2_free(struct LDKAcceptChannelV2 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_free")] public static extern void AcceptChannelV2Free(long _this_obj);
	// const uint8_t (*AcceptChannelV2_get_temporary_channel_id(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_temporary_channel_id")] public static extern long AcceptChannelV2GetTemporaryChannelId(long _this_ptr);
	// void AcceptChannelV2_set_temporary_channel_id(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_temporary_channel_id")] public static extern void AcceptChannelV2SetTemporaryChannelId(long _this_ptr, long _val);
	// uint64_t AcceptChannelV2_get_funding_satoshis(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_funding_satoshis")] public static extern long AcceptChannelV2GetFundingSatoshis(long _this_ptr);
	// void AcceptChannelV2_set_funding_satoshis(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_funding_satoshis")] public static extern void AcceptChannelV2SetFundingSatoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannelV2_get_dust_limit_satoshis(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_dust_limit_satoshis")] public static extern long AcceptChannelV2GetDustLimitSatoshis(long _this_ptr);
	// void AcceptChannelV2_set_dust_limit_satoshis(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_dust_limit_satoshis")] public static extern void AcceptChannelV2SetDustLimitSatoshis(long _this_ptr, long _val);
	// uint64_t AcceptChannelV2_get_max_htlc_value_in_flight_msat(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_max_htlc_value_in_flight_msat")] public static extern long AcceptChannelV2GetMaxHtlcValueInFlightMsat(long _this_ptr);
	// void AcceptChannelV2_set_max_htlc_value_in_flight_msat(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_max_htlc_value_in_flight_msat")] public static extern void AcceptChannelV2SetMaxHtlcValueInFlightMsat(long _this_ptr, long _val);
	// uint64_t AcceptChannelV2_get_htlc_minimum_msat(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_htlc_minimum_msat")] public static extern long AcceptChannelV2GetHtlcMinimumMsat(long _this_ptr);
	// void AcceptChannelV2_set_htlc_minimum_msat(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_htlc_minimum_msat")] public static extern void AcceptChannelV2SetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint32_t AcceptChannelV2_get_minimum_depth(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_minimum_depth")] public static extern int AcceptChannelV2GetMinimumDepth(long _this_ptr);
	// void AcceptChannelV2_set_minimum_depth(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_minimum_depth")] public static extern void AcceptChannelV2SetMinimumDepth(long _this_ptr, int _val);
	// uint16_t AcceptChannelV2_get_to_self_delay(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_to_self_delay")] public static extern short AcceptChannelV2GetToSelfDelay(long _this_ptr);
	// void AcceptChannelV2_set_to_self_delay(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_to_self_delay")] public static extern void AcceptChannelV2SetToSelfDelay(long _this_ptr, short _val);
	// uint16_t AcceptChannelV2_get_max_accepted_htlcs(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_max_accepted_htlcs")] public static extern short AcceptChannelV2GetMaxAcceptedHtlcs(long _this_ptr);
	// void AcceptChannelV2_set_max_accepted_htlcs(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_max_accepted_htlcs")] public static extern void AcceptChannelV2SetMaxAcceptedHtlcs(long _this_ptr, short _val);
	// struct LDKPublicKey AcceptChannelV2_get_funding_pubkey(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_funding_pubkey")] public static extern long AcceptChannelV2GetFundingPubkey(long _this_ptr);
	// void AcceptChannelV2_set_funding_pubkey(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_funding_pubkey")] public static extern void AcceptChannelV2SetFundingPubkey(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_revocation_basepoint(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_revocation_basepoint")] public static extern long AcceptChannelV2GetRevocationBasepoint(long _this_ptr);
	// void AcceptChannelV2_set_revocation_basepoint(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_revocation_basepoint")] public static extern void AcceptChannelV2SetRevocationBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_payment_basepoint(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_payment_basepoint")] public static extern long AcceptChannelV2GetPaymentBasepoint(long _this_ptr);
	// void AcceptChannelV2_set_payment_basepoint(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_payment_basepoint")] public static extern void AcceptChannelV2SetPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_delayed_payment_basepoint(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_delayed_payment_basepoint")] public static extern long AcceptChannelV2GetDelayedPaymentBasepoint(long _this_ptr);
	// void AcceptChannelV2_set_delayed_payment_basepoint(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_delayed_payment_basepoint")] public static extern void AcceptChannelV2SetDelayedPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_htlc_basepoint(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_htlc_basepoint")] public static extern long AcceptChannelV2GetHtlcBasepoint(long _this_ptr);
	// void AcceptChannelV2_set_htlc_basepoint(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_htlc_basepoint")] public static extern void AcceptChannelV2SetHtlcBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_first_per_commitment_point(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_first_per_commitment_point")] public static extern long AcceptChannelV2GetFirstPerCommitmentPoint(long _this_ptr);
	// void AcceptChannelV2_set_first_per_commitment_point(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_first_per_commitment_point")] public static extern void AcceptChannelV2SetFirstPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_second_per_commitment_point(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_second_per_commitment_point")] public static extern long AcceptChannelV2GetSecondPerCommitmentPoint(long _this_ptr);
	// void AcceptChannelV2_set_second_per_commitment_point(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_second_per_commitment_point")] public static extern void AcceptChannelV2SetSecondPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ AcceptChannelV2_get_shutdown_scriptpubkey(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_shutdown_scriptpubkey")] public static extern long AcceptChannelV2GetShutdownScriptpubkey(long _this_ptr);
	// void AcceptChannelV2_set_shutdown_scriptpubkey(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_shutdown_scriptpubkey")] public static extern void AcceptChannelV2SetShutdownScriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures AcceptChannelV2_get_channel_type(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_channel_type")] public static extern long AcceptChannelV2GetChannelType(long _this_ptr);
	// void AcceptChannelV2_set_channel_type(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_channel_type")] public static extern void AcceptChannelV2SetChannelType(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ AcceptChannelV2_get_require_confirmed_inputs(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_require_confirmed_inputs")] public static extern COption_NoneZ AcceptChannelV2GetRequireConfirmedInputs(long _this_ptr);
	// void AcceptChannelV2_set_require_confirmed_inputs(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_require_confirmed_inputs")] public static extern void AcceptChannelV2SetRequireConfirmedInputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKAcceptChannelV2 AcceptChannelV2_new(struct LDKThirtyTwoBytes temporary_channel_id_arg, uint64_t funding_satoshis_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t htlc_minimum_msat_arg, uint32_t minimum_depth_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_basepoint_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, struct LDKPublicKey second_per_commitment_point_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_new")] public static extern long AcceptChannelV2New(long _temporary_channel_id_arg, long _funding_satoshis_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _htlc_minimum_msat_arg, int _minimum_depth_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_basepoint_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, long _second_per_commitment_point_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t AcceptChannelV2_clone_ptr(LDKAcceptChannelV2 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_clone_ptr")] public static extern long AcceptChannelV2ClonePtr(long _arg);
	// struct LDKAcceptChannelV2 AcceptChannelV2_clone(const struct LDKAcceptChannelV2 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_clone")] public static extern long AcceptChannelV2Clone(long _orig);
	// uint64_t AcceptChannelV2_hash(const struct LDKAcceptChannelV2 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_hash")] public static extern long AcceptChannelV2Hash(long _o);
	// bool AcceptChannelV2_eq(const struct LDKAcceptChannelV2 *NONNULL_PTR a, const struct LDKAcceptChannelV2 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_eq")] public static extern bool AcceptChannelV2Eq(long _a, long _b);
	// void FundingCreated_free(struct LDKFundingCreated this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_free")] public static extern void FundingCreatedFree(long _this_obj);
	// const uint8_t (*FundingCreated_get_temporary_channel_id(const struct LDKFundingCreated *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_temporary_channel_id")] public static extern long FundingCreatedGetTemporaryChannelId(long _this_ptr);
	// void FundingCreated_set_temporary_channel_id(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_temporary_channel_id")] public static extern void FundingCreatedSetTemporaryChannelId(long _this_ptr, long _val);
	// const uint8_t (*FundingCreated_get_funding_txid(const struct LDKFundingCreated *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_txid")] public static extern long FundingCreatedGetFundingTxid(long _this_ptr);
	// void FundingCreated_set_funding_txid(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_txid")] public static extern void FundingCreatedSetFundingTxid(long _this_ptr, long _val);
	// uint16_t FundingCreated_get_funding_output_index(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_output_index")] public static extern short FundingCreatedGetFundingOutputIndex(long _this_ptr);
	// void FundingCreated_set_funding_output_index(struct LDKFundingCreated *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_output_index")] public static extern void FundingCreatedSetFundingOutputIndex(long _this_ptr, short _val);
	// struct LDKECDSASignature FundingCreated_get_signature(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_signature")] public static extern long FundingCreatedGetSignature(long _this_ptr);
	// void FundingCreated_set_signature(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_signature")] public static extern void FundingCreatedSetSignature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFundingCreated FundingCreated_new(struct LDKThirtyTwoBytes temporary_channel_id_arg, struct LDKThirtyTwoBytes funding_txid_arg, uint16_t funding_output_index_arg, struct LDKECDSASignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_new")] public static extern long FundingCreatedNew(long _temporary_channel_id_arg, long _funding_txid_arg, short _funding_output_index_arg, long _signature_arg);
	// uint64_t FundingCreated_clone_ptr(LDKFundingCreated *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone_ptr")] public static extern long FundingCreatedClonePtr(long _arg);
	// struct LDKFundingCreated FundingCreated_clone(const struct LDKFundingCreated *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone")] public static extern long FundingCreatedClone(long _orig);
	// uint64_t FundingCreated_hash(const struct LDKFundingCreated *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_hash")] public static extern long FundingCreatedHash(long _o);
	// bool FundingCreated_eq(const struct LDKFundingCreated *NONNULL_PTR a, const struct LDKFundingCreated *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_eq")] public static extern bool FundingCreatedEq(long _a, long _b);
	// void FundingSigned_free(struct LDKFundingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_free")] public static extern void FundingSignedFree(long _this_obj);
	// const uint8_t (*FundingSigned_get_channel_id(const struct LDKFundingSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_channel_id")] public static extern long FundingSignedGetChannelId(long _this_ptr);
	// void FundingSigned_set_channel_id(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_channel_id")] public static extern void FundingSignedSetChannelId(long _this_ptr, long _val);
	// struct LDKECDSASignature FundingSigned_get_signature(const struct LDKFundingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_signature")] public static extern long FundingSignedGetSignature(long _this_ptr);
	// void FundingSigned_set_signature(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_signature")] public static extern void FundingSignedSetSignature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFundingSigned FundingSigned_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKECDSASignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_new")] public static extern long FundingSignedNew(long _channel_id_arg, long _signature_arg);
	// uint64_t FundingSigned_clone_ptr(LDKFundingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone_ptr")] public static extern long FundingSignedClonePtr(long _arg);
	// struct LDKFundingSigned FundingSigned_clone(const struct LDKFundingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone")] public static extern long FundingSignedClone(long _orig);
	// uint64_t FundingSigned_hash(const struct LDKFundingSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_hash")] public static extern long FundingSignedHash(long _o);
	// bool FundingSigned_eq(const struct LDKFundingSigned *NONNULL_PTR a, const struct LDKFundingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_eq")] public static extern bool FundingSignedEq(long _a, long _b);
	// void ChannelReady_free(struct LDKChannelReady this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_free")] public static extern void ChannelReadyFree(long _this_obj);
	// const uint8_t (*ChannelReady_get_channel_id(const struct LDKChannelReady *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_channel_id")] public static extern long ChannelReadyGetChannelId(long _this_ptr);
	// void ChannelReady_set_channel_id(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_channel_id")] public static extern void ChannelReadySetChannelId(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelReady_get_next_per_commitment_point(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_next_per_commitment_point")] public static extern long ChannelReadyGetNextPerCommitmentPoint(long _this_ptr);
	// void ChannelReady_set_next_per_commitment_point(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_next_per_commitment_point")] public static extern void ChannelReadySetNextPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelReady_get_short_channel_id_alias(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_short_channel_id_alias")] public static extern long ChannelReadyGetShortChannelIdAlias(long _this_ptr);
	// void ChannelReady_set_short_channel_id_alias(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_short_channel_id_alias")] public static extern void ChannelReadySetShortChannelIdAlias(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelReady ChannelReady_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKPublicKey next_per_commitment_point_arg, struct LDKCOption_u64Z short_channel_id_alias_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_new")] public static extern long ChannelReadyNew(long _channel_id_arg, long _next_per_commitment_point_arg, long _short_channel_id_alias_arg);
	// uint64_t ChannelReady_clone_ptr(LDKChannelReady *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone_ptr")] public static extern long ChannelReadyClonePtr(long _arg);
	// struct LDKChannelReady ChannelReady_clone(const struct LDKChannelReady *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone")] public static extern long ChannelReadyClone(long _orig);
	// uint64_t ChannelReady_hash(const struct LDKChannelReady *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_hash")] public static extern long ChannelReadyHash(long _o);
	// bool ChannelReady_eq(const struct LDKChannelReady *NONNULL_PTR a, const struct LDKChannelReady *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_eq")] public static extern bool ChannelReadyEq(long _a, long _b);
	// void Stfu_free(struct LDKStfu this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_free")] public static extern void StfuFree(long _this_obj);
	// const uint8_t (*Stfu_get_channel_id(const struct LDKStfu *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_get_channel_id")] public static extern long StfuGetChannelId(long _this_ptr);
	// void Stfu_set_channel_id(struct LDKStfu *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_set_channel_id")] public static extern void StfuSetChannelId(long _this_ptr, long _val);
	// uint8_t Stfu_get_initiator(const struct LDKStfu *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_get_initiator")] public static extern byte StfuGetInitiator(long _this_ptr);
	// void Stfu_set_initiator(struct LDKStfu *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_set_initiator")] public static extern void StfuSetInitiator(long _this_ptr, byte _val);
	// MUST_USE_RES struct LDKStfu Stfu_new(struct LDKThirtyTwoBytes channel_id_arg, uint8_t initiator_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_new")] public static extern long StfuNew(long _channel_id_arg, byte _initiator_arg);
	// uint64_t Stfu_clone_ptr(LDKStfu *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_clone_ptr")] public static extern long StfuClonePtr(long _arg);
	// struct LDKStfu Stfu_clone(const struct LDKStfu *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_clone")] public static extern long StfuClone(long _orig);
	// bool Stfu_eq(const struct LDKStfu *NONNULL_PTR a, const struct LDKStfu *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_eq")] public static extern bool StfuEq(long _a, long _b);
	// void Splice_free(struct LDKSplice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_free")] public static extern void SpliceFree(long _this_obj);
	// const uint8_t (*Splice_get_channel_id(const struct LDKSplice *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_channel_id")] public static extern long SpliceGetChannelId(long _this_ptr);
	// void Splice_set_channel_id(struct LDKSplice *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_channel_id")] public static extern void SpliceSetChannelId(long _this_ptr, long _val);
	// const uint8_t (*Splice_get_chain_hash(const struct LDKSplice *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_chain_hash")] public static extern long SpliceGetChainHash(long _this_ptr);
	// void Splice_set_chain_hash(struct LDKSplice *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_chain_hash")] public static extern void SpliceSetChainHash(long _this_ptr, long _val);
	// int64_t Splice_get_relative_satoshis(const struct LDKSplice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_relative_satoshis")] public static extern long SpliceGetRelativeSatoshis(long _this_ptr);
	// void Splice_set_relative_satoshis(struct LDKSplice *NONNULL_PTR this_ptr, int64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_relative_satoshis")] public static extern void SpliceSetRelativeSatoshis(long _this_ptr, long _val);
	// uint32_t Splice_get_funding_feerate_perkw(const struct LDKSplice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_funding_feerate_perkw")] public static extern int SpliceGetFundingFeeratePerkw(long _this_ptr);
	// void Splice_set_funding_feerate_perkw(struct LDKSplice *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_funding_feerate_perkw")] public static extern void SpliceSetFundingFeeratePerkw(long _this_ptr, int _val);
	// uint32_t Splice_get_locktime(const struct LDKSplice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_locktime")] public static extern int SpliceGetLocktime(long _this_ptr);
	// void Splice_set_locktime(struct LDKSplice *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_locktime")] public static extern void SpliceSetLocktime(long _this_ptr, int _val);
	// struct LDKPublicKey Splice_get_funding_pubkey(const struct LDKSplice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_get_funding_pubkey")] public static extern long SpliceGetFundingPubkey(long _this_ptr);
	// void Splice_set_funding_pubkey(struct LDKSplice *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_set_funding_pubkey")] public static extern void SpliceSetFundingPubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKSplice Splice_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKThirtyTwoBytes chain_hash_arg, int64_t relative_satoshis_arg, uint32_t funding_feerate_perkw_arg, uint32_t locktime_arg, struct LDKPublicKey funding_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_new")] public static extern long SpliceNew(long _channel_id_arg, long _chain_hash_arg, long _relative_satoshis_arg, int _funding_feerate_perkw_arg, int _locktime_arg, long _funding_pubkey_arg);
	// uint64_t Splice_clone_ptr(LDKSplice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_clone_ptr")] public static extern long SpliceClonePtr(long _arg);
	// struct LDKSplice Splice_clone(const struct LDKSplice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_clone")] public static extern long SpliceClone(long _orig);
	// bool Splice_eq(const struct LDKSplice *NONNULL_PTR a, const struct LDKSplice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_eq")] public static extern bool SpliceEq(long _a, long _b);
	// void SpliceAck_free(struct LDKSpliceAck this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_free")] public static extern void SpliceAckFree(long _this_obj);
	// const uint8_t (*SpliceAck_get_channel_id(const struct LDKSpliceAck *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_channel_id")] public static extern long SpliceAckGetChannelId(long _this_ptr);
	// void SpliceAck_set_channel_id(struct LDKSpliceAck *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_channel_id")] public static extern void SpliceAckSetChannelId(long _this_ptr, long _val);
	// const uint8_t (*SpliceAck_get_chain_hash(const struct LDKSpliceAck *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_chain_hash")] public static extern long SpliceAckGetChainHash(long _this_ptr);
	// void SpliceAck_set_chain_hash(struct LDKSpliceAck *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_chain_hash")] public static extern void SpliceAckSetChainHash(long _this_ptr, long _val);
	// int64_t SpliceAck_get_relative_satoshis(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_relative_satoshis")] public static extern long SpliceAckGetRelativeSatoshis(long _this_ptr);
	// void SpliceAck_set_relative_satoshis(struct LDKSpliceAck *NONNULL_PTR this_ptr, int64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_relative_satoshis")] public static extern void SpliceAckSetRelativeSatoshis(long _this_ptr, long _val);
	// struct LDKPublicKey SpliceAck_get_funding_pubkey(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_funding_pubkey")] public static extern long SpliceAckGetFundingPubkey(long _this_ptr);
	// void SpliceAck_set_funding_pubkey(struct LDKSpliceAck *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_funding_pubkey")] public static extern void SpliceAckSetFundingPubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKSpliceAck SpliceAck_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKThirtyTwoBytes chain_hash_arg, int64_t relative_satoshis_arg, struct LDKPublicKey funding_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_new")] public static extern long SpliceAckNew(long _channel_id_arg, long _chain_hash_arg, long _relative_satoshis_arg, long _funding_pubkey_arg);
	// uint64_t SpliceAck_clone_ptr(LDKSpliceAck *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_clone_ptr")] public static extern long SpliceAckClonePtr(long _arg);
	// struct LDKSpliceAck SpliceAck_clone(const struct LDKSpliceAck *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_clone")] public static extern long SpliceAckClone(long _orig);
	// bool SpliceAck_eq(const struct LDKSpliceAck *NONNULL_PTR a, const struct LDKSpliceAck *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_eq")] public static extern bool SpliceAckEq(long _a, long _b);
	// void SpliceLocked_free(struct LDKSpliceLocked this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_free")] public static extern void SpliceLockedFree(long _this_obj);
	// const uint8_t (*SpliceLocked_get_channel_id(const struct LDKSpliceLocked *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_get_channel_id")] public static extern long SpliceLockedGetChannelId(long _this_ptr);
	// void SpliceLocked_set_channel_id(struct LDKSpliceLocked *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_set_channel_id")] public static extern void SpliceLockedSetChannelId(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKSpliceLocked SpliceLocked_new(struct LDKThirtyTwoBytes channel_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_new")] public static extern long SpliceLockedNew(long _channel_id_arg);
	// uint64_t SpliceLocked_clone_ptr(LDKSpliceLocked *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_clone_ptr")] public static extern long SpliceLockedClonePtr(long _arg);
	// struct LDKSpliceLocked SpliceLocked_clone(const struct LDKSpliceLocked *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_clone")] public static extern long SpliceLockedClone(long _orig);
	// bool SpliceLocked_eq(const struct LDKSpliceLocked *NONNULL_PTR a, const struct LDKSpliceLocked *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_eq")] public static extern bool SpliceLockedEq(long _a, long _b);
	// void TxAddInput_free(struct LDKTxAddInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_free")] public static extern void TxAddInputFree(long _this_obj);
	// const uint8_t (*TxAddInput_get_channel_id(const struct LDKTxAddInput *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_channel_id")] public static extern long TxAddInputGetChannelId(long _this_ptr);
	// void TxAddInput_set_channel_id(struct LDKTxAddInput *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_channel_id")] public static extern void TxAddInputSetChannelId(long _this_ptr, long _val);
	// uint64_t TxAddInput_get_serial_id(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_serial_id")] public static extern long TxAddInputGetSerialId(long _this_ptr);
	// void TxAddInput_set_serial_id(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_serial_id")] public static extern void TxAddInputSetSerialId(long _this_ptr, long _val);
	// struct LDKTransactionU16LenLimited TxAddInput_get_prevtx(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_prevtx")] public static extern long TxAddInputGetPrevtx(long _this_ptr);
	// void TxAddInput_set_prevtx(struct LDKTxAddInput *NONNULL_PTR this_ptr, struct LDKTransactionU16LenLimited val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_prevtx")] public static extern void TxAddInputSetPrevtx(long _this_ptr, long _val);
	// uint32_t TxAddInput_get_prevtx_out(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_prevtx_out")] public static extern int TxAddInputGetPrevtxOut(long _this_ptr);
	// void TxAddInput_set_prevtx_out(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_prevtx_out")] public static extern void TxAddInputSetPrevtxOut(long _this_ptr, int _val);
	// uint32_t TxAddInput_get_sequence(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_sequence")] public static extern int TxAddInputGetSequence(long _this_ptr);
	// void TxAddInput_set_sequence(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_sequence")] public static extern void TxAddInputSetSequence(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKTxAddInput TxAddInput_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t serial_id_arg, struct LDKTransactionU16LenLimited prevtx_arg, uint32_t prevtx_out_arg, uint32_t sequence_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_new")] public static extern long TxAddInputNew(long _channel_id_arg, long _serial_id_arg, long _prevtx_arg, int _prevtx_out_arg, int _sequence_arg);
	// uint64_t TxAddInput_clone_ptr(LDKTxAddInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_clone_ptr")] public static extern long TxAddInputClonePtr(long _arg);
	// struct LDKTxAddInput TxAddInput_clone(const struct LDKTxAddInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_clone")] public static extern long TxAddInputClone(long _orig);
	// uint64_t TxAddInput_hash(const struct LDKTxAddInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_hash")] public static extern long TxAddInputHash(long _o);
	// bool TxAddInput_eq(const struct LDKTxAddInput *NONNULL_PTR a, const struct LDKTxAddInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_eq")] public static extern bool TxAddInputEq(long _a, long _b);
	// void TxAddOutput_free(struct LDKTxAddOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_free")] public static extern void TxAddOutputFree(long _this_obj);
	// const uint8_t (*TxAddOutput_get_channel_id(const struct LDKTxAddOutput *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_channel_id")] public static extern long TxAddOutputGetChannelId(long _this_ptr);
	// void TxAddOutput_set_channel_id(struct LDKTxAddOutput *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_channel_id")] public static extern void TxAddOutputSetChannelId(long _this_ptr, long _val);
	// uint64_t TxAddOutput_get_serial_id(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_serial_id")] public static extern long TxAddOutputGetSerialId(long _this_ptr);
	// void TxAddOutput_set_serial_id(struct LDKTxAddOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_serial_id")] public static extern void TxAddOutputSetSerialId(long _this_ptr, long _val);
	// uint64_t TxAddOutput_get_sats(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_sats")] public static extern long TxAddOutputGetSats(long _this_ptr);
	// void TxAddOutput_set_sats(struct LDKTxAddOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_sats")] public static extern void TxAddOutputSetSats(long _this_ptr, long _val);
	// struct LDKCVec_u8Z TxAddOutput_get_script(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_script")] public static extern long TxAddOutputGetScript(long _this_ptr);
	// void TxAddOutput_set_script(struct LDKTxAddOutput *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_script")] public static extern void TxAddOutputSetScript(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAddOutput TxAddOutput_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t serial_id_arg, uint64_t sats_arg, struct LDKCVec_u8Z script_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_new")] public static extern long TxAddOutputNew(long _channel_id_arg, long _serial_id_arg, long _sats_arg, long _script_arg);
	// uint64_t TxAddOutput_clone_ptr(LDKTxAddOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_clone_ptr")] public static extern long TxAddOutputClonePtr(long _arg);
	// struct LDKTxAddOutput TxAddOutput_clone(const struct LDKTxAddOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_clone")] public static extern long TxAddOutputClone(long _orig);
	// uint64_t TxAddOutput_hash(const struct LDKTxAddOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_hash")] public static extern long TxAddOutputHash(long _o);
	// bool TxAddOutput_eq(const struct LDKTxAddOutput *NONNULL_PTR a, const struct LDKTxAddOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_eq")] public static extern bool TxAddOutputEq(long _a, long _b);
	// void TxRemoveInput_free(struct LDKTxRemoveInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_free")] public static extern void TxRemoveInputFree(long _this_obj);
	// const uint8_t (*TxRemoveInput_get_channel_id(const struct LDKTxRemoveInput *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_get_channel_id")] public static extern long TxRemoveInputGetChannelId(long _this_ptr);
	// void TxRemoveInput_set_channel_id(struct LDKTxRemoveInput *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_set_channel_id")] public static extern void TxRemoveInputSetChannelId(long _this_ptr, long _val);
	// uint64_t TxRemoveInput_get_serial_id(const struct LDKTxRemoveInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_get_serial_id")] public static extern long TxRemoveInputGetSerialId(long _this_ptr);
	// void TxRemoveInput_set_serial_id(struct LDKTxRemoveInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_set_serial_id")] public static extern void TxRemoveInputSetSerialId(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxRemoveInput TxRemoveInput_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t serial_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_new")] public static extern long TxRemoveInputNew(long _channel_id_arg, long _serial_id_arg);
	// uint64_t TxRemoveInput_clone_ptr(LDKTxRemoveInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_clone_ptr")] public static extern long TxRemoveInputClonePtr(long _arg);
	// struct LDKTxRemoveInput TxRemoveInput_clone(const struct LDKTxRemoveInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_clone")] public static extern long TxRemoveInputClone(long _orig);
	// uint64_t TxRemoveInput_hash(const struct LDKTxRemoveInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_hash")] public static extern long TxRemoveInputHash(long _o);
	// bool TxRemoveInput_eq(const struct LDKTxRemoveInput *NONNULL_PTR a, const struct LDKTxRemoveInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_eq")] public static extern bool TxRemoveInputEq(long _a, long _b);
	// void TxRemoveOutput_free(struct LDKTxRemoveOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_free")] public static extern void TxRemoveOutputFree(long _this_obj);
	// const uint8_t (*TxRemoveOutput_get_channel_id(const struct LDKTxRemoveOutput *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_get_channel_id")] public static extern long TxRemoveOutputGetChannelId(long _this_ptr);
	// void TxRemoveOutput_set_channel_id(struct LDKTxRemoveOutput *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_set_channel_id")] public static extern void TxRemoveOutputSetChannelId(long _this_ptr, long _val);
	// uint64_t TxRemoveOutput_get_serial_id(const struct LDKTxRemoveOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_get_serial_id")] public static extern long TxRemoveOutputGetSerialId(long _this_ptr);
	// void TxRemoveOutput_set_serial_id(struct LDKTxRemoveOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_set_serial_id")] public static extern void TxRemoveOutputSetSerialId(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxRemoveOutput TxRemoveOutput_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t serial_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_new")] public static extern long TxRemoveOutputNew(long _channel_id_arg, long _serial_id_arg);
	// uint64_t TxRemoveOutput_clone_ptr(LDKTxRemoveOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_clone_ptr")] public static extern long TxRemoveOutputClonePtr(long _arg);
	// struct LDKTxRemoveOutput TxRemoveOutput_clone(const struct LDKTxRemoveOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_clone")] public static extern long TxRemoveOutputClone(long _orig);
	// uint64_t TxRemoveOutput_hash(const struct LDKTxRemoveOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_hash")] public static extern long TxRemoveOutputHash(long _o);
	// bool TxRemoveOutput_eq(const struct LDKTxRemoveOutput *NONNULL_PTR a, const struct LDKTxRemoveOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_eq")] public static extern bool TxRemoveOutputEq(long _a, long _b);
	// void TxComplete_free(struct LDKTxComplete this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_free")] public static extern void TxCompleteFree(long _this_obj);
	// const uint8_t (*TxComplete_get_channel_id(const struct LDKTxComplete *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_get_channel_id")] public static extern long TxCompleteGetChannelId(long _this_ptr);
	// void TxComplete_set_channel_id(struct LDKTxComplete *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_set_channel_id")] public static extern void TxCompleteSetChannelId(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxComplete TxComplete_new(struct LDKThirtyTwoBytes channel_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_new")] public static extern long TxCompleteNew(long _channel_id_arg);
	// uint64_t TxComplete_clone_ptr(LDKTxComplete *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_clone_ptr")] public static extern long TxCompleteClonePtr(long _arg);
	// struct LDKTxComplete TxComplete_clone(const struct LDKTxComplete *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_clone")] public static extern long TxCompleteClone(long _orig);
	// uint64_t TxComplete_hash(const struct LDKTxComplete *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_hash")] public static extern long TxCompleteHash(long _o);
	// bool TxComplete_eq(const struct LDKTxComplete *NONNULL_PTR a, const struct LDKTxComplete *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_eq")] public static extern bool TxCompleteEq(long _a, long _b);
	// void TxSignatures_free(struct LDKTxSignatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_free")] public static extern void TxSignaturesFree(long _this_obj);
	// const uint8_t (*TxSignatures_get_channel_id(const struct LDKTxSignatures *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_channel_id")] public static extern long TxSignaturesGetChannelId(long _this_ptr);
	// void TxSignatures_set_channel_id(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_channel_id")] public static extern void TxSignaturesSetChannelId(long _this_ptr, long _val);
	// const uint8_t (*TxSignatures_get_tx_hash(const struct LDKTxSignatures *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_tx_hash")] public static extern long TxSignaturesGetTxHash(long _this_ptr);
	// void TxSignatures_set_tx_hash(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_tx_hash")] public static extern void TxSignaturesSetTxHash(long _this_ptr, long _val);
	// struct LDKCVec_WitnessZ TxSignatures_get_witnesses(const struct LDKTxSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_witnesses")] public static extern long TxSignaturesGetWitnesses(long _this_ptr);
	// void TxSignatures_set_witnesses(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKCVec_WitnessZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_witnesses")] public static extern void TxSignaturesSetWitnesses(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxSignatures TxSignatures_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKThirtyTwoBytes tx_hash_arg, struct LDKCVec_WitnessZ witnesses_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_new")] public static extern long TxSignaturesNew(long _channel_id_arg, long _tx_hash_arg, long _witnesses_arg);
	// uint64_t TxSignatures_clone_ptr(LDKTxSignatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_clone_ptr")] public static extern long TxSignaturesClonePtr(long _arg);
	// struct LDKTxSignatures TxSignatures_clone(const struct LDKTxSignatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_clone")] public static extern long TxSignaturesClone(long _orig);
	// uint64_t TxSignatures_hash(const struct LDKTxSignatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_hash")] public static extern long TxSignaturesHash(long _o);
	// bool TxSignatures_eq(const struct LDKTxSignatures *NONNULL_PTR a, const struct LDKTxSignatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_eq")] public static extern bool TxSignaturesEq(long _a, long _b);
	// void TxInitRbf_free(struct LDKTxInitRbf this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_free")] public static extern void TxInitRbfFree(long _this_obj);
	// const uint8_t (*TxInitRbf_get_channel_id(const struct LDKTxInitRbf *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_channel_id")] public static extern long TxInitRbfGetChannelId(long _this_ptr);
	// void TxInitRbf_set_channel_id(struct LDKTxInitRbf *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_channel_id")] public static extern void TxInitRbfSetChannelId(long _this_ptr, long _val);
	// uint32_t TxInitRbf_get_locktime(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_locktime")] public static extern int TxInitRbfGetLocktime(long _this_ptr);
	// void TxInitRbf_set_locktime(struct LDKTxInitRbf *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_locktime")] public static extern void TxInitRbfSetLocktime(long _this_ptr, int _val);
	// uint32_t TxInitRbf_get_feerate_sat_per_1000_weight(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_feerate_sat_per_1000_weight")] public static extern int TxInitRbfGetFeerateSatPer1000Weight(long _this_ptr);
	// void TxInitRbf_set_feerate_sat_per_1000_weight(struct LDKTxInitRbf *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_feerate_sat_per_1000_weight")] public static extern void TxInitRbfSetFeerateSatPer1000Weight(long _this_ptr, int _val);
	// struct LDKCOption_i64Z TxInitRbf_get_funding_output_contribution(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_funding_output_contribution")] public static extern long TxInitRbfGetFundingOutputContribution(long _this_ptr);
	// void TxInitRbf_set_funding_output_contribution(struct LDKTxInitRbf *NONNULL_PTR this_ptr, struct LDKCOption_i64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_funding_output_contribution")] public static extern void TxInitRbfSetFundingOutputContribution(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxInitRbf TxInitRbf_new(struct LDKThirtyTwoBytes channel_id_arg, uint32_t locktime_arg, uint32_t feerate_sat_per_1000_weight_arg, struct LDKCOption_i64Z funding_output_contribution_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_new")] public static extern long TxInitRbfNew(long _channel_id_arg, int _locktime_arg, int _feerate_sat_per_1000_weight_arg, long _funding_output_contribution_arg);
	// uint64_t TxInitRbf_clone_ptr(LDKTxInitRbf *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_clone_ptr")] public static extern long TxInitRbfClonePtr(long _arg);
	// struct LDKTxInitRbf TxInitRbf_clone(const struct LDKTxInitRbf *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_clone")] public static extern long TxInitRbfClone(long _orig);
	// uint64_t TxInitRbf_hash(const struct LDKTxInitRbf *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_hash")] public static extern long TxInitRbfHash(long _o);
	// bool TxInitRbf_eq(const struct LDKTxInitRbf *NONNULL_PTR a, const struct LDKTxInitRbf *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_eq")] public static extern bool TxInitRbfEq(long _a, long _b);
	// void TxAckRbf_free(struct LDKTxAckRbf this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_free")] public static extern void TxAckRbfFree(long _this_obj);
	// const uint8_t (*TxAckRbf_get_channel_id(const struct LDKTxAckRbf *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_get_channel_id")] public static extern long TxAckRbfGetChannelId(long _this_ptr);
	// void TxAckRbf_set_channel_id(struct LDKTxAckRbf *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_set_channel_id")] public static extern void TxAckRbfSetChannelId(long _this_ptr, long _val);
	// struct LDKCOption_i64Z TxAckRbf_get_funding_output_contribution(const struct LDKTxAckRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_get_funding_output_contribution")] public static extern long TxAckRbfGetFundingOutputContribution(long _this_ptr);
	// void TxAckRbf_set_funding_output_contribution(struct LDKTxAckRbf *NONNULL_PTR this_ptr, struct LDKCOption_i64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_set_funding_output_contribution")] public static extern void TxAckRbfSetFundingOutputContribution(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAckRbf TxAckRbf_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKCOption_i64Z funding_output_contribution_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_new")] public static extern long TxAckRbfNew(long _channel_id_arg, long _funding_output_contribution_arg);
	// uint64_t TxAckRbf_clone_ptr(LDKTxAckRbf *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_clone_ptr")] public static extern long TxAckRbfClonePtr(long _arg);
	// struct LDKTxAckRbf TxAckRbf_clone(const struct LDKTxAckRbf *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_clone")] public static extern long TxAckRbfClone(long _orig);
	// uint64_t TxAckRbf_hash(const struct LDKTxAckRbf *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_hash")] public static extern long TxAckRbfHash(long _o);
	// bool TxAckRbf_eq(const struct LDKTxAckRbf *NONNULL_PTR a, const struct LDKTxAckRbf *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_eq")] public static extern bool TxAckRbfEq(long _a, long _b);
	// void TxAbort_free(struct LDKTxAbort this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_free")] public static extern void TxAbortFree(long _this_obj);
	// const uint8_t (*TxAbort_get_channel_id(const struct LDKTxAbort *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_get_channel_id")] public static extern long TxAbortGetChannelId(long _this_ptr);
	// void TxAbort_set_channel_id(struct LDKTxAbort *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_set_channel_id")] public static extern void TxAbortSetChannelId(long _this_ptr, long _val);
	// struct LDKCVec_u8Z TxAbort_get_data(const struct LDKTxAbort *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_get_data")] public static extern long TxAbortGetData(long _this_ptr);
	// void TxAbort_set_data(struct LDKTxAbort *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_set_data")] public static extern void TxAbortSetData(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAbort TxAbort_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKCVec_u8Z data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_new")] public static extern long TxAbortNew(long _channel_id_arg, long _data_arg);
	// uint64_t TxAbort_clone_ptr(LDKTxAbort *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_clone_ptr")] public static extern long TxAbortClonePtr(long _arg);
	// struct LDKTxAbort TxAbort_clone(const struct LDKTxAbort *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_clone")] public static extern long TxAbortClone(long _orig);
	// uint64_t TxAbort_hash(const struct LDKTxAbort *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_hash")] public static extern long TxAbortHash(long _o);
	// bool TxAbort_eq(const struct LDKTxAbort *NONNULL_PTR a, const struct LDKTxAbort *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_eq")] public static extern bool TxAbortEq(long _a, long _b);
	// void Shutdown_free(struct LDKShutdown this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_free")] public static extern void ShutdownFree(long _this_obj);
	// const uint8_t (*Shutdown_get_channel_id(const struct LDKShutdown *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_channel_id")] public static extern long ShutdownGetChannelId(long _this_ptr);
	// void Shutdown_set_channel_id(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_channel_id")] public static extern void ShutdownSetChannelId(long _this_ptr, long _val);
	// struct LDKCVec_u8Z Shutdown_get_scriptpubkey(const struct LDKShutdown *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_scriptpubkey")] public static extern long ShutdownGetScriptpubkey(long _this_ptr);
	// void Shutdown_set_scriptpubkey(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_scriptpubkey")] public static extern void ShutdownSetScriptpubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKShutdown Shutdown_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKCVec_u8Z scriptpubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_new")] public static extern long ShutdownNew(long _channel_id_arg, long _scriptpubkey_arg);
	// uint64_t Shutdown_clone_ptr(LDKShutdown *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone_ptr")] public static extern long ShutdownClonePtr(long _arg);
	// struct LDKShutdown Shutdown_clone(const struct LDKShutdown *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone")] public static extern long ShutdownClone(long _orig);
	// uint64_t Shutdown_hash(const struct LDKShutdown *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_hash")] public static extern long ShutdownHash(long _o);
	// bool Shutdown_eq(const struct LDKShutdown *NONNULL_PTR a, const struct LDKShutdown *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_eq")] public static extern bool ShutdownEq(long _a, long _b);
	// void ClosingSignedFeeRange_free(struct LDKClosingSignedFeeRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_free")] public static extern void ClosingSignedFeeRangeFree(long _this_obj);
	// uint64_t ClosingSignedFeeRange_get_min_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_min_fee_satoshis")] public static extern long ClosingSignedFeeRangeGetMinFeeSatoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_min_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_min_fee_satoshis")] public static extern void ClosingSignedFeeRangeSetMinFeeSatoshis(long _this_ptr, long _val);
	// uint64_t ClosingSignedFeeRange_get_max_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_max_fee_satoshis")] public static extern long ClosingSignedFeeRangeGetMaxFeeSatoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_max_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_max_fee_satoshis")] public static extern void ClosingSignedFeeRangeSetMaxFeeSatoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSignedFeeRange ClosingSignedFeeRange_new(uint64_t min_fee_satoshis_arg, uint64_t max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_new")] public static extern long ClosingSignedFeeRangeNew(long _min_fee_satoshis_arg, long _max_fee_satoshis_arg);
	// uint64_t ClosingSignedFeeRange_clone_ptr(LDKClosingSignedFeeRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone_ptr")] public static extern long ClosingSignedFeeRangeClonePtr(long _arg);
	// struct LDKClosingSignedFeeRange ClosingSignedFeeRange_clone(const struct LDKClosingSignedFeeRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone")] public static extern long ClosingSignedFeeRangeClone(long _orig);
	// uint64_t ClosingSignedFeeRange_hash(const struct LDKClosingSignedFeeRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_hash")] public static extern long ClosingSignedFeeRangeHash(long _o);
	// bool ClosingSignedFeeRange_eq(const struct LDKClosingSignedFeeRange *NONNULL_PTR a, const struct LDKClosingSignedFeeRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_eq")] public static extern bool ClosingSignedFeeRangeEq(long _a, long _b);
	// void ClosingSigned_free(struct LDKClosingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_free")] public static extern void ClosingSignedFree(long _this_obj);
	// const uint8_t (*ClosingSigned_get_channel_id(const struct LDKClosingSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_channel_id")] public static extern long ClosingSignedGetChannelId(long _this_ptr);
	// void ClosingSigned_set_channel_id(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_channel_id")] public static extern void ClosingSignedSetChannelId(long _this_ptr, long _val);
	// uint64_t ClosingSigned_get_fee_satoshis(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_satoshis")] public static extern long ClosingSignedGetFeeSatoshis(long _this_ptr);
	// void ClosingSigned_set_fee_satoshis(struct LDKClosingSigned *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_satoshis")] public static extern void ClosingSignedSetFeeSatoshis(long _this_ptr, long _val);
	// struct LDKECDSASignature ClosingSigned_get_signature(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_signature")] public static extern long ClosingSignedGetSignature(long _this_ptr);
	// void ClosingSigned_set_signature(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_signature")] public static extern void ClosingSignedSetSignature(long _this_ptr, long _val);
	// struct LDKClosingSignedFeeRange ClosingSigned_get_fee_range(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_range")] public static extern long ClosingSignedGetFeeRange(long _this_ptr);
	// void ClosingSigned_set_fee_range(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKClosingSignedFeeRange val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_range")] public static extern void ClosingSignedSetFeeRange(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSigned ClosingSigned_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t fee_satoshis_arg, struct LDKECDSASignature signature_arg, struct LDKClosingSignedFeeRange fee_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_new")] public static extern long ClosingSignedNew(long _channel_id_arg, long _fee_satoshis_arg, long _signature_arg, long _fee_range_arg);
	// uint64_t ClosingSigned_clone_ptr(LDKClosingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone_ptr")] public static extern long ClosingSignedClonePtr(long _arg);
	// struct LDKClosingSigned ClosingSigned_clone(const struct LDKClosingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone")] public static extern long ClosingSignedClone(long _orig);
	// uint64_t ClosingSigned_hash(const struct LDKClosingSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_hash")] public static extern long ClosingSignedHash(long _o);
	// bool ClosingSigned_eq(const struct LDKClosingSigned *NONNULL_PTR a, const struct LDKClosingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_eq")] public static extern bool ClosingSignedEq(long _a, long _b);
	// void UpdateAddHTLC_free(struct LDKUpdateAddHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_free")] public static extern void UpdateAddHTLCFree(long _this_obj);
	// const uint8_t (*UpdateAddHTLC_get_channel_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_channel_id")] public static extern long UpdateAddHTLCGetChannelId(long _this_ptr);
	// void UpdateAddHTLC_set_channel_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_channel_id")] public static extern void UpdateAddHTLCSetChannelId(long _this_ptr, long _val);
	// uint64_t UpdateAddHTLC_get_htlc_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_htlc_id")] public static extern long UpdateAddHTLCGetHtlcId(long _this_ptr);
	// void UpdateAddHTLC_set_htlc_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_htlc_id")] public static extern void UpdateAddHTLCSetHtlcId(long _this_ptr, long _val);
	// uint64_t UpdateAddHTLC_get_amount_msat(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_amount_msat")] public static extern long UpdateAddHTLCGetAmountMsat(long _this_ptr);
	// void UpdateAddHTLC_set_amount_msat(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_amount_msat")] public static extern void UpdateAddHTLCSetAmountMsat(long _this_ptr, long _val);
	// const uint8_t (*UpdateAddHTLC_get_payment_hash(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_payment_hash")] public static extern long UpdateAddHTLCGetPaymentHash(long _this_ptr);
	// void UpdateAddHTLC_set_payment_hash(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_payment_hash")] public static extern void UpdateAddHTLCSetPaymentHash(long _this_ptr, long _val);
	// uint32_t UpdateAddHTLC_get_cltv_expiry(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_cltv_expiry")] public static extern int UpdateAddHTLCGetCltvExpiry(long _this_ptr);
	// void UpdateAddHTLC_set_cltv_expiry(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_cltv_expiry")] public static extern void UpdateAddHTLCSetCltvExpiry(long _this_ptr, int _val);
	// struct LDKCOption_u64Z UpdateAddHTLC_get_skimmed_fee_msat(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_skimmed_fee_msat")] public static extern long UpdateAddHTLCGetSkimmedFeeMsat(long _this_ptr);
	// void UpdateAddHTLC_set_skimmed_fee_msat(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_skimmed_fee_msat")] public static extern void UpdateAddHTLCSetSkimmedFeeMsat(long _this_ptr, long _val);
	// struct LDKOnionPacket UpdateAddHTLC_get_onion_routing_packet(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_onion_routing_packet")] public static extern long UpdateAddHTLCGetOnionRoutingPacket(long _this_ptr);
	// void UpdateAddHTLC_set_onion_routing_packet(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKOnionPacket val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_onion_routing_packet")] public static extern void UpdateAddHTLCSetOnionRoutingPacket(long _this_ptr, long _val);
	// struct LDKPublicKey UpdateAddHTLC_get_blinding_point(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_blinding_point")] public static extern long UpdateAddHTLCGetBlindingPoint(long _this_ptr);
	// void UpdateAddHTLC_set_blinding_point(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_blinding_point")] public static extern void UpdateAddHTLCSetBlindingPoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUpdateAddHTLC UpdateAddHTLC_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t htlc_id_arg, uint64_t amount_msat_arg, struct LDKThirtyTwoBytes payment_hash_arg, uint32_t cltv_expiry_arg, struct LDKCOption_u64Z skimmed_fee_msat_arg, struct LDKOnionPacket onion_routing_packet_arg, struct LDKPublicKey blinding_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_new")] public static extern long UpdateAddHTLCNew(long _channel_id_arg, long _htlc_id_arg, long _amount_msat_arg, long _payment_hash_arg, int _cltv_expiry_arg, long _skimmed_fee_msat_arg, long _onion_routing_packet_arg, long _blinding_point_arg);
	// uint64_t UpdateAddHTLC_clone_ptr(LDKUpdateAddHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone_ptr")] public static extern long UpdateAddHTLCClonePtr(long _arg);
	// struct LDKUpdateAddHTLC UpdateAddHTLC_clone(const struct LDKUpdateAddHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone")] public static extern long UpdateAddHTLCClone(long _orig);
	// uint64_t UpdateAddHTLC_hash(const struct LDKUpdateAddHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_hash")] public static extern long UpdateAddHTLCHash(long _o);
	// bool UpdateAddHTLC_eq(const struct LDKUpdateAddHTLC *NONNULL_PTR a, const struct LDKUpdateAddHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_eq")] public static extern bool UpdateAddHTLCEq(long _a, long _b);
	// void OnionMessage_free(struct LDKOnionMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_free")] public static extern void OnionMessageFree(long _this_obj);
	// struct LDKPublicKey OnionMessage_get_blinding_point(const struct LDKOnionMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_get_blinding_point")] public static extern long OnionMessageGetBlindingPoint(long _this_ptr);
	// void OnionMessage_set_blinding_point(struct LDKOnionMessage *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_set_blinding_point")] public static extern void OnionMessageSetBlindingPoint(long _this_ptr, long _val);
	// struct LDKPacket OnionMessage_get_onion_routing_packet(const struct LDKOnionMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_get_onion_routing_packet")] public static extern long OnionMessageGetOnionRoutingPacket(long _this_ptr);
	// void OnionMessage_set_onion_routing_packet(struct LDKOnionMessage *NONNULL_PTR this_ptr, struct LDKPacket val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_set_onion_routing_packet")] public static extern void OnionMessageSetOnionRoutingPacket(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOnionMessage OnionMessage_new(struct LDKPublicKey blinding_point_arg, struct LDKPacket onion_routing_packet_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_new")] public static extern long OnionMessageNew(long _blinding_point_arg, long _onion_routing_packet_arg);
	// uint64_t OnionMessage_clone_ptr(LDKOnionMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone_ptr")] public static extern long OnionMessageClonePtr(long _arg);
	// struct LDKOnionMessage OnionMessage_clone(const struct LDKOnionMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone")] public static extern long OnionMessageClone(long _orig);
	// uint64_t OnionMessage_hash(const struct LDKOnionMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_hash")] public static extern long OnionMessageHash(long _o);
	// bool OnionMessage_eq(const struct LDKOnionMessage *NONNULL_PTR a, const struct LDKOnionMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_eq")] public static extern bool OnionMessageEq(long _a, long _b);
	// void UpdateFulfillHTLC_free(struct LDKUpdateFulfillHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_free")] public static extern void UpdateFulfillHTLCFree(long _this_obj);
	// const uint8_t (*UpdateFulfillHTLC_get_channel_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_channel_id")] public static extern long UpdateFulfillHTLCGetChannelId(long _this_ptr);
	// void UpdateFulfillHTLC_set_channel_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_channel_id")] public static extern void UpdateFulfillHTLCSetChannelId(long _this_ptr, long _val);
	// uint64_t UpdateFulfillHTLC_get_htlc_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_htlc_id")] public static extern long UpdateFulfillHTLCGetHtlcId(long _this_ptr);
	// void UpdateFulfillHTLC_set_htlc_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_htlc_id")] public static extern void UpdateFulfillHTLCSetHtlcId(long _this_ptr, long _val);
	// const uint8_t (*UpdateFulfillHTLC_get_payment_preimage(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_payment_preimage")] public static extern long UpdateFulfillHTLCGetPaymentPreimage(long _this_ptr);
	// void UpdateFulfillHTLC_set_payment_preimage(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_payment_preimage")] public static extern void UpdateFulfillHTLCSetPaymentPreimage(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t htlc_id_arg, struct LDKThirtyTwoBytes payment_preimage_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_new")] public static extern long UpdateFulfillHTLCNew(long _channel_id_arg, long _htlc_id_arg, long _payment_preimage_arg);
	// uint64_t UpdateFulfillHTLC_clone_ptr(LDKUpdateFulfillHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone_ptr")] public static extern long UpdateFulfillHTLCClonePtr(long _arg);
	// struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_clone(const struct LDKUpdateFulfillHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone")] public static extern long UpdateFulfillHTLCClone(long _orig);
	// uint64_t UpdateFulfillHTLC_hash(const struct LDKUpdateFulfillHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_hash")] public static extern long UpdateFulfillHTLCHash(long _o);
	// bool UpdateFulfillHTLC_eq(const struct LDKUpdateFulfillHTLC *NONNULL_PTR a, const struct LDKUpdateFulfillHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_eq")] public static extern bool UpdateFulfillHTLCEq(long _a, long _b);
	// void UpdateFailHTLC_free(struct LDKUpdateFailHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_free")] public static extern void UpdateFailHTLCFree(long _this_obj);
	// const uint8_t (*UpdateFailHTLC_get_channel_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_channel_id")] public static extern long UpdateFailHTLCGetChannelId(long _this_ptr);
	// void UpdateFailHTLC_set_channel_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_channel_id")] public static extern void UpdateFailHTLCSetChannelId(long _this_ptr, long _val);
	// uint64_t UpdateFailHTLC_get_htlc_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_htlc_id")] public static extern long UpdateFailHTLCGetHtlcId(long _this_ptr);
	// void UpdateFailHTLC_set_htlc_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_htlc_id")] public static extern void UpdateFailHTLCSetHtlcId(long _this_ptr, long _val);
	// uint64_t UpdateFailHTLC_clone_ptr(LDKUpdateFailHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone_ptr")] public static extern long UpdateFailHTLCClonePtr(long _arg);
	// struct LDKUpdateFailHTLC UpdateFailHTLC_clone(const struct LDKUpdateFailHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone")] public static extern long UpdateFailHTLCClone(long _orig);
	// uint64_t UpdateFailHTLC_hash(const struct LDKUpdateFailHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_hash")] public static extern long UpdateFailHTLCHash(long _o);
	// bool UpdateFailHTLC_eq(const struct LDKUpdateFailHTLC *NONNULL_PTR a, const struct LDKUpdateFailHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_eq")] public static extern bool UpdateFailHTLCEq(long _a, long _b);
	// void UpdateFailMalformedHTLC_free(struct LDKUpdateFailMalformedHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_free")] public static extern void UpdateFailMalformedHTLCFree(long _this_obj);
	// const uint8_t (*UpdateFailMalformedHTLC_get_channel_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_channel_id")] public static extern long UpdateFailMalformedHTLCGetChannelId(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_channel_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_channel_id")] public static extern void UpdateFailMalformedHTLCSetChannelId(long _this_ptr, long _val);
	// uint64_t UpdateFailMalformedHTLC_get_htlc_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_htlc_id")] public static extern long UpdateFailMalformedHTLCGetHtlcId(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_htlc_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_htlc_id")] public static extern void UpdateFailMalformedHTLCSetHtlcId(long _this_ptr, long _val);
	// uint16_t UpdateFailMalformedHTLC_get_failure_code(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_failure_code")] public static extern short UpdateFailMalformedHTLCGetFailureCode(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_failure_code(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_failure_code")] public static extern void UpdateFailMalformedHTLCSetFailureCode(long _this_ptr, short _val);
	// uint64_t UpdateFailMalformedHTLC_clone_ptr(LDKUpdateFailMalformedHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone_ptr")] public static extern long UpdateFailMalformedHTLCClonePtr(long _arg);
	// struct LDKUpdateFailMalformedHTLC UpdateFailMalformedHTLC_clone(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone")] public static extern long UpdateFailMalformedHTLCClone(long _orig);
	// uint64_t UpdateFailMalformedHTLC_hash(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_hash")] public static extern long UpdateFailMalformedHTLCHash(long _o);
	// bool UpdateFailMalformedHTLC_eq(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR a, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_eq")] public static extern bool UpdateFailMalformedHTLCEq(long _a, long _b);
	// void CommitmentSigned_free(struct LDKCommitmentSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_free")] public static extern void CommitmentSignedFree(long _this_obj);
	// const uint8_t (*CommitmentSigned_get_channel_id(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_channel_id")] public static extern long CommitmentSignedGetChannelId(long _this_ptr);
	// void CommitmentSigned_set_channel_id(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_channel_id")] public static extern void CommitmentSignedSetChannelId(long _this_ptr, long _val);
	// struct LDKECDSASignature CommitmentSigned_get_signature(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_signature")] public static extern long CommitmentSignedGetSignature(long _this_ptr);
	// void CommitmentSigned_set_signature(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_signature")] public static extern void CommitmentSignedSetSignature(long _this_ptr, long _val);
	// struct LDKCVec_ECDSASignatureZ CommitmentSigned_get_htlc_signatures(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_htlc_signatures")] public static extern long CommitmentSignedGetHtlcSignatures(long _this_ptr);
	// void CommitmentSigned_set_htlc_signatures(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKCVec_ECDSASignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_htlc_signatures")] public static extern void CommitmentSignedSetHtlcSignatures(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentSigned CommitmentSigned_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKECDSASignature signature_arg, struct LDKCVec_ECDSASignatureZ htlc_signatures_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_new")] public static extern long CommitmentSignedNew(long _channel_id_arg, long _signature_arg, long _htlc_signatures_arg);
	// uint64_t CommitmentSigned_clone_ptr(LDKCommitmentSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone_ptr")] public static extern long CommitmentSignedClonePtr(long _arg);
	// struct LDKCommitmentSigned CommitmentSigned_clone(const struct LDKCommitmentSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone")] public static extern long CommitmentSignedClone(long _orig);
	// uint64_t CommitmentSigned_hash(const struct LDKCommitmentSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_hash")] public static extern long CommitmentSignedHash(long _o);
	// bool CommitmentSigned_eq(const struct LDKCommitmentSigned *NONNULL_PTR a, const struct LDKCommitmentSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_eq")] public static extern bool CommitmentSignedEq(long _a, long _b);
	// void RevokeAndACK_free(struct LDKRevokeAndACK this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_free")] public static extern void RevokeAndACKFree(long _this_obj);
	// const uint8_t (*RevokeAndACK_get_channel_id(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_channel_id")] public static extern long RevokeAndACKGetChannelId(long _this_ptr);
	// void RevokeAndACK_set_channel_id(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_channel_id")] public static extern void RevokeAndACKSetChannelId(long _this_ptr, long _val);
	// const uint8_t (*RevokeAndACK_get_per_commitment_secret(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_per_commitment_secret")] public static extern long RevokeAndACKGetPerCommitmentSecret(long _this_ptr);
	// void RevokeAndACK_set_per_commitment_secret(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_per_commitment_secret")] public static extern void RevokeAndACKSetPerCommitmentSecret(long _this_ptr, long _val);
	// struct LDKPublicKey RevokeAndACK_get_next_per_commitment_point(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_next_per_commitment_point")] public static extern long RevokeAndACKGetNextPerCommitmentPoint(long _this_ptr);
	// void RevokeAndACK_set_next_per_commitment_point(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_next_per_commitment_point")] public static extern void RevokeAndACKSetNextPerCommitmentPoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevokeAndACK RevokeAndACK_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKThirtyTwoBytes per_commitment_secret_arg, struct LDKPublicKey next_per_commitment_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_new")] public static extern long RevokeAndACKNew(long _channel_id_arg, long _per_commitment_secret_arg, long _next_per_commitment_point_arg);
	// uint64_t RevokeAndACK_clone_ptr(LDKRevokeAndACK *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone_ptr")] public static extern long RevokeAndACKClonePtr(long _arg);
	// struct LDKRevokeAndACK RevokeAndACK_clone(const struct LDKRevokeAndACK *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone")] public static extern long RevokeAndACKClone(long _orig);
	// uint64_t RevokeAndACK_hash(const struct LDKRevokeAndACK *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_hash")] public static extern long RevokeAndACKHash(long _o);
	// bool RevokeAndACK_eq(const struct LDKRevokeAndACK *NONNULL_PTR a, const struct LDKRevokeAndACK *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_eq")] public static extern bool RevokeAndACKEq(long _a, long _b);
	// void UpdateFee_free(struct LDKUpdateFee this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_free")] public static extern void UpdateFeeFree(long _this_obj);
	// const uint8_t (*UpdateFee_get_channel_id(const struct LDKUpdateFee *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_channel_id")] public static extern long UpdateFeeGetChannelId(long _this_ptr);
	// void UpdateFee_set_channel_id(struct LDKUpdateFee *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_channel_id")] public static extern void UpdateFeeSetChannelId(long _this_ptr, long _val);
	// uint32_t UpdateFee_get_feerate_per_kw(const struct LDKUpdateFee *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_feerate_per_kw")] public static extern int UpdateFeeGetFeeratePerKw(long _this_ptr);
	// void UpdateFee_set_feerate_per_kw(struct LDKUpdateFee *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_feerate_per_kw")] public static extern void UpdateFeeSetFeeratePerKw(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKUpdateFee UpdateFee_new(struct LDKThirtyTwoBytes channel_id_arg, uint32_t feerate_per_kw_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_new")] public static extern long UpdateFeeNew(long _channel_id_arg, int _feerate_per_kw_arg);
	// uint64_t UpdateFee_clone_ptr(LDKUpdateFee *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone_ptr")] public static extern long UpdateFeeClonePtr(long _arg);
	// struct LDKUpdateFee UpdateFee_clone(const struct LDKUpdateFee *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone")] public static extern long UpdateFeeClone(long _orig);
	// uint64_t UpdateFee_hash(const struct LDKUpdateFee *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_hash")] public static extern long UpdateFeeHash(long _o);
	// bool UpdateFee_eq(const struct LDKUpdateFee *NONNULL_PTR a, const struct LDKUpdateFee *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_eq")] public static extern bool UpdateFeeEq(long _a, long _b);
	// void ChannelReestablish_free(struct LDKChannelReestablish this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_free")] public static extern void ChannelReestablishFree(long _this_obj);
	// const uint8_t (*ChannelReestablish_get_channel_id(const struct LDKChannelReestablish *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_channel_id")] public static extern long ChannelReestablishGetChannelId(long _this_ptr);
	// void ChannelReestablish_set_channel_id(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_channel_id")] public static extern void ChannelReestablishSetChannelId(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_get_next_local_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_local_commitment_number")] public static extern long ChannelReestablishGetNextLocalCommitmentNumber(long _this_ptr);
	// void ChannelReestablish_set_next_local_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_local_commitment_number")] public static extern void ChannelReestablishSetNextLocalCommitmentNumber(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_get_next_remote_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_remote_commitment_number")] public static extern long ChannelReestablishGetNextRemoteCommitmentNumber(long _this_ptr);
	// void ChannelReestablish_set_next_remote_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_remote_commitment_number")] public static extern void ChannelReestablishSetNextRemoteCommitmentNumber(long _this_ptr, long _val);
	// const uint8_t (*ChannelReestablish_get_your_last_per_commitment_secret(const struct LDKChannelReestablish *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_your_last_per_commitment_secret")] public static extern long ChannelReestablishGetYourLastPerCommitmentSecret(long _this_ptr);
	// void ChannelReestablish_set_your_last_per_commitment_secret(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_your_last_per_commitment_secret")] public static extern void ChannelReestablishSetYourLastPerCommitmentSecret(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelReestablish_get_my_current_per_commitment_point(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_my_current_per_commitment_point")] public static extern long ChannelReestablishGetMyCurrentPerCommitmentPoint(long _this_ptr);
	// void ChannelReestablish_set_my_current_per_commitment_point(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_my_current_per_commitment_point")] public static extern void ChannelReestablishSetMyCurrentPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ ChannelReestablish_get_next_funding_txid(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_funding_txid")] public static extern long ChannelReestablishGetNextFundingTxid(long _this_ptr);
	// void ChannelReestablish_set_next_funding_txid(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_funding_txid")] public static extern void ChannelReestablishSetNextFundingTxid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelReestablish ChannelReestablish_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t next_local_commitment_number_arg, uint64_t next_remote_commitment_number_arg, struct LDKThirtyTwoBytes your_last_per_commitment_secret_arg, struct LDKPublicKey my_current_per_commitment_point_arg, struct LDKCOption_ThirtyTwoBytesZ next_funding_txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_new")] public static extern long ChannelReestablishNew(long _channel_id_arg, long _next_local_commitment_number_arg, long _next_remote_commitment_number_arg, long _your_last_per_commitment_secret_arg, long _my_current_per_commitment_point_arg, long _next_funding_txid_arg);
	// uint64_t ChannelReestablish_clone_ptr(LDKChannelReestablish *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone_ptr")] public static extern long ChannelReestablishClonePtr(long _arg);
	// struct LDKChannelReestablish ChannelReestablish_clone(const struct LDKChannelReestablish *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone")] public static extern long ChannelReestablishClone(long _orig);
	// uint64_t ChannelReestablish_hash(const struct LDKChannelReestablish *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_hash")] public static extern long ChannelReestablishHash(long _o);
	// bool ChannelReestablish_eq(const struct LDKChannelReestablish *NONNULL_PTR a, const struct LDKChannelReestablish *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_eq")] public static extern bool ChannelReestablishEq(long _a, long _b);
	// void AnnouncementSignatures_free(struct LDKAnnouncementSignatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_free")] public static extern void AnnouncementSignaturesFree(long _this_obj);
	// const uint8_t (*AnnouncementSignatures_get_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_channel_id")] public static extern long AnnouncementSignaturesGetChannelId(long _this_ptr);
	// void AnnouncementSignatures_set_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_channel_id")] public static extern void AnnouncementSignaturesSetChannelId(long _this_ptr, long _val);
	// uint64_t AnnouncementSignatures_get_short_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_short_channel_id")] public static extern long AnnouncementSignaturesGetShortChannelId(long _this_ptr);
	// void AnnouncementSignatures_set_short_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_short_channel_id")] public static extern void AnnouncementSignaturesSetShortChannelId(long _this_ptr, long _val);
	// struct LDKECDSASignature AnnouncementSignatures_get_node_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_node_signature")] public static extern long AnnouncementSignaturesGetNodeSignature(long _this_ptr);
	// void AnnouncementSignatures_set_node_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_node_signature")] public static extern void AnnouncementSignaturesSetNodeSignature(long _this_ptr, long _val);
	// struct LDKECDSASignature AnnouncementSignatures_get_bitcoin_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_bitcoin_signature")] public static extern long AnnouncementSignaturesGetBitcoinSignature(long _this_ptr);
	// void AnnouncementSignatures_set_bitcoin_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_bitcoin_signature")] public static extern void AnnouncementSignaturesSetBitcoinSignature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAnnouncementSignatures AnnouncementSignatures_new(struct LDKThirtyTwoBytes channel_id_arg, uint64_t short_channel_id_arg, struct LDKECDSASignature node_signature_arg, struct LDKECDSASignature bitcoin_signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_new")] public static extern long AnnouncementSignaturesNew(long _channel_id_arg, long _short_channel_id_arg, long _node_signature_arg, long _bitcoin_signature_arg);
	// uint64_t AnnouncementSignatures_clone_ptr(LDKAnnouncementSignatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone_ptr")] public static extern long AnnouncementSignaturesClonePtr(long _arg);
	// struct LDKAnnouncementSignatures AnnouncementSignatures_clone(const struct LDKAnnouncementSignatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone")] public static extern long AnnouncementSignaturesClone(long _orig);
	// uint64_t AnnouncementSignatures_hash(const struct LDKAnnouncementSignatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_hash")] public static extern long AnnouncementSignaturesHash(long _o);
	// bool AnnouncementSignatures_eq(const struct LDKAnnouncementSignatures *NONNULL_PTR a, const struct LDKAnnouncementSignatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_eq")] public static extern bool AnnouncementSignaturesEq(long _a, long _b);
	// void SocketAddress_free(struct LDKSocketAddress this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_free")] public static extern void SocketAddressFree(long _this_ptr);
	// uint64_t SocketAddress_clone_ptr(LDKSocketAddress *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_clone_ptr")] public static extern long SocketAddressClonePtr(long _arg);
	// struct LDKSocketAddress SocketAddress_clone(const struct LDKSocketAddress *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_clone")] public static extern long SocketAddressClone(long _orig);
	// struct LDKSocketAddress SocketAddress_tcp_ip_v4(struct LDKFourBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_tcp_ip_v4")] public static extern long SocketAddressTcpIpV4(long _addr, short _port);
	// struct LDKSocketAddress SocketAddress_tcp_ip_v6(struct LDKSixteenBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_tcp_ip_v6")] public static extern long SocketAddressTcpIpV6(long _addr, short _port);
	// struct LDKSocketAddress SocketAddress_onion_v2(struct LDKTwelveBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_onion_v2")] public static extern long SocketAddressOnionV2(long _a);
	// struct LDKSocketAddress SocketAddress_onion_v3(struct LDKThirtyTwoBytes ed25519_pubkey, uint16_t checksum, uint8_t version, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_onion_v3")] public static extern long SocketAddressOnionV3(long _ed25519_pubkey, short _checksum, byte _version, short _port);
	// struct LDKSocketAddress SocketAddress_hostname(struct LDKHostname hostname, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_hostname")] public static extern long SocketAddressHostname(long _hostname, short _port);
	// uint64_t SocketAddress_hash(const struct LDKSocketAddress *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_hash")] public static extern long SocketAddressHash(long _o);
	// bool SocketAddress_eq(const struct LDKSocketAddress *NONNULL_PTR a, const struct LDKSocketAddress *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_eq")] public static extern bool SocketAddressEq(long _a, long _b);
	// struct LDKCVec_u8Z SocketAddress_write(const struct LDKSocketAddress *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_write")] public static extern long SocketAddressWrite(long _obj);
	// struct LDKCResult_SocketAddressDecodeErrorZ SocketAddress_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_read")] public static extern long SocketAddressRead(long _ser);
	// enum LDKSocketAddressParseError SocketAddressParseError_clone(const enum LDKSocketAddressParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_clone")] public static extern SocketAddressParseError SocketAddressParseErrorClone(long _orig);
	// enum LDKSocketAddressParseError SocketAddressParseError_socket_addr_parse(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_socket_addr_parse")] public static extern SocketAddressParseError SocketAddressParseErrorSocketAddrParse();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_input(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_input")] public static extern SocketAddressParseError SocketAddressParseErrorInvalidInput();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_port(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_port")] public static extern SocketAddressParseError SocketAddressParseErrorInvalidPort();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_onion_v3(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_onion_v3")] public static extern SocketAddressParseError SocketAddressParseErrorInvalidOnionV3();
	// uint64_t SocketAddressParseError_hash(const enum LDKSocketAddressParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_hash")] public static extern long SocketAddressParseErrorHash(long _o);
	// bool SocketAddressParseError_eq(const enum LDKSocketAddressParseError *NONNULL_PTR a, const enum LDKSocketAddressParseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_eq")] public static extern bool SocketAddressParseErrorEq(long _a, long _b);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ parse_onion_address(struct LDKStr host, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_parse_onion_address")] public static extern long ParseOnionAddress(long _host, short _port);
	// struct LDKStr SocketAddress_to_str(const struct LDKSocketAddress *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_to_str")] public static extern long SocketAddressToStr(long _o);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ SocketAddress_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_from_str")] public static extern long SocketAddressFromStr(long _s);
	// void UnsignedGossipMessage_free(struct LDKUnsignedGossipMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_free")] public static extern void UnsignedGossipMessageFree(long _this_ptr);
	// uint64_t UnsignedGossipMessage_clone_ptr(LDKUnsignedGossipMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_clone_ptr")] public static extern long UnsignedGossipMessageClonePtr(long _arg);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_clone(const struct LDKUnsignedGossipMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_clone")] public static extern long UnsignedGossipMessageClone(long _orig);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_channel_announcement(struct LDKUnsignedChannelAnnouncement a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_channel_announcement")] public static extern long UnsignedGossipMessageChannelAnnouncement(long _a);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_channel_update(struct LDKUnsignedChannelUpdate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_channel_update")] public static extern long UnsignedGossipMessageChannelUpdate(long _a);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_node_announcement(struct LDKUnsignedNodeAnnouncement a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_node_announcement")] public static extern long UnsignedGossipMessageNodeAnnouncement(long _a);
	// struct LDKCVec_u8Z UnsignedGossipMessage_write(const struct LDKUnsignedGossipMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_write")] public static extern long UnsignedGossipMessageWrite(long _obj);
	// void UnsignedNodeAnnouncement_free(struct LDKUnsignedNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_free")] public static extern void UnsignedNodeAnnouncementFree(long _this_obj);
	// struct LDKNodeFeatures UnsignedNodeAnnouncement_get_features(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_features")] public static extern long UnsignedNodeAnnouncementGetFeatures(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_features(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_features")] public static extern void UnsignedNodeAnnouncementSetFeatures(long _this_ptr, long _val);
	// uint32_t UnsignedNodeAnnouncement_get_timestamp(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_timestamp")] public static extern int UnsignedNodeAnnouncementGetTimestamp(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_timestamp(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_timestamp")] public static extern void UnsignedNodeAnnouncementSetTimestamp(long _this_ptr, int _val);
	// struct LDKNodeId UnsignedNodeAnnouncement_get_node_id(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_node_id")] public static extern long UnsignedNodeAnnouncementGetNodeId(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_node_id(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_node_id")] public static extern void UnsignedNodeAnnouncementSetNodeId(long _this_ptr, long _val);
	// const uint8_t (*UnsignedNodeAnnouncement_get_rgb(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_rgb")] public static extern long UnsignedNodeAnnouncementGetRgb(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_rgb(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_rgb")] public static extern void UnsignedNodeAnnouncementSetRgb(long _this_ptr, long _val);
	// struct LDKNodeAlias UnsignedNodeAnnouncement_get_alias(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_alias")] public static extern long UnsignedNodeAnnouncementGetAlias(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_alias(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeAlias val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_alias")] public static extern void UnsignedNodeAnnouncementSetAlias(long _this_ptr, long _val);
	// struct LDKCVec_SocketAddressZ UnsignedNodeAnnouncement_get_addresses(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_addresses")] public static extern long UnsignedNodeAnnouncementGetAddresses(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_addresses(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_addresses")] public static extern void UnsignedNodeAnnouncementSetAddresses(long _this_ptr, long _val);
	// uint64_t UnsignedNodeAnnouncement_clone_ptr(LDKUnsignedNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone_ptr")] public static extern long UnsignedNodeAnnouncementClonePtr(long _arg);
	// struct LDKUnsignedNodeAnnouncement UnsignedNodeAnnouncement_clone(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone")] public static extern long UnsignedNodeAnnouncementClone(long _orig);
	// uint64_t UnsignedNodeAnnouncement_hash(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_hash")] public static extern long UnsignedNodeAnnouncementHash(long _o);
	// bool UnsignedNodeAnnouncement_eq(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR a, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_eq")] public static extern bool UnsignedNodeAnnouncementEq(long _a, long _b);
	// void NodeAnnouncement_free(struct LDKNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_free")] public static extern void NodeAnnouncementFree(long _this_obj);
	// struct LDKECDSASignature NodeAnnouncement_get_signature(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_signature")] public static extern long NodeAnnouncementGetSignature(long _this_ptr);
	// void NodeAnnouncement_set_signature(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_signature")] public static extern void NodeAnnouncementSetSignature(long _this_ptr, long _val);
	// struct LDKUnsignedNodeAnnouncement NodeAnnouncement_get_contents(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_contents")] public static extern long NodeAnnouncementGetContents(long _this_ptr);
	// void NodeAnnouncement_set_contents(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedNodeAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_contents")] public static extern void NodeAnnouncementSetContents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncement NodeAnnouncement_new(struct LDKECDSASignature signature_arg, struct LDKUnsignedNodeAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_new")] public static extern long NodeAnnouncementNew(long _signature_arg, long _contents_arg);
	// uint64_t NodeAnnouncement_clone_ptr(LDKNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone_ptr")] public static extern long NodeAnnouncementClonePtr(long _arg);
	// struct LDKNodeAnnouncement NodeAnnouncement_clone(const struct LDKNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone")] public static extern long NodeAnnouncementClone(long _orig);
	// uint64_t NodeAnnouncement_hash(const struct LDKNodeAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_hash")] public static extern long NodeAnnouncementHash(long _o);
	// bool NodeAnnouncement_eq(const struct LDKNodeAnnouncement *NONNULL_PTR a, const struct LDKNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_eq")] public static extern bool NodeAnnouncementEq(long _a, long _b);
	// void UnsignedChannelAnnouncement_free(struct LDKUnsignedChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_free")] public static extern void UnsignedChannelAnnouncementFree(long _this_obj);
	// struct LDKChannelFeatures UnsignedChannelAnnouncement_get_features(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_features")] public static extern long UnsignedChannelAnnouncementGetFeatures(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_features(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_features")] public static extern void UnsignedChannelAnnouncementSetFeatures(long _this_ptr, long _val);
	// const uint8_t (*UnsignedChannelAnnouncement_get_chain_hash(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_chain_hash")] public static extern long UnsignedChannelAnnouncementGetChainHash(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_chain_hash(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_chain_hash")] public static extern void UnsignedChannelAnnouncementSetChainHash(long _this_ptr, long _val);
	// uint64_t UnsignedChannelAnnouncement_get_short_channel_id(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_short_channel_id")] public static extern long UnsignedChannelAnnouncementGetShortChannelId(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_short_channel_id(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_short_channel_id")] public static extern void UnsignedChannelAnnouncementSetShortChannelId(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_node_id_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_1")] public static extern long UnsignedChannelAnnouncementGetNodeId1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_1")] public static extern void UnsignedChannelAnnouncementSetNodeId1(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_node_id_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_2")] public static extern long UnsignedChannelAnnouncementGetNodeId2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_2")] public static extern void UnsignedChannelAnnouncementSetNodeId2(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_bitcoin_key_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_1")] public static extern long UnsignedChannelAnnouncementGetBitcoinKey1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_1")] public static extern void UnsignedChannelAnnouncementSetBitcoinKey1(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_bitcoin_key_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_2")] public static extern long UnsignedChannelAnnouncementGetBitcoinKey2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_2")] public static extern void UnsignedChannelAnnouncementSetBitcoinKey2(long _this_ptr, long _val);
	// struct LDKCVec_u8Z UnsignedChannelAnnouncement_get_excess_data(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_excess_data")] public static extern long UnsignedChannelAnnouncementGetExcessData(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_excess_data(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_excess_data")] public static extern void UnsignedChannelAnnouncementSetExcessData(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnsignedChannelAnnouncement UnsignedChannelAnnouncement_new(struct LDKChannelFeatures features_arg, struct LDKThirtyTwoBytes chain_hash_arg, uint64_t short_channel_id_arg, struct LDKNodeId node_id_1_arg, struct LDKNodeId node_id_2_arg, struct LDKNodeId bitcoin_key_1_arg, struct LDKNodeId bitcoin_key_2_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_new")] public static extern long UnsignedChannelAnnouncementNew(long _features_arg, long _chain_hash_arg, long _short_channel_id_arg, long _node_id_1_arg, long _node_id_2_arg, long _bitcoin_key_1_arg, long _bitcoin_key_2_arg, long _excess_data_arg);
	// uint64_t UnsignedChannelAnnouncement_clone_ptr(LDKUnsignedChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone_ptr")] public static extern long UnsignedChannelAnnouncementClonePtr(long _arg);
	// struct LDKUnsignedChannelAnnouncement UnsignedChannelAnnouncement_clone(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone")] public static extern long UnsignedChannelAnnouncementClone(long _orig);
	// uint64_t UnsignedChannelAnnouncement_hash(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_hash")] public static extern long UnsignedChannelAnnouncementHash(long _o);
	// bool UnsignedChannelAnnouncement_eq(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR a, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_eq")] public static extern bool UnsignedChannelAnnouncementEq(long _a, long _b);
	// void ChannelAnnouncement_free(struct LDKChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_free")] public static extern void ChannelAnnouncementFree(long _this_obj);
	// struct LDKECDSASignature ChannelAnnouncement_get_node_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_1")] public static extern long ChannelAnnouncementGetNodeSignature1(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_1")] public static extern void ChannelAnnouncementSetNodeSignature1(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_node_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_2")] public static extern long ChannelAnnouncementGetNodeSignature2(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_2")] public static extern void ChannelAnnouncementSetNodeSignature2(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_bitcoin_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_1")] public static extern long ChannelAnnouncementGetBitcoinSignature1(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_1")] public static extern void ChannelAnnouncementSetBitcoinSignature1(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_bitcoin_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_2")] public static extern long ChannelAnnouncementGetBitcoinSignature2(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_2")] public static extern void ChannelAnnouncementSetBitcoinSignature2(long _this_ptr, long _val);
	// struct LDKUnsignedChannelAnnouncement ChannelAnnouncement_get_contents(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_contents")] public static extern long ChannelAnnouncementGetContents(long _this_ptr);
	// void ChannelAnnouncement_set_contents(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_contents")] public static extern void ChannelAnnouncementSetContents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelAnnouncement ChannelAnnouncement_new(struct LDKECDSASignature node_signature_1_arg, struct LDKECDSASignature node_signature_2_arg, struct LDKECDSASignature bitcoin_signature_1_arg, struct LDKECDSASignature bitcoin_signature_2_arg, struct LDKUnsignedChannelAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_new")] public static extern long ChannelAnnouncementNew(long _node_signature_1_arg, long _node_signature_2_arg, long _bitcoin_signature_1_arg, long _bitcoin_signature_2_arg, long _contents_arg);
	// uint64_t ChannelAnnouncement_clone_ptr(LDKChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone_ptr")] public static extern long ChannelAnnouncementClonePtr(long _arg);
	// struct LDKChannelAnnouncement ChannelAnnouncement_clone(const struct LDKChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone")] public static extern long ChannelAnnouncementClone(long _orig);
	// uint64_t ChannelAnnouncement_hash(const struct LDKChannelAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_hash")] public static extern long ChannelAnnouncementHash(long _o);
	// bool ChannelAnnouncement_eq(const struct LDKChannelAnnouncement *NONNULL_PTR a, const struct LDKChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_eq")] public static extern bool ChannelAnnouncementEq(long _a, long _b);
	// void UnsignedChannelUpdate_free(struct LDKUnsignedChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_free")] public static extern void UnsignedChannelUpdateFree(long _this_obj);
	// const uint8_t (*UnsignedChannelUpdate_get_chain_hash(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_chain_hash")] public static extern long UnsignedChannelUpdateGetChainHash(long _this_ptr);
	// void UnsignedChannelUpdate_set_chain_hash(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_chain_hash")] public static extern void UnsignedChannelUpdateSetChainHash(long _this_ptr, long _val);
	// uint64_t UnsignedChannelUpdate_get_short_channel_id(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_short_channel_id")] public static extern long UnsignedChannelUpdateGetShortChannelId(long _this_ptr);
	// void UnsignedChannelUpdate_set_short_channel_id(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_short_channel_id")] public static extern void UnsignedChannelUpdateSetShortChannelId(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_timestamp(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_timestamp")] public static extern int UnsignedChannelUpdateGetTimestamp(long _this_ptr);
	// void UnsignedChannelUpdate_set_timestamp(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_timestamp")] public static extern void UnsignedChannelUpdateSetTimestamp(long _this_ptr, int _val);
	// uint8_t UnsignedChannelUpdate_get_flags(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_flags")] public static extern byte UnsignedChannelUpdateGetFlags(long _this_ptr);
	// void UnsignedChannelUpdate_set_flags(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_flags")] public static extern void UnsignedChannelUpdateSetFlags(long _this_ptr, byte _val);
	// uint16_t UnsignedChannelUpdate_get_cltv_expiry_delta(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_cltv_expiry_delta")] public static extern short UnsignedChannelUpdateGetCltvExpiryDelta(long _this_ptr);
	// void UnsignedChannelUpdate_set_cltv_expiry_delta(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_cltv_expiry_delta")] public static extern void UnsignedChannelUpdateSetCltvExpiryDelta(long _this_ptr, short _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_minimum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_minimum_msat")] public static extern long UnsignedChannelUpdateGetHtlcMinimumMsat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_minimum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_minimum_msat")] public static extern void UnsignedChannelUpdateSetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_maximum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_maximum_msat")] public static extern long UnsignedChannelUpdateGetHtlcMaximumMsat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_maximum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_maximum_msat")] public static extern void UnsignedChannelUpdateSetHtlcMaximumMsat(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_fee_base_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_base_msat")] public static extern int UnsignedChannelUpdateGetFeeBaseMsat(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_base_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_base_msat")] public static extern void UnsignedChannelUpdateSetFeeBaseMsat(long _this_ptr, int _val);
	// uint32_t UnsignedChannelUpdate_get_fee_proportional_millionths(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_proportional_millionths")] public static extern int UnsignedChannelUpdateGetFeeProportionalMillionths(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_proportional_millionths(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_proportional_millionths")] public static extern void UnsignedChannelUpdateSetFeeProportionalMillionths(long _this_ptr, int _val);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_get_excess_data(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_excess_data")] public static extern long UnsignedChannelUpdateGetExcessData(long _this_ptr);
	// void UnsignedChannelUpdate_set_excess_data(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_excess_data")] public static extern void UnsignedChannelUpdateSetExcessData(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_new(struct LDKThirtyTwoBytes chain_hash_arg, uint64_t short_channel_id_arg, uint32_t timestamp_arg, uint8_t flags_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_new")] public static extern long UnsignedChannelUpdateNew(long _chain_hash_arg, long _short_channel_id_arg, int _timestamp_arg, byte _flags_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, int _fee_base_msat_arg, int _fee_proportional_millionths_arg, long _excess_data_arg);
	// uint64_t UnsignedChannelUpdate_clone_ptr(LDKUnsignedChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone_ptr")] public static extern long UnsignedChannelUpdateClonePtr(long _arg);
	// struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_clone(const struct LDKUnsignedChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone")] public static extern long UnsignedChannelUpdateClone(long _orig);
	// uint64_t UnsignedChannelUpdate_hash(const struct LDKUnsignedChannelUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_hash")] public static extern long UnsignedChannelUpdateHash(long _o);
	// bool UnsignedChannelUpdate_eq(const struct LDKUnsignedChannelUpdate *NONNULL_PTR a, const struct LDKUnsignedChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_eq")] public static extern bool UnsignedChannelUpdateEq(long _a, long _b);
	// void ChannelUpdate_free(struct LDKChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_free")] public static extern void ChannelUpdateFree(long _this_obj);
	// struct LDKECDSASignature ChannelUpdate_get_signature(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_signature")] public static extern long ChannelUpdateGetSignature(long _this_ptr);
	// void ChannelUpdate_set_signature(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_signature")] public static extern void ChannelUpdateSetSignature(long _this_ptr, long _val);
	// struct LDKUnsignedChannelUpdate ChannelUpdate_get_contents(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_contents")] public static extern long ChannelUpdateGetContents(long _this_ptr);
	// void ChannelUpdate_set_contents(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKUnsignedChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_contents")] public static extern void ChannelUpdateSetContents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdate ChannelUpdate_new(struct LDKECDSASignature signature_arg, struct LDKUnsignedChannelUpdate contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_new")] public static extern long ChannelUpdateNew(long _signature_arg, long _contents_arg);
	// uint64_t ChannelUpdate_clone_ptr(LDKChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone_ptr")] public static extern long ChannelUpdateClonePtr(long _arg);
	// struct LDKChannelUpdate ChannelUpdate_clone(const struct LDKChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone")] public static extern long ChannelUpdateClone(long _orig);
	// uint64_t ChannelUpdate_hash(const struct LDKChannelUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_hash")] public static extern long ChannelUpdateHash(long _o);
	// bool ChannelUpdate_eq(const struct LDKChannelUpdate *NONNULL_PTR a, const struct LDKChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_eq")] public static extern bool ChannelUpdateEq(long _a, long _b);
	// void QueryChannelRange_free(struct LDKQueryChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_free")] public static extern void QueryChannelRangeFree(long _this_obj);
	// const uint8_t (*QueryChannelRange_get_chain_hash(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_chain_hash")] public static extern long QueryChannelRangeGetChainHash(long _this_ptr);
	// void QueryChannelRange_set_chain_hash(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_chain_hash")] public static extern void QueryChannelRangeSetChainHash(long _this_ptr, long _val);
	// uint32_t QueryChannelRange_get_first_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_first_blocknum")] public static extern int QueryChannelRangeGetFirstBlocknum(long _this_ptr);
	// void QueryChannelRange_set_first_blocknum(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_first_blocknum")] public static extern void QueryChannelRangeSetFirstBlocknum(long _this_ptr, int _val);
	// uint32_t QueryChannelRange_get_number_of_blocks(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_number_of_blocks")] public static extern int QueryChannelRangeGetNumberOfBlocks(long _this_ptr);
	// void QueryChannelRange_set_number_of_blocks(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_number_of_blocks")] public static extern void QueryChannelRangeSetNumberOfBlocks(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKQueryChannelRange QueryChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_new")] public static extern long QueryChannelRangeNew(long _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg);
	// uint64_t QueryChannelRange_clone_ptr(LDKQueryChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone_ptr")] public static extern long QueryChannelRangeClonePtr(long _arg);
	// struct LDKQueryChannelRange QueryChannelRange_clone(const struct LDKQueryChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone")] public static extern long QueryChannelRangeClone(long _orig);
	// uint64_t QueryChannelRange_hash(const struct LDKQueryChannelRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_hash")] public static extern long QueryChannelRangeHash(long _o);
	// bool QueryChannelRange_eq(const struct LDKQueryChannelRange *NONNULL_PTR a, const struct LDKQueryChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_eq")] public static extern bool QueryChannelRangeEq(long _a, long _b);
	// void ReplyChannelRange_free(struct LDKReplyChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_free")] public static extern void ReplyChannelRangeFree(long _this_obj);
	// const uint8_t (*ReplyChannelRange_get_chain_hash(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_chain_hash")] public static extern long ReplyChannelRangeGetChainHash(long _this_ptr);
	// void ReplyChannelRange_set_chain_hash(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_chain_hash")] public static extern void ReplyChannelRangeSetChainHash(long _this_ptr, long _val);
	// uint32_t ReplyChannelRange_get_first_blocknum(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_first_blocknum")] public static extern int ReplyChannelRangeGetFirstBlocknum(long _this_ptr);
	// void ReplyChannelRange_set_first_blocknum(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_first_blocknum")] public static extern void ReplyChannelRangeSetFirstBlocknum(long _this_ptr, int _val);
	// uint32_t ReplyChannelRange_get_number_of_blocks(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_number_of_blocks")] public static extern int ReplyChannelRangeGetNumberOfBlocks(long _this_ptr);
	// void ReplyChannelRange_set_number_of_blocks(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_number_of_blocks")] public static extern void ReplyChannelRangeSetNumberOfBlocks(long _this_ptr, int _val);
	// bool ReplyChannelRange_get_sync_complete(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_sync_complete")] public static extern bool ReplyChannelRangeGetSyncComplete(long _this_ptr);
	// void ReplyChannelRange_set_sync_complete(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_sync_complete")] public static extern void ReplyChannelRangeSetSyncComplete(long _this_ptr, bool _val);
	// struct LDKCVec_u64Z ReplyChannelRange_get_short_channel_ids(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_short_channel_ids")] public static extern long ReplyChannelRangeGetShortChannelIds(long _this_ptr);
	// void ReplyChannelRange_set_short_channel_ids(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_short_channel_ids")] public static extern void ReplyChannelRangeSetShortChannelIds(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKReplyChannelRange ReplyChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg, bool sync_complete_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_new")] public static extern long ReplyChannelRangeNew(long _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg, bool _sync_complete_arg, long _short_channel_ids_arg);
	// uint64_t ReplyChannelRange_clone_ptr(LDKReplyChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone_ptr")] public static extern long ReplyChannelRangeClonePtr(long _arg);
	// struct LDKReplyChannelRange ReplyChannelRange_clone(const struct LDKReplyChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone")] public static extern long ReplyChannelRangeClone(long _orig);
	// uint64_t ReplyChannelRange_hash(const struct LDKReplyChannelRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_hash")] public static extern long ReplyChannelRangeHash(long _o);
	// bool ReplyChannelRange_eq(const struct LDKReplyChannelRange *NONNULL_PTR a, const struct LDKReplyChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_eq")] public static extern bool ReplyChannelRangeEq(long _a, long _b);
	// void QueryShortChannelIds_free(struct LDKQueryShortChannelIds this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_free")] public static extern void QueryShortChannelIdsFree(long _this_obj);
	// const uint8_t (*QueryShortChannelIds_get_chain_hash(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_chain_hash")] public static extern long QueryShortChannelIdsGetChainHash(long _this_ptr);
	// void QueryShortChannelIds_set_chain_hash(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_chain_hash")] public static extern void QueryShortChannelIdsSetChainHash(long _this_ptr, long _val);
	// struct LDKCVec_u64Z QueryShortChannelIds_get_short_channel_ids(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_short_channel_ids")] public static extern long QueryShortChannelIdsGetShortChannelIds(long _this_ptr);
	// void QueryShortChannelIds_set_short_channel_ids(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_short_channel_ids")] public static extern void QueryShortChannelIdsSetShortChannelIds(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKQueryShortChannelIds QueryShortChannelIds_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_new")] public static extern long QueryShortChannelIdsNew(long _chain_hash_arg, long _short_channel_ids_arg);
	// uint64_t QueryShortChannelIds_clone_ptr(LDKQueryShortChannelIds *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone_ptr")] public static extern long QueryShortChannelIdsClonePtr(long _arg);
	// struct LDKQueryShortChannelIds QueryShortChannelIds_clone(const struct LDKQueryShortChannelIds *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone")] public static extern long QueryShortChannelIdsClone(long _orig);
	// uint64_t QueryShortChannelIds_hash(const struct LDKQueryShortChannelIds *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_hash")] public static extern long QueryShortChannelIdsHash(long _o);
	// bool QueryShortChannelIds_eq(const struct LDKQueryShortChannelIds *NONNULL_PTR a, const struct LDKQueryShortChannelIds *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_eq")] public static extern bool QueryShortChannelIdsEq(long _a, long _b);
	// void ReplyShortChannelIdsEnd_free(struct LDKReplyShortChannelIdsEnd this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_free")] public static extern void ReplyShortChannelIdsEndFree(long _this_obj);
	// const uint8_t (*ReplyShortChannelIdsEnd_get_chain_hash(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_chain_hash")] public static extern long ReplyShortChannelIdsEndGetChainHash(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_chain_hash(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_chain_hash")] public static extern void ReplyShortChannelIdsEndSetChainHash(long _this_ptr, long _val);
	// bool ReplyShortChannelIdsEnd_get_full_information(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_full_information")] public static extern bool ReplyShortChannelIdsEndGetFullInformation(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_full_information(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_full_information")] public static extern void ReplyShortChannelIdsEndSetFullInformation(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_new(struct LDKThirtyTwoBytes chain_hash_arg, bool full_information_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_new")] public static extern long ReplyShortChannelIdsEndNew(long _chain_hash_arg, bool _full_information_arg);
	// uint64_t ReplyShortChannelIdsEnd_clone_ptr(LDKReplyShortChannelIdsEnd *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone_ptr")] public static extern long ReplyShortChannelIdsEndClonePtr(long _arg);
	// struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_clone(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone")] public static extern long ReplyShortChannelIdsEndClone(long _orig);
	// uint64_t ReplyShortChannelIdsEnd_hash(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_hash")] public static extern long ReplyShortChannelIdsEndHash(long _o);
	// bool ReplyShortChannelIdsEnd_eq(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR a, const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_eq")] public static extern bool ReplyShortChannelIdsEndEq(long _a, long _b);
	// void GossipTimestampFilter_free(struct LDKGossipTimestampFilter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_free")] public static extern void GossipTimestampFilterFree(long _this_obj);
	// const uint8_t (*GossipTimestampFilter_get_chain_hash(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_chain_hash")] public static extern long GossipTimestampFilterGetChainHash(long _this_ptr);
	// void GossipTimestampFilter_set_chain_hash(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_chain_hash")] public static extern void GossipTimestampFilterSetChainHash(long _this_ptr, long _val);
	// uint32_t GossipTimestampFilter_get_first_timestamp(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_first_timestamp")] public static extern int GossipTimestampFilterGetFirstTimestamp(long _this_ptr);
	// void GossipTimestampFilter_set_first_timestamp(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_first_timestamp")] public static extern void GossipTimestampFilterSetFirstTimestamp(long _this_ptr, int _val);
	// uint32_t GossipTimestampFilter_get_timestamp_range(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_timestamp_range")] public static extern int GossipTimestampFilterGetTimestampRange(long _this_ptr);
	// void GossipTimestampFilter_set_timestamp_range(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_timestamp_range")] public static extern void GossipTimestampFilterSetTimestampRange(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKGossipTimestampFilter GossipTimestampFilter_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_timestamp_arg, uint32_t timestamp_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_new")] public static extern long GossipTimestampFilterNew(long _chain_hash_arg, int _first_timestamp_arg, int _timestamp_range_arg);
	// uint64_t GossipTimestampFilter_clone_ptr(LDKGossipTimestampFilter *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone_ptr")] public static extern long GossipTimestampFilterClonePtr(long _arg);
	// struct LDKGossipTimestampFilter GossipTimestampFilter_clone(const struct LDKGossipTimestampFilter *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone")] public static extern long GossipTimestampFilterClone(long _orig);
	// uint64_t GossipTimestampFilter_hash(const struct LDKGossipTimestampFilter *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_hash")] public static extern long GossipTimestampFilterHash(long _o);
	// bool GossipTimestampFilter_eq(const struct LDKGossipTimestampFilter *NONNULL_PTR a, const struct LDKGossipTimestampFilter *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_eq")] public static extern bool GossipTimestampFilterEq(long _a, long _b);
	// void ErrorAction_free(struct LDKErrorAction this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_free")] public static extern void ErrorActionFree(long _this_ptr);
	// uint64_t ErrorAction_clone_ptr(LDKErrorAction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone_ptr")] public static extern long ErrorActionClonePtr(long _arg);
	// struct LDKErrorAction ErrorAction_clone(const struct LDKErrorAction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone")] public static extern long ErrorActionClone(long _orig);
	// struct LDKErrorAction ErrorAction_disconnect_peer(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_disconnect_peer")] public static extern long ErrorActionDisconnectPeer(long _msg);
	// struct LDKErrorAction ErrorAction_disconnect_peer_with_warning(struct LDKWarningMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_disconnect_peer_with_warning")] public static extern long ErrorActionDisconnectPeerWithWarning(long _msg);
	// struct LDKErrorAction ErrorAction_ignore_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_error")] public static extern long ErrorActionIgnoreError();
	// struct LDKErrorAction ErrorAction_ignore_and_log(enum LDKLevel a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_and_log")] public static extern long ErrorActionIgnoreAndLog(Level _a);
	// struct LDKErrorAction ErrorAction_ignore_duplicate_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_duplicate_gossip")] public static extern long ErrorActionIgnoreDuplicateGossip();
	// struct LDKErrorAction ErrorAction_send_error_message(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_error_message")] public static extern long ErrorActionSendErrorMessage(long _msg);
	// struct LDKErrorAction ErrorAction_send_warning_message(struct LDKWarningMessage msg, enum LDKLevel log_level);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_warning_message")] public static extern long ErrorActionSendWarningMessage(long _msg, Level _log_level);
	// uint64_t ErrorAction_hash(const struct LDKErrorAction *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_hash")] public static extern long ErrorActionHash(long _o);
	// void LightningError_free(struct LDKLightningError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_free")] public static extern void LightningErrorFree(long _this_obj);
	// struct LDKStr LightningError_get_err(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_err")] public static extern long LightningErrorGetErr(long _this_ptr);
	// void LightningError_set_err(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_err")] public static extern void LightningErrorSetErr(long _this_ptr, long _val);
	// struct LDKErrorAction LightningError_get_action(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_action")] public static extern long LightningErrorGetAction(long _this_ptr);
	// void LightningError_set_action(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKErrorAction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_action")] public static extern void LightningErrorSetAction(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLightningError LightningError_new(struct LDKStr err_arg, struct LDKErrorAction action_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_new")] public static extern long LightningErrorNew(long _err_arg, long _action_arg);
	// uint64_t LightningError_clone_ptr(LDKLightningError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone_ptr")] public static extern long LightningErrorClonePtr(long _arg);
	// struct LDKLightningError LightningError_clone(const struct LDKLightningError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone")] public static extern long LightningErrorClone(long _orig);
	// void CommitmentUpdate_free(struct LDKCommitmentUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_free")] public static extern void CommitmentUpdateFree(long _this_obj);
	// struct LDKCVec_UpdateAddHTLCZ CommitmentUpdate_get_update_add_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_add_htlcs")] public static extern long CommitmentUpdateGetUpdateAddHtlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_add_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateAddHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_add_htlcs")] public static extern void CommitmentUpdateSetUpdateAddHtlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFulfillHTLCZ CommitmentUpdate_get_update_fulfill_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fulfill_htlcs")] public static extern long CommitmentUpdateGetUpdateFulfillHtlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fulfill_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFulfillHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fulfill_htlcs")] public static extern void CommitmentUpdateSetUpdateFulfillHtlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFailHTLCZ CommitmentUpdate_get_update_fail_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_htlcs")] public static extern long CommitmentUpdateGetUpdateFailHtlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_htlcs")] public static extern void CommitmentUpdateSetUpdateFailHtlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFailMalformedHTLCZ CommitmentUpdate_get_update_fail_malformed_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_malformed_htlcs")] public static extern long CommitmentUpdateGetUpdateFailMalformedHtlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_malformed_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailMalformedHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_malformed_htlcs")] public static extern void CommitmentUpdateSetUpdateFailMalformedHtlcs(long _this_ptr, long _val);
	// struct LDKUpdateFee CommitmentUpdate_get_update_fee(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fee")] public static extern long CommitmentUpdateGetUpdateFee(long _this_ptr);
	// void CommitmentUpdate_set_update_fee(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKUpdateFee val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fee")] public static extern void CommitmentUpdateSetUpdateFee(long _this_ptr, long _val);
	// struct LDKCommitmentSigned CommitmentUpdate_get_commitment_signed(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_commitment_signed")] public static extern long CommitmentUpdateGetCommitmentSigned(long _this_ptr);
	// void CommitmentUpdate_set_commitment_signed(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCommitmentSigned val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_commitment_signed")] public static extern void CommitmentUpdateSetCommitmentSigned(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentUpdate CommitmentUpdate_new(struct LDKCVec_UpdateAddHTLCZ update_add_htlcs_arg, struct LDKCVec_UpdateFulfillHTLCZ update_fulfill_htlcs_arg, struct LDKCVec_UpdateFailHTLCZ update_fail_htlcs_arg, struct LDKCVec_UpdateFailMalformedHTLCZ update_fail_malformed_htlcs_arg, struct LDKUpdateFee update_fee_arg, struct LDKCommitmentSigned commitment_signed_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_new")] public static extern long CommitmentUpdateNew(long _update_add_htlcs_arg, long _update_fulfill_htlcs_arg, long _update_fail_htlcs_arg, long _update_fail_malformed_htlcs_arg, long _update_fee_arg, long _commitment_signed_arg);
	// uint64_t CommitmentUpdate_clone_ptr(LDKCommitmentUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone_ptr")] public static extern long CommitmentUpdateClonePtr(long _arg);
	// struct LDKCommitmentUpdate CommitmentUpdate_clone(const struct LDKCommitmentUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone")] public static extern long CommitmentUpdateClone(long _orig);
	// uint64_t CommitmentUpdate_hash(const struct LDKCommitmentUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_hash")] public static extern long CommitmentUpdateHash(long _o);
	// bool CommitmentUpdate_eq(const struct LDKCommitmentUpdate *NONNULL_PTR a, const struct LDKCommitmentUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_eq")] public static extern bool CommitmentUpdateEq(long _a, long _b);
	// void ChannelMessageHandler_free(struct LDKChannelMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_free")] public static extern void ChannelMessageHandlerFree(long _this_ptr);
	// void RoutingMessageHandler_free(struct LDKRoutingMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_free")] public static extern void RoutingMessageHandlerFree(long _this_ptr);
	// void OnionMessageHandler_free(struct LDKOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_free")] public static extern void OnionMessageHandlerFree(long _this_ptr);
	// void FinalOnionHopData_free(struct LDKFinalOnionHopData this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_free")] public static extern void FinalOnionHopDataFree(long _this_obj);
	// const uint8_t (*FinalOnionHopData_get_payment_secret(const struct LDKFinalOnionHopData *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_get_payment_secret")] public static extern long FinalOnionHopDataGetPaymentSecret(long _this_ptr);
	// void FinalOnionHopData_set_payment_secret(struct LDKFinalOnionHopData *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_set_payment_secret")] public static extern void FinalOnionHopDataSetPaymentSecret(long _this_ptr, long _val);
	// uint64_t FinalOnionHopData_get_total_msat(const struct LDKFinalOnionHopData *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_get_total_msat")] public static extern long FinalOnionHopDataGetTotalMsat(long _this_ptr);
	// void FinalOnionHopData_set_total_msat(struct LDKFinalOnionHopData *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_set_total_msat")] public static extern void FinalOnionHopDataSetTotalMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFinalOnionHopData FinalOnionHopData_new(struct LDKThirtyTwoBytes payment_secret_arg, uint64_t total_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_new")] public static extern long FinalOnionHopDataNew(long _payment_secret_arg, long _total_msat_arg);
	// uint64_t FinalOnionHopData_clone_ptr(LDKFinalOnionHopData *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_clone_ptr")] public static extern long FinalOnionHopDataClonePtr(long _arg);
	// struct LDKFinalOnionHopData FinalOnionHopData_clone(const struct LDKFinalOnionHopData *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_clone")] public static extern long FinalOnionHopDataClone(long _orig);
	// void OnionPacket_free(struct LDKOnionPacket this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_free")] public static extern void OnionPacketFree(long _this_obj);
	// uint8_t OnionPacket_get_version(const struct LDKOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_version")] public static extern byte OnionPacketGetVersion(long _this_ptr);
	// void OnionPacket_set_version(struct LDKOnionPacket *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_version")] public static extern void OnionPacketSetVersion(long _this_ptr, byte _val);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ OnionPacket_get_public_key(const struct LDKOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_public_key")] public static extern long OnionPacketGetPublicKey(long _this_ptr);
	// void OnionPacket_set_public_key(struct LDKOnionPacket *NONNULL_PTR this_ptr, struct LDKCResult_PublicKeySecp256k1ErrorZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_public_key")] public static extern void OnionPacketSetPublicKey(long _this_ptr, long _val);
	// const uint8_t (*OnionPacket_get_hmac(const struct LDKOnionPacket *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_hmac")] public static extern long OnionPacketGetHmac(long _this_ptr);
	// void OnionPacket_set_hmac(struct LDKOnionPacket *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_hmac")] public static extern void OnionPacketSetHmac(long _this_ptr, long _val);
	// uint64_t OnionPacket_clone_ptr(LDKOnionPacket *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_clone_ptr")] public static extern long OnionPacketClonePtr(long _arg);
	// struct LDKOnionPacket OnionPacket_clone(const struct LDKOnionPacket *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_clone")] public static extern long OnionPacketClone(long _orig);
	// uint64_t OnionPacket_hash(const struct LDKOnionPacket *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_hash")] public static extern long OnionPacketHash(long _o);
	// bool OnionPacket_eq(const struct LDKOnionPacket *NONNULL_PTR a, const struct LDKOnionPacket *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_eq")] public static extern bool OnionPacketEq(long _a, long _b);
	// struct LDKCVec_u8Z AcceptChannel_write(const struct LDKAcceptChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_write")] public static extern long AcceptChannelWrite(long _obj);
	// struct LDKCResult_AcceptChannelDecodeErrorZ AcceptChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_read")] public static extern long AcceptChannelRead(long _ser);
	// struct LDKCVec_u8Z AcceptChannelV2_write(const struct LDKAcceptChannelV2 *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_write")] public static extern long AcceptChannelV2Write(long _obj);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ AcceptChannelV2_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_read")] public static extern long AcceptChannelV2Read(long _ser);
	// struct LDKCVec_u8Z Stfu_write(const struct LDKStfu *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_write")] public static extern long StfuWrite(long _obj);
	// struct LDKCResult_StfuDecodeErrorZ Stfu_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_read")] public static extern long StfuRead(long _ser);
	// struct LDKCVec_u8Z Splice_write(const struct LDKSplice *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_write")] public static extern long SpliceWrite(long _obj);
	// struct LDKCResult_SpliceDecodeErrorZ Splice_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Splice_read")] public static extern long SpliceRead(long _ser);
	// struct LDKCVec_u8Z SpliceAck_write(const struct LDKSpliceAck *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_write")] public static extern long SpliceAckWrite(long _obj);
	// struct LDKCResult_SpliceAckDecodeErrorZ SpliceAck_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_read")] public static extern long SpliceAckRead(long _ser);
	// struct LDKCVec_u8Z SpliceLocked_write(const struct LDKSpliceLocked *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_write")] public static extern long SpliceLockedWrite(long _obj);
	// struct LDKCResult_SpliceLockedDecodeErrorZ SpliceLocked_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_read")] public static extern long SpliceLockedRead(long _ser);
	// struct LDKCVec_u8Z TxAddInput_write(const struct LDKTxAddInput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_write")] public static extern long TxAddInputWrite(long _obj);
	// struct LDKCResult_TxAddInputDecodeErrorZ TxAddInput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_read")] public static extern long TxAddInputRead(long _ser);
	// struct LDKCVec_u8Z TxAddOutput_write(const struct LDKTxAddOutput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_write")] public static extern long TxAddOutputWrite(long _obj);
	// struct LDKCResult_TxAddOutputDecodeErrorZ TxAddOutput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_read")] public static extern long TxAddOutputRead(long _ser);
	// struct LDKCVec_u8Z TxRemoveInput_write(const struct LDKTxRemoveInput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_write")] public static extern long TxRemoveInputWrite(long _obj);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ TxRemoveInput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_read")] public static extern long TxRemoveInputRead(long _ser);
	// struct LDKCVec_u8Z TxRemoveOutput_write(const struct LDKTxRemoveOutput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_write")] public static extern long TxRemoveOutputWrite(long _obj);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ TxRemoveOutput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_read")] public static extern long TxRemoveOutputRead(long _ser);
	// struct LDKCVec_u8Z TxComplete_write(const struct LDKTxComplete *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_write")] public static extern long TxCompleteWrite(long _obj);
	// struct LDKCResult_TxCompleteDecodeErrorZ TxComplete_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_read")] public static extern long TxCompleteRead(long _ser);
	// struct LDKCVec_u8Z TxSignatures_write(const struct LDKTxSignatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_write")] public static extern long TxSignaturesWrite(long _obj);
	// struct LDKCResult_TxSignaturesDecodeErrorZ TxSignatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_read")] public static extern long TxSignaturesRead(long _ser);
	// struct LDKCVec_u8Z TxInitRbf_write(const struct LDKTxInitRbf *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_write")] public static extern long TxInitRbfWrite(long _obj);
	// struct LDKCResult_TxInitRbfDecodeErrorZ TxInitRbf_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_read")] public static extern long TxInitRbfRead(long _ser);
	// struct LDKCVec_u8Z TxAckRbf_write(const struct LDKTxAckRbf *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_write")] public static extern long TxAckRbfWrite(long _obj);
	// struct LDKCResult_TxAckRbfDecodeErrorZ TxAckRbf_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_read")] public static extern long TxAckRbfRead(long _ser);
	// struct LDKCVec_u8Z TxAbort_write(const struct LDKTxAbort *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_write")] public static extern long TxAbortWrite(long _obj);
	// struct LDKCResult_TxAbortDecodeErrorZ TxAbort_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_read")] public static extern long TxAbortRead(long _ser);
	// struct LDKCVec_u8Z AnnouncementSignatures_write(const struct LDKAnnouncementSignatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_write")] public static extern long AnnouncementSignaturesWrite(long _obj);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ AnnouncementSignatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_read")] public static extern long AnnouncementSignaturesRead(long _ser);
	// struct LDKCVec_u8Z ChannelReestablish_write(const struct LDKChannelReestablish *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_write")] public static extern long ChannelReestablishWrite(long _obj);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ ChannelReestablish_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_read")] public static extern long ChannelReestablishRead(long _ser);
	// struct LDKCVec_u8Z ClosingSigned_write(const struct LDKClosingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_write")] public static extern long ClosingSignedWrite(long _obj);
	// struct LDKCResult_ClosingSignedDecodeErrorZ ClosingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_read")] public static extern long ClosingSignedRead(long _ser);
	// struct LDKCVec_u8Z ClosingSignedFeeRange_write(const struct LDKClosingSignedFeeRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_write")] public static extern long ClosingSignedFeeRangeWrite(long _obj);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ ClosingSignedFeeRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_read")] public static extern long ClosingSignedFeeRangeRead(long _ser);
	// struct LDKCVec_u8Z CommitmentSigned_write(const struct LDKCommitmentSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_write")] public static extern long CommitmentSignedWrite(long _obj);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CommitmentSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_read")] public static extern long CommitmentSignedRead(long _ser);
	// struct LDKCVec_u8Z FundingCreated_write(const struct LDKFundingCreated *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_write")] public static extern long FundingCreatedWrite(long _obj);
	// struct LDKCResult_FundingCreatedDecodeErrorZ FundingCreated_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_read")] public static extern long FundingCreatedRead(long _ser);
	// struct LDKCVec_u8Z FundingSigned_write(const struct LDKFundingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_write")] public static extern long FundingSignedWrite(long _obj);
	// struct LDKCResult_FundingSignedDecodeErrorZ FundingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_read")] public static extern long FundingSignedRead(long _ser);
	// struct LDKCVec_u8Z ChannelReady_write(const struct LDKChannelReady *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_write")] public static extern long ChannelReadyWrite(long _obj);
	// struct LDKCResult_ChannelReadyDecodeErrorZ ChannelReady_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_read")] public static extern long ChannelReadyRead(long _ser);
	// struct LDKCVec_u8Z Init_write(const struct LDKInit *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_write")] public static extern long InitWrite(long _obj);
	// struct LDKCResult_InitDecodeErrorZ Init_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_read")] public static extern long InitRead(long _ser);
	// struct LDKCVec_u8Z OpenChannel_write(const struct LDKOpenChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_write")] public static extern long OpenChannelWrite(long _obj);
	// struct LDKCResult_OpenChannelDecodeErrorZ OpenChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_read")] public static extern long OpenChannelRead(long _ser);
	// struct LDKCVec_u8Z OpenChannelV2_write(const struct LDKOpenChannelV2 *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_write")] public static extern long OpenChannelV2Write(long _obj);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ OpenChannelV2_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_read")] public static extern long OpenChannelV2Read(long _ser);
	// struct LDKCVec_u8Z RevokeAndACK_write(const struct LDKRevokeAndACK *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_write")] public static extern long RevokeAndACKWrite(long _obj);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ RevokeAndACK_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_read")] public static extern long RevokeAndACKRead(long _ser);
	// struct LDKCVec_u8Z Shutdown_write(const struct LDKShutdown *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_write")] public static extern long ShutdownWrite(long _obj);
	// struct LDKCResult_ShutdownDecodeErrorZ Shutdown_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_read")] public static extern long ShutdownRead(long _ser);
	// struct LDKCVec_u8Z UpdateFailHTLC_write(const struct LDKUpdateFailHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_write")] public static extern long UpdateFailHTLCWrite(long _obj);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ UpdateFailHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_read")] public static extern long UpdateFailHTLCRead(long _ser);
	// struct LDKCVec_u8Z UpdateFailMalformedHTLC_write(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_write")] public static extern long UpdateFailMalformedHTLCWrite(long _obj);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ UpdateFailMalformedHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_read")] public static extern long UpdateFailMalformedHTLCRead(long _ser);
	// struct LDKCVec_u8Z UpdateFee_write(const struct LDKUpdateFee *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_write")] public static extern long UpdateFeeWrite(long _obj);
	// struct LDKCResult_UpdateFeeDecodeErrorZ UpdateFee_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_read")] public static extern long UpdateFeeRead(long _ser);
	// struct LDKCVec_u8Z UpdateFulfillHTLC_write(const struct LDKUpdateFulfillHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_write")] public static extern long UpdateFulfillHTLCWrite(long _obj);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ UpdateFulfillHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_read")] public static extern long UpdateFulfillHTLCRead(long _ser);
	// struct LDKCVec_u8Z OnionPacket_write(const struct LDKOnionPacket *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_write")] public static extern long OnionPacketWrite(long _obj);
	// struct LDKCResult_OnionPacketDecodeErrorZ OnionPacket_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_read")] public static extern long OnionPacketRead(long _ser);
	// struct LDKCVec_u8Z UpdateAddHTLC_write(const struct LDKUpdateAddHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_write")] public static extern long UpdateAddHTLCWrite(long _obj);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ UpdateAddHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_read")] public static extern long UpdateAddHTLCRead(long _ser);
	// struct LDKCResult_OnionMessageDecodeErrorZ OnionMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_read")] public static extern long OnionMessageRead(long _ser);
	// struct LDKCVec_u8Z OnionMessage_write(const struct LDKOnionMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_write")] public static extern long OnionMessageWrite(long _obj);
	// struct LDKCVec_u8Z FinalOnionHopData_write(const struct LDKFinalOnionHopData *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_write")] public static extern long FinalOnionHopDataWrite(long _obj);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ FinalOnionHopData_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_read")] public static extern long FinalOnionHopDataRead(long _ser);
	// struct LDKCVec_u8Z Ping_write(const struct LDKPing *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_write")] public static extern long PingWrite(long _obj);
	// struct LDKCResult_PingDecodeErrorZ Ping_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_read")] public static extern long PingRead(long _ser);
	// struct LDKCVec_u8Z Pong_write(const struct LDKPong *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_write")] public static extern long PongWrite(long _obj);
	// struct LDKCResult_PongDecodeErrorZ Pong_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_read")] public static extern long PongRead(long _ser);
	// struct LDKCVec_u8Z UnsignedChannelAnnouncement_write(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_write")] public static extern long UnsignedChannelAnnouncementWrite(long _obj);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ UnsignedChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_read")] public static extern long UnsignedChannelAnnouncementRead(long _ser);
	// struct LDKCVec_u8Z ChannelAnnouncement_write(const struct LDKChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_write")] public static extern long ChannelAnnouncementWrite(long _obj);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ ChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_read")] public static extern long ChannelAnnouncementRead(long _ser);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_write(const struct LDKUnsignedChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_write")] public static extern long UnsignedChannelUpdateWrite(long _obj);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ UnsignedChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_read")] public static extern long UnsignedChannelUpdateRead(long _ser);
	// struct LDKCVec_u8Z ChannelUpdate_write(const struct LDKChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_write")] public static extern long ChannelUpdateWrite(long _obj);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ ChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_read")] public static extern long ChannelUpdateRead(long _ser);
	// struct LDKCVec_u8Z ErrorMessage_write(const struct LDKErrorMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_write")] public static extern long ErrorMessageWrite(long _obj);
	// struct LDKCResult_ErrorMessageDecodeErrorZ ErrorMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_read")] public static extern long ErrorMessageRead(long _ser);
	// struct LDKCVec_u8Z WarningMessage_write(const struct LDKWarningMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_write")] public static extern long WarningMessageWrite(long _obj);
	// struct LDKCResult_WarningMessageDecodeErrorZ WarningMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_read")] public static extern long WarningMessageRead(long _ser);
	// struct LDKCVec_u8Z UnsignedNodeAnnouncement_write(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_write")] public static extern long UnsignedNodeAnnouncementWrite(long _obj);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ UnsignedNodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_read")] public static extern long UnsignedNodeAnnouncementRead(long _ser);
	// struct LDKCVec_u8Z NodeAnnouncement_write(const struct LDKNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_write")] public static extern long NodeAnnouncementWrite(long _obj);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ NodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_read")] public static extern long NodeAnnouncementRead(long _ser);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ QueryShortChannelIds_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_read")] public static extern long QueryShortChannelIdsRead(long _ser);
	// struct LDKCVec_u8Z QueryShortChannelIds_write(const struct LDKQueryShortChannelIds *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_write")] public static extern long QueryShortChannelIdsWrite(long _obj);
	// struct LDKCVec_u8Z ReplyShortChannelIdsEnd_write(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_write")] public static extern long ReplyShortChannelIdsEndWrite(long _obj);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ ReplyShortChannelIdsEnd_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_read")] public static extern long ReplyShortChannelIdsEndRead(long _ser);
	// MUST_USE_RES uint32_t QueryChannelRange_end_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_end_blocknum")] public static extern int QueryChannelRangeEndBlocknum(long _this_arg);
	// struct LDKCVec_u8Z QueryChannelRange_write(const struct LDKQueryChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_write")] public static extern long QueryChannelRangeWrite(long _obj);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ QueryChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_read")] public static extern long QueryChannelRangeRead(long _ser);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ ReplyChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_read")] public static extern long ReplyChannelRangeRead(long _ser);
	// struct LDKCVec_u8Z ReplyChannelRange_write(const struct LDKReplyChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_write")] public static extern long ReplyChannelRangeWrite(long _obj);
	// struct LDKCVec_u8Z GossipTimestampFilter_write(const struct LDKGossipTimestampFilter *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_write")] public static extern long GossipTimestampFilterWrite(long _obj);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ GossipTimestampFilter_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_read")] public static extern long GossipTimestampFilterRead(long _ser);
	// void CustomMessageHandler_free(struct LDKCustomMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_free")] public static extern void CustomMessageHandlerFree(long _this_ptr);
	// void IgnoringMessageHandler_free(struct LDKIgnoringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_free")] public static extern void IgnoringMessageHandlerFree(long _this_obj);
	// MUST_USE_RES struct LDKIgnoringMessageHandler IgnoringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_new")] public static extern long IgnoringMessageHandlerNew();
	// struct LDKEventsProvider IgnoringMessageHandler_as_EventsProvider(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_EventsProvider")] public static extern long IgnoringMessageHandlerAsEventsProvider(long _this_arg);
	// struct LDKMessageSendEventsProvider IgnoringMessageHandler_as_MessageSendEventsProvider(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_MessageSendEventsProvider")] public static extern long IgnoringMessageHandlerAsMessageSendEventsProvider(long _this_arg);
	// struct LDKRoutingMessageHandler IgnoringMessageHandler_as_RoutingMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_RoutingMessageHandler")] public static extern long IgnoringMessageHandlerAsRoutingMessageHandler(long _this_arg);
	// struct LDKOnionMessageHandler IgnoringMessageHandler_as_OnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OnionMessageHandler")] public static extern long IgnoringMessageHandlerAsOnionMessageHandler(long _this_arg);
	// struct LDKOffersMessageHandler IgnoringMessageHandler_as_OffersMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OffersMessageHandler")] public static extern long IgnoringMessageHandlerAsOffersMessageHandler(long _this_arg);
	// struct LDKCustomOnionMessageHandler IgnoringMessageHandler_as_CustomOnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomOnionMessageHandler")] public static extern long IgnoringMessageHandlerAsCustomOnionMessageHandler(long _this_arg);
	// struct LDKCustomMessageReader IgnoringMessageHandler_as_CustomMessageReader(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageReader")] public static extern long IgnoringMessageHandlerAsCustomMessageReader(long _this_arg);
	// struct LDKCustomMessageHandler IgnoringMessageHandler_as_CustomMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageHandler")] public static extern long IgnoringMessageHandlerAsCustomMessageHandler(long _this_arg);
	// void ErroringMessageHandler_free(struct LDKErroringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_free")] public static extern void ErroringMessageHandlerFree(long _this_obj);
	// MUST_USE_RES struct LDKErroringMessageHandler ErroringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_new")] public static extern long ErroringMessageHandlerNew();
	// struct LDKMessageSendEventsProvider ErroringMessageHandler_as_MessageSendEventsProvider(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_MessageSendEventsProvider")] public static extern long ErroringMessageHandlerAsMessageSendEventsProvider(long _this_arg);
	// struct LDKChannelMessageHandler ErroringMessageHandler_as_ChannelMessageHandler(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_ChannelMessageHandler")] public static extern long ErroringMessageHandlerAsChannelMessageHandler(long _this_arg);
	// void MessageHandler_free(struct LDKMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_free")] public static extern void MessageHandlerFree(long _this_obj);
	// const struct LDKChannelMessageHandler *MessageHandler_get_chan_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_chan_handler")] public static extern long MessageHandlerGetChanHandler(long _this_ptr);
	// void MessageHandler_set_chan_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKChannelMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_chan_handler")] public static extern void MessageHandlerSetChanHandler(long _this_ptr, long _val);
	// const struct LDKRoutingMessageHandler *MessageHandler_get_route_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_route_handler")] public static extern long MessageHandlerGetRouteHandler(long _this_ptr);
	// void MessageHandler_set_route_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKRoutingMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_route_handler")] public static extern void MessageHandlerSetRouteHandler(long _this_ptr, long _val);
	// const struct LDKOnionMessageHandler *MessageHandler_get_onion_message_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_onion_message_handler")] public static extern long MessageHandlerGetOnionMessageHandler(long _this_ptr);
	// void MessageHandler_set_onion_message_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKOnionMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_onion_message_handler")] public static extern void MessageHandlerSetOnionMessageHandler(long _this_ptr, long _val);
	// const struct LDKCustomMessageHandler *MessageHandler_get_custom_message_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_custom_message_handler")] public static extern long MessageHandlerGetCustomMessageHandler(long _this_ptr);
	// void MessageHandler_set_custom_message_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKCustomMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_custom_message_handler")] public static extern void MessageHandlerSetCustomMessageHandler(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMessageHandler MessageHandler_new(struct LDKChannelMessageHandler chan_handler_arg, struct LDKRoutingMessageHandler route_handler_arg, struct LDKOnionMessageHandler onion_message_handler_arg, struct LDKCustomMessageHandler custom_message_handler_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_new")] public static extern long MessageHandlerNew(long _chan_handler_arg, long _route_handler_arg, long _onion_message_handler_arg, long _custom_message_handler_arg);
	// uint64_t SocketDescriptor_clone_ptr(LDKSocketDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone_ptr")] public static extern long SocketDescriptorClonePtr(long _arg);
	// struct LDKSocketDescriptor SocketDescriptor_clone(const struct LDKSocketDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone")] public static extern long SocketDescriptorClone(long _orig);
	// void SocketDescriptor_free(struct LDKSocketDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_free")] public static extern void SocketDescriptorFree(long _this_ptr);
	// void PeerHandleError_free(struct LDKPeerHandleError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_free")] public static extern void PeerHandleErrorFree(long _this_obj);
	// MUST_USE_RES struct LDKPeerHandleError PeerHandleError_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_new")] public static extern long PeerHandleErrorNew();
	// uint64_t PeerHandleError_clone_ptr(LDKPeerHandleError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone_ptr")] public static extern long PeerHandleErrorClonePtr(long _arg);
	// struct LDKPeerHandleError PeerHandleError_clone(const struct LDKPeerHandleError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone")] public static extern long PeerHandleErrorClone(long _orig);
	// void PeerManager_free(struct LDKPeerManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_free")] public static extern void PeerManagerFree(long _this_obj);
	// MUST_USE_RES struct LDKPeerManager PeerManager_new(struct LDKMessageHandler message_handler, uint32_t current_time, const uint8_t (*ephemeral_random_data)[32], struct LDKLogger logger, struct LDKNodeSigner node_signer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new")] public static extern long PeerManagerNew(long _message_handler, int _current_time, long _ephemeral_random_data, long _logger, long _node_signer);
	// MUST_USE_RES struct LDKCVec_C2Tuple_PublicKeyCOption_SocketAddressZZZ PeerManager_get_peer_node_ids(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_get_peer_node_ids")] public static extern long PeerManagerGetPeerNodeIds(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_u8ZPeerHandleErrorZ PeerManager_new_outbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKSocketDescriptor descriptor, struct LDKCOption_SocketAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_outbound_connection")] public static extern long PeerManagerNewOutboundConnection(long _this_arg, long _their_node_id, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_new_inbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor descriptor, struct LDKCOption_SocketAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_inbound_connection")] public static extern long PeerManagerNewInboundConnection(long _this_arg, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_write_buffer_space_avail(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_write_buffer_space_avail")] public static extern long PeerManagerWriteBufferSpaceAvail(long _this_arg, long _descriptor);
	// MUST_USE_RES struct LDKCResult_boolPeerHandleErrorZ PeerManager_read_event(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR peer_descriptor, struct LDKu8slice data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_read_event")] public static extern long PeerManagerReadEvent(long _this_arg, long _peer_descriptor, long _data);
	// void PeerManager_process_events(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_process_events")] public static extern void PeerManagerProcessEvents(long _this_arg);
	// void PeerManager_socket_disconnected(const struct LDKPeerManager *NONNULL_PTR this_arg, const struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_socket_disconnected")] public static extern void PeerManagerSocketDisconnected(long _this_arg, long _descriptor);
	// void PeerManager_disconnect_by_node_id(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_by_node_id")] public static extern void PeerManagerDisconnectByNodeId(long _this_arg, long _node_id);
	// void PeerManager_disconnect_all_peers(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_all_peers")] public static extern void PeerManagerDisconnectAllPeers(long _this_arg);
	// void PeerManager_timer_tick_occurred(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_timer_tick_occurred")] public static extern void PeerManagerTimerTickOccurred(long _this_arg);
	// void PeerManager_broadcast_node_announcement(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKThreeBytes rgb, struct LDKThirtyTwoBytes alias, struct LDKCVec_SocketAddressZ addresses);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_broadcast_node_announcement")] public static extern void PeerManagerBroadcastNodeAnnouncement(long _this_arg, long _rgb, long _alias, long _addresses);
	// uint64_t htlc_success_tx_weight(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_success_tx_weight")] public static extern long HtlcSuccessTxWeight(long _channel_type_features);
	// uint64_t htlc_timeout_tx_weight(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_timeout_tx_weight")] public static extern long HtlcTimeoutTxWeight(long _channel_type_features);
	// enum LDKHTLCClaim HTLCClaim_clone(const enum LDKHTLCClaim *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_clone")] public static extern HTLCClaim HTLCClaimClone(long _orig);
	// enum LDKHTLCClaim HTLCClaim_offered_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_timeout")] public static extern HTLCClaim HTLCClaimOfferedTimeout();
	// enum LDKHTLCClaim HTLCClaim_offered_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_preimage")] public static extern HTLCClaim HTLCClaimOfferedPreimage();
	// enum LDKHTLCClaim HTLCClaim_accepted_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_timeout")] public static extern HTLCClaim HTLCClaimAcceptedTimeout();
	// enum LDKHTLCClaim HTLCClaim_accepted_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_preimage")] public static extern HTLCClaim HTLCClaimAcceptedPreimage();
	// enum LDKHTLCClaim HTLCClaim_revocation(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_revocation")] public static extern HTLCClaim HTLCClaimRevocation();
	// bool HTLCClaim_eq(const enum LDKHTLCClaim *NONNULL_PTR a, const enum LDKHTLCClaim *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_eq")] public static extern bool HTLCClaimEq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_HTLCClaimZ HTLCClaim_from_witness(struct LDKWitness witness);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_from_witness")] public static extern long HTLCClaimFromWitness(long _witness);
	// struct LDKThirtyTwoBytes build_commitment_secret(const uint8_t (*commitment_seed)[32], uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_commitment_secret")] public static extern long BuildCommitmentSecret(long _commitment_seed, long _idx);
	// struct LDKTransaction build_closing_transaction(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_closing_transaction")] public static extern long BuildClosingTransaction(long _to_holder_value_sat, long _to_counterparty_value_sat, long _to_holder_script, long _to_counterparty_script, long _funding_outpoint);
	// void CounterpartyCommitmentSecrets_free(struct LDKCounterpartyCommitmentSecrets this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_free")] public static extern void CounterpartyCommitmentSecretsFree(long _this_obj);
	// uint64_t CounterpartyCommitmentSecrets_clone_ptr(LDKCounterpartyCommitmentSecrets *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone_ptr")] public static extern long CounterpartyCommitmentSecretsClonePtr(long _arg);
	// struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_clone(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone")] public static extern long CounterpartyCommitmentSecretsClone(long _orig);
	// MUST_USE_RES struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_new")] public static extern long CounterpartyCommitmentSecretsNew();
	// MUST_USE_RES uint64_t CounterpartyCommitmentSecrets_get_min_seen_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_min_seen_secret")] public static extern long CounterpartyCommitmentSecretsGetMinSeenSecret(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ CounterpartyCommitmentSecrets_provide_secret(struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx, struct LDKThirtyTwoBytes secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_provide_secret")] public static extern long CounterpartyCommitmentSecretsProvideSecret(long _this_arg, long _idx, long _secret);
	// MUST_USE_RES struct LDKThirtyTwoBytes CounterpartyCommitmentSecrets_get_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_secret")] public static extern long CounterpartyCommitmentSecretsGetSecret(long _this_arg, long _idx);
	// struct LDKCVec_u8Z CounterpartyCommitmentSecrets_write(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_write")] public static extern long CounterpartyCommitmentSecretsWrite(long _obj);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CounterpartyCommitmentSecrets_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_read")] public static extern long CounterpartyCommitmentSecretsRead(long _ser);
	// struct LDKSecretKey derive_private_key(struct LDKPublicKey per_commitment_point, const uint8_t (*base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_key")] public static extern long DerivePrivateKey(long _per_commitment_point, long _base_secret);
	// struct LDKSecretKey derive_private_revocation_key(const uint8_t (*per_commitment_secret)[32], const uint8_t (*countersignatory_revocation_base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_revocation_key")] public static extern long DerivePrivateRevocationKey(long _per_commitment_secret, long _countersignatory_revocation_base_secret);
	// void TxCreationKeys_free(struct LDKTxCreationKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_free")] public static extern void TxCreationKeysFree(long _this_obj);
	// struct LDKPublicKey TxCreationKeys_get_per_commitment_point(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_per_commitment_point")] public static extern long TxCreationKeysGetPerCommitmentPoint(long _this_ptr);
	// void TxCreationKeys_set_per_commitment_point(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_per_commitment_point")] public static extern void TxCreationKeysSetPerCommitmentPoint(long _this_ptr, long _val);
	// struct LDKRevocationKey TxCreationKeys_get_revocation_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_revocation_key")] public static extern long TxCreationKeysGetRevocationKey(long _this_ptr);
	// void TxCreationKeys_set_revocation_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKRevocationKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_revocation_key")] public static extern void TxCreationKeysSetRevocationKey(long _this_ptr, long _val);
	// struct LDKHtlcKey TxCreationKeys_get_broadcaster_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_htlc_key")] public static extern long TxCreationKeysGetBroadcasterHtlcKey(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKHtlcKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_htlc_key")] public static extern void TxCreationKeysSetBroadcasterHtlcKey(long _this_ptr, long _val);
	// struct LDKHtlcKey TxCreationKeys_get_countersignatory_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_countersignatory_htlc_key")] public static extern long TxCreationKeysGetCountersignatoryHtlcKey(long _this_ptr);
	// void TxCreationKeys_set_countersignatory_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKHtlcKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_countersignatory_htlc_key")] public static extern void TxCreationKeysSetCountersignatoryHtlcKey(long _this_ptr, long _val);
	// struct LDKDelayedPaymentKey TxCreationKeys_get_broadcaster_delayed_payment_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_delayed_payment_key")] public static extern long TxCreationKeysGetBroadcasterDelayedPaymentKey(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_delayed_payment_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKDelayedPaymentKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_delayed_payment_key")] public static extern void TxCreationKeysSetBroadcasterDelayedPaymentKey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_new(struct LDKPublicKey per_commitment_point_arg, struct LDKRevocationKey revocation_key_arg, struct LDKHtlcKey broadcaster_htlc_key_arg, struct LDKHtlcKey countersignatory_htlc_key_arg, struct LDKDelayedPaymentKey broadcaster_delayed_payment_key_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_new")] public static extern long TxCreationKeysNew(long _per_commitment_point_arg, long _revocation_key_arg, long _broadcaster_htlc_key_arg, long _countersignatory_htlc_key_arg, long _broadcaster_delayed_payment_key_arg);
	// bool TxCreationKeys_eq(const struct LDKTxCreationKeys *NONNULL_PTR a, const struct LDKTxCreationKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_eq")] public static extern bool TxCreationKeysEq(long _a, long _b);
	// uint64_t TxCreationKeys_clone_ptr(LDKTxCreationKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone_ptr")] public static extern long TxCreationKeysClonePtr(long _arg);
	// struct LDKTxCreationKeys TxCreationKeys_clone(const struct LDKTxCreationKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone")] public static extern long TxCreationKeysClone(long _orig);
	// struct LDKCVec_u8Z TxCreationKeys_write(const struct LDKTxCreationKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_write")] public static extern long TxCreationKeysWrite(long _obj);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ TxCreationKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_read")] public static extern long TxCreationKeysRead(long _ser);
	// void ChannelPublicKeys_free(struct LDKChannelPublicKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_free")] public static extern void ChannelPublicKeysFree(long _this_obj);
	// struct LDKPublicKey ChannelPublicKeys_get_funding_pubkey(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_funding_pubkey")] public static extern long ChannelPublicKeysGetFundingPubkey(long _this_ptr);
	// void ChannelPublicKeys_set_funding_pubkey(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_funding_pubkey")] public static extern void ChannelPublicKeysSetFundingPubkey(long _this_ptr, long _val);
	// struct LDKRevocationBasepoint ChannelPublicKeys_get_revocation_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_revocation_basepoint")] public static extern long ChannelPublicKeysGetRevocationBasepoint(long _this_ptr);
	// void ChannelPublicKeys_set_revocation_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKRevocationBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_revocation_basepoint")] public static extern void ChannelPublicKeysSetRevocationBasepoint(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelPublicKeys_get_payment_point(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_payment_point")] public static extern long ChannelPublicKeysGetPaymentPoint(long _this_ptr);
	// void ChannelPublicKeys_set_payment_point(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_payment_point")] public static extern void ChannelPublicKeysSetPaymentPoint(long _this_ptr, long _val);
	// struct LDKDelayedPaymentBasepoint ChannelPublicKeys_get_delayed_payment_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_delayed_payment_basepoint")] public static extern long ChannelPublicKeysGetDelayedPaymentBasepoint(long _this_ptr);
	// void ChannelPublicKeys_set_delayed_payment_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKDelayedPaymentBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_delayed_payment_basepoint")] public static extern void ChannelPublicKeysSetDelayedPaymentBasepoint(long _this_ptr, long _val);
	// struct LDKHtlcBasepoint ChannelPublicKeys_get_htlc_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_htlc_basepoint")] public static extern long ChannelPublicKeysGetHtlcBasepoint(long _this_ptr);
	// void ChannelPublicKeys_set_htlc_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKHtlcBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_htlc_basepoint")] public static extern void ChannelPublicKeysSetHtlcBasepoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelPublicKeys ChannelPublicKeys_new(struct LDKPublicKey funding_pubkey_arg, struct LDKRevocationBasepoint revocation_basepoint_arg, struct LDKPublicKey payment_point_arg, struct LDKDelayedPaymentBasepoint delayed_payment_basepoint_arg, struct LDKHtlcBasepoint htlc_basepoint_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_new")] public static extern long ChannelPublicKeysNew(long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_point_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg);
	// uint64_t ChannelPublicKeys_clone_ptr(LDKChannelPublicKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone_ptr")] public static extern long ChannelPublicKeysClonePtr(long _arg);
	// struct LDKChannelPublicKeys ChannelPublicKeys_clone(const struct LDKChannelPublicKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone")] public static extern long ChannelPublicKeysClone(long _orig);
	// uint64_t ChannelPublicKeys_hash(const struct LDKChannelPublicKeys *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_hash")] public static extern long ChannelPublicKeysHash(long _o);
	// bool ChannelPublicKeys_eq(const struct LDKChannelPublicKeys *NONNULL_PTR a, const struct LDKChannelPublicKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_eq")] public static extern bool ChannelPublicKeysEq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelPublicKeys_write(const struct LDKChannelPublicKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_write")] public static extern long ChannelPublicKeysWrite(long _obj);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ ChannelPublicKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_read")] public static extern long ChannelPublicKeysRead(long _ser);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_derive_new(struct LDKPublicKey per_commitment_point, const struct LDKDelayedPaymentBasepoint *NONNULL_PTR broadcaster_delayed_payment_base, const struct LDKHtlcBasepoint *NONNULL_PTR broadcaster_htlc_base, const struct LDKRevocationBasepoint *NONNULL_PTR countersignatory_revocation_base, const struct LDKHtlcBasepoint *NONNULL_PTR countersignatory_htlc_base);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_derive_new")] public static extern long TxCreationKeysDeriveNew(long _per_commitment_point, long _broadcaster_delayed_payment_base, long _broadcaster_htlc_base, long _countersignatory_revocation_base, long _countersignatory_htlc_base);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_from_channel_static_keys(struct LDKPublicKey per_commitment_point, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_from_channel_static_keys")] public static extern long TxCreationKeysFromChannelStaticKeys(long _per_commitment_point, long _broadcaster_keys, long _countersignatory_keys);
	// struct LDKCVec_u8Z get_revokeable_redeemscript(const struct LDKRevocationKey *NONNULL_PTR revocation_key, uint16_t contest_delay, const struct LDKDelayedPaymentKey *NONNULL_PTR broadcaster_delayed_payment_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_revokeable_redeemscript")] public static extern long GetRevokeableRedeemscript(long _revocation_key, short _contest_delay, long _broadcaster_delayed_payment_key);
	// struct LDKCVec_u8Z get_counterparty_payment_script(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, struct LDKPublicKey payment_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_counterparty_payment_script")] public static extern long GetCounterpartyPaymentScript(long _channel_type_features, long _payment_key);
	// void HTLCOutputInCommitment_free(struct LDKHTLCOutputInCommitment this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_free")] public static extern void HTLCOutputInCommitmentFree(long _this_obj);
	// bool HTLCOutputInCommitment_get_offered(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_offered")] public static extern bool HTLCOutputInCommitmentGetOffered(long _this_ptr);
	// void HTLCOutputInCommitment_set_offered(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_offered")] public static extern void HTLCOutputInCommitmentSetOffered(long _this_ptr, bool _val);
	// uint64_t HTLCOutputInCommitment_get_amount_msat(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_amount_msat")] public static extern long HTLCOutputInCommitmentGetAmountMsat(long _this_ptr);
	// void HTLCOutputInCommitment_set_amount_msat(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_amount_msat")] public static extern void HTLCOutputInCommitmentSetAmountMsat(long _this_ptr, long _val);
	// uint32_t HTLCOutputInCommitment_get_cltv_expiry(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_cltv_expiry")] public static extern int HTLCOutputInCommitmentGetCltvExpiry(long _this_ptr);
	// void HTLCOutputInCommitment_set_cltv_expiry(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_cltv_expiry")] public static extern void HTLCOutputInCommitmentSetCltvExpiry(long _this_ptr, int _val);
	// const uint8_t (*HTLCOutputInCommitment_get_payment_hash(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_payment_hash")] public static extern long HTLCOutputInCommitmentGetPaymentHash(long _this_ptr);
	// void HTLCOutputInCommitment_set_payment_hash(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_payment_hash")] public static extern void HTLCOutputInCommitmentSetPaymentHash(long _this_ptr, long _val);
	// struct LDKCOption_u32Z HTLCOutputInCommitment_get_transaction_output_index(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_transaction_output_index")] public static extern long HTLCOutputInCommitmentGetTransactionOutputIndex(long _this_ptr);
	// void HTLCOutputInCommitment_set_transaction_output_index(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_transaction_output_index")] public static extern void HTLCOutputInCommitmentSetTransactionOutputIndex(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_new(bool offered_arg, uint64_t amount_msat_arg, uint32_t cltv_expiry_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_u32Z transaction_output_index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_new")] public static extern long HTLCOutputInCommitmentNew(bool _offered_arg, long _amount_msat_arg, int _cltv_expiry_arg, long _payment_hash_arg, long _transaction_output_index_arg);
	// uint64_t HTLCOutputInCommitment_clone_ptr(LDKHTLCOutputInCommitment *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone_ptr")] public static extern long HTLCOutputInCommitmentClonePtr(long _arg);
	// struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_clone(const struct LDKHTLCOutputInCommitment *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone")] public static extern long HTLCOutputInCommitmentClone(long _orig);
	// bool HTLCOutputInCommitment_eq(const struct LDKHTLCOutputInCommitment *NONNULL_PTR a, const struct LDKHTLCOutputInCommitment *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_eq")] public static extern bool HTLCOutputInCommitmentEq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCOutputInCommitment_write(const struct LDKHTLCOutputInCommitment *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_write")] public static extern long HTLCOutputInCommitmentWrite(long _obj);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ HTLCOutputInCommitment_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_read")] public static extern long HTLCOutputInCommitmentRead(long _ser);
	// struct LDKCVec_u8Z get_htlc_redeemscript(const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, const struct LDKTxCreationKeys *NONNULL_PTR keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_htlc_redeemscript")] public static extern long GetHtlcRedeemscript(long _htlc, long _channel_type_features, long _keys);
	// struct LDKCVec_u8Z make_funding_redeemscript(struct LDKPublicKey broadcaster, struct LDKPublicKey countersignatory);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_make_funding_redeemscript")] public static extern long MakeFundingRedeemscript(long _broadcaster, long _countersignatory);
	// struct LDKTransaction build_htlc_transaction(const uint8_t (*commitment_txid)[32], uint32_t feerate_per_kw, uint16_t contest_delay, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, const struct LDKDelayedPaymentKey *NONNULL_PTR broadcaster_delayed_payment_key, const struct LDKRevocationKey *NONNULL_PTR revocation_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_transaction")] public static extern long BuildHtlcTransaction(long _commitment_txid, int _feerate_per_kw, short _contest_delay, long _htlc, long _channel_type_features, long _broadcaster_delayed_payment_key, long _revocation_key);
	// struct LDKWitness build_htlc_input_witness(struct LDKECDSASignature local_sig, struct LDKECDSASignature remote_sig, struct LDKCOption_ThirtyTwoBytesZ preimage, struct LDKu8slice redeem_script, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_input_witness")] public static extern long BuildHtlcInputWitness(long _local_sig, long _remote_sig, long _preimage, long _redeem_script, long _channel_type_features);
	// struct LDKCVec_u8Z get_to_countersignatory_with_anchors_redeemscript(struct LDKPublicKey payment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_to_countersignatory_with_anchors_redeemscript")] public static extern long GetToCountersignatoryWithAnchorsRedeemscript(long _payment_point);
	// struct LDKCVec_u8Z get_anchor_redeemscript(struct LDKPublicKey funding_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_anchor_redeemscript")] public static extern long GetAnchorRedeemscript(long _funding_pubkey);
	// struct LDKWitness build_anchor_input_witness(struct LDKPublicKey funding_key, struct LDKECDSASignature funding_sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_anchor_input_witness")] public static extern long BuildAnchorInputWitness(long _funding_key, long _funding_sig);
	// void ChannelTransactionParameters_free(struct LDKChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_free")] public static extern void ChannelTransactionParametersFree(long _this_obj);
	// struct LDKChannelPublicKeys ChannelTransactionParameters_get_holder_pubkeys(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_pubkeys")] public static extern long ChannelTransactionParametersGetHolderPubkeys(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_pubkeys(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_pubkeys")] public static extern void ChannelTransactionParametersSetHolderPubkeys(long _this_ptr, long _val);
	// uint16_t ChannelTransactionParameters_get_holder_selected_contest_delay(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_selected_contest_delay")] public static extern short ChannelTransactionParametersGetHolderSelectedContestDelay(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_selected_contest_delay(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_selected_contest_delay")] public static extern void ChannelTransactionParametersSetHolderSelectedContestDelay(long _this_ptr, short _val);
	// bool ChannelTransactionParameters_get_is_outbound_from_holder(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_is_outbound_from_holder")] public static extern bool ChannelTransactionParametersGetIsOutboundFromHolder(long _this_ptr);
	// void ChannelTransactionParameters_set_is_outbound_from_holder(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_is_outbound_from_holder")] public static extern void ChannelTransactionParametersSetIsOutboundFromHolder(long _this_ptr, bool _val);
	// struct LDKCounterpartyChannelTransactionParameters ChannelTransactionParameters_get_counterparty_parameters(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_counterparty_parameters")] public static extern long ChannelTransactionParametersGetCounterpartyParameters(long _this_ptr);
	// void ChannelTransactionParameters_set_counterparty_parameters(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKCounterpartyChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_counterparty_parameters")] public static extern void ChannelTransactionParametersSetCounterpartyParameters(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelTransactionParameters_get_funding_outpoint(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_funding_outpoint")] public static extern long ChannelTransactionParametersGetFundingOutpoint(long _this_ptr);
	// void ChannelTransactionParameters_set_funding_outpoint(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_funding_outpoint")] public static extern void ChannelTransactionParametersSetFundingOutpoint(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures ChannelTransactionParameters_get_channel_type_features(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_channel_type_features")] public static extern long ChannelTransactionParametersGetChannelTypeFeatures(long _this_ptr);
	// void ChannelTransactionParameters_set_channel_type_features(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_channel_type_features")] public static extern void ChannelTransactionParametersSetChannelTypeFeatures(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelTransactionParameters ChannelTransactionParameters_new(struct LDKChannelPublicKeys holder_pubkeys_arg, uint16_t holder_selected_contest_delay_arg, bool is_outbound_from_holder_arg, struct LDKCounterpartyChannelTransactionParameters counterparty_parameters_arg, struct LDKOutPoint funding_outpoint_arg, struct LDKChannelTypeFeatures channel_type_features_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_new")] public static extern long ChannelTransactionParametersNew(long _holder_pubkeys_arg, short _holder_selected_contest_delay_arg, bool _is_outbound_from_holder_arg, long _counterparty_parameters_arg, long _funding_outpoint_arg, long _channel_type_features_arg);
	// uint64_t ChannelTransactionParameters_clone_ptr(LDKChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone_ptr")] public static extern long ChannelTransactionParametersClonePtr(long _arg);
	// struct LDKChannelTransactionParameters ChannelTransactionParameters_clone(const struct LDKChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone")] public static extern long ChannelTransactionParametersClone(long _orig);
	// uint64_t ChannelTransactionParameters_hash(const struct LDKChannelTransactionParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_hash")] public static extern long ChannelTransactionParametersHash(long _o);
	// bool ChannelTransactionParameters_eq(const struct LDKChannelTransactionParameters *NONNULL_PTR a, const struct LDKChannelTransactionParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_eq")] public static extern bool ChannelTransactionParametersEq(long _a, long _b);
	// void CounterpartyChannelTransactionParameters_free(struct LDKCounterpartyChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_free")] public static extern void CounterpartyChannelTransactionParametersFree(long _this_obj);
	// struct LDKChannelPublicKeys CounterpartyChannelTransactionParameters_get_pubkeys(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_pubkeys")] public static extern long CounterpartyChannelTransactionParametersGetPubkeys(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_pubkeys(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_pubkeys")] public static extern void CounterpartyChannelTransactionParametersSetPubkeys(long _this_ptr, long _val);
	// uint16_t CounterpartyChannelTransactionParameters_get_selected_contest_delay(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_selected_contest_delay")] public static extern short CounterpartyChannelTransactionParametersGetSelectedContestDelay(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_selected_contest_delay(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_selected_contest_delay")] public static extern void CounterpartyChannelTransactionParametersSetSelectedContestDelay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_new(struct LDKChannelPublicKeys pubkeys_arg, uint16_t selected_contest_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_new")] public static extern long CounterpartyChannelTransactionParametersNew(long _pubkeys_arg, short _selected_contest_delay_arg);
	// uint64_t CounterpartyChannelTransactionParameters_clone_ptr(LDKCounterpartyChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone_ptr")] public static extern long CounterpartyChannelTransactionParametersClonePtr(long _arg);
	// struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_clone(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone")] public static extern long CounterpartyChannelTransactionParametersClone(long _orig);
	// uint64_t CounterpartyChannelTransactionParameters_hash(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_hash")] public static extern long CounterpartyChannelTransactionParametersHash(long _o);
	// bool CounterpartyChannelTransactionParameters_eq(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR a, const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_eq")] public static extern bool CounterpartyChannelTransactionParametersEq(long _a, long _b);
	// MUST_USE_RES bool ChannelTransactionParameters_is_populated(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_is_populated")] public static extern bool ChannelTransactionParametersIsPopulated(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_holder_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_holder_broadcastable")] public static extern long ChannelTransactionParametersAsHolderBroadcastable(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_counterparty_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_counterparty_broadcastable")] public static extern long ChannelTransactionParametersAsCounterpartyBroadcastable(long _this_arg);
	// struct LDKCVec_u8Z CounterpartyChannelTransactionParameters_write(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_write")] public static extern long CounterpartyChannelTransactionParametersWrite(long _obj);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CounterpartyChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_read")] public static extern long CounterpartyChannelTransactionParametersRead(long _ser);
	// struct LDKCVec_u8Z ChannelTransactionParameters_write(const struct LDKChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_write")] public static extern long ChannelTransactionParametersWrite(long _obj);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ ChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_read")] public static extern long ChannelTransactionParametersRead(long _ser);
	// void DirectedChannelTransactionParameters_free(struct LDKDirectedChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_free")] public static extern void DirectedChannelTransactionParametersFree(long _this_obj);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_broadcaster_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_broadcaster_pubkeys")] public static extern long DirectedChannelTransactionParametersBroadcasterPubkeys(long _this_arg);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_countersignatory_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_countersignatory_pubkeys")] public static extern long DirectedChannelTransactionParametersCountersignatoryPubkeys(long _this_arg);
	// MUST_USE_RES uint16_t DirectedChannelTransactionParameters_contest_delay(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_contest_delay")] public static extern short DirectedChannelTransactionParametersContestDelay(long _this_arg);
	// MUST_USE_RES bool DirectedChannelTransactionParameters_is_outbound(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_is_outbound")] public static extern bool DirectedChannelTransactionParametersIsOutbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint DirectedChannelTransactionParameters_funding_outpoint(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_funding_outpoint")] public static extern long DirectedChannelTransactionParametersFundingOutpoint(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures DirectedChannelTransactionParameters_channel_type_features(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_channel_type_features")] public static extern long DirectedChannelTransactionParametersChannelTypeFeatures(long _this_arg);
	// void HolderCommitmentTransaction_free(struct LDKHolderCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_free")] public static extern void HolderCommitmentTransactionFree(long _this_obj);
	// struct LDKECDSASignature HolderCommitmentTransaction_get_counterparty_sig(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_sig")] public static extern long HolderCommitmentTransactionGetCounterpartySig(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_sig(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_sig")] public static extern void HolderCommitmentTransactionSetCounterpartySig(long _this_ptr, long _val);
	// struct LDKCVec_ECDSASignatureZ HolderCommitmentTransaction_get_counterparty_htlc_sigs(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_htlc_sigs")] public static extern long HolderCommitmentTransactionGetCounterpartyHtlcSigs(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_htlc_sigs(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKCVec_ECDSASignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_htlc_sigs")] public static extern void HolderCommitmentTransactionSetCounterpartyHtlcSigs(long _this_ptr, long _val);
	// uint64_t HolderCommitmentTransaction_clone_ptr(LDKHolderCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone_ptr")] public static extern long HolderCommitmentTransactionClonePtr(long _arg);
	// struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_clone(const struct LDKHolderCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone")] public static extern long HolderCommitmentTransactionClone(long _orig);
	// struct LDKCVec_u8Z HolderCommitmentTransaction_write(const struct LDKHolderCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_write")] public static extern long HolderCommitmentTransactionWrite(long _obj);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ HolderCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_read")] public static extern long HolderCommitmentTransactionRead(long _ser);
	// MUST_USE_RES struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_new(struct LDKCommitmentTransaction commitment_tx, struct LDKECDSASignature counterparty_sig, struct LDKCVec_ECDSASignatureZ counterparty_htlc_sigs, struct LDKPublicKey holder_funding_key, struct LDKPublicKey counterparty_funding_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_new")] public static extern long HolderCommitmentTransactionNew(long _commitment_tx, long _counterparty_sig, long _counterparty_htlc_sigs, long _holder_funding_key, long _counterparty_funding_key);
	// void BuiltCommitmentTransaction_free(struct LDKBuiltCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_free")] public static extern void BuiltCommitmentTransactionFree(long _this_obj);
	// struct LDKTransaction BuiltCommitmentTransaction_get_transaction(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_transaction")] public static extern long BuiltCommitmentTransactionGetTransaction(long _this_ptr);
	// void BuiltCommitmentTransaction_set_transaction(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKTransaction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_transaction")] public static extern void BuiltCommitmentTransactionSetTransaction(long _this_ptr, long _val);
	// const uint8_t (*BuiltCommitmentTransaction_get_txid(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_txid")] public static extern long BuiltCommitmentTransactionGetTxid(long _this_ptr);
	// void BuiltCommitmentTransaction_set_txid(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_txid")] public static extern void BuiltCommitmentTransactionSetTxid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_new(struct LDKTransaction transaction_arg, struct LDKThirtyTwoBytes txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_new")] public static extern long BuiltCommitmentTransactionNew(long _transaction_arg, long _txid_arg);
	// uint64_t BuiltCommitmentTransaction_clone_ptr(LDKBuiltCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone_ptr")] public static extern long BuiltCommitmentTransactionClonePtr(long _arg);
	// struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_clone(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone")] public static extern long BuiltCommitmentTransactionClone(long _orig);
	// struct LDKCVec_u8Z BuiltCommitmentTransaction_write(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_write")] public static extern long BuiltCommitmentTransactionWrite(long _obj);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ BuiltCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_read")] public static extern long BuiltCommitmentTransactionRead(long _ser);
	// MUST_USE_RES struct LDKThirtyTwoBytes BuiltCommitmentTransaction_get_sighash_all(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_sighash_all")] public static extern long BuiltCommitmentTransactionGetSighashAll(long _this_arg, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature BuiltCommitmentTransaction_sign_counterparty_commitment(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_sign_counterparty_commitment")] public static extern long BuiltCommitmentTransactionSignCounterpartyCommitment(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature BuiltCommitmentTransaction_sign_holder_commitment(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_sign_holder_commitment")] public static extern long BuiltCommitmentTransactionSignHolderCommitment(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis, long _entropy_source);
	// void ClosingTransaction_free(struct LDKClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_free")] public static extern void ClosingTransactionFree(long _this_obj);
	// uint64_t ClosingTransaction_clone_ptr(LDKClosingTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone_ptr")] public static extern long ClosingTransactionClonePtr(long _arg);
	// struct LDKClosingTransaction ClosingTransaction_clone(const struct LDKClosingTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone")] public static extern long ClosingTransactionClone(long _orig);
	// uint64_t ClosingTransaction_hash(const struct LDKClosingTransaction *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_hash")] public static extern long ClosingTransactionHash(long _o);
	// bool ClosingTransaction_eq(const struct LDKClosingTransaction *NONNULL_PTR a, const struct LDKClosingTransaction *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_eq")] public static extern bool ClosingTransactionEq(long _a, long _b);
	// MUST_USE_RES struct LDKClosingTransaction ClosingTransaction_new(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_new")] public static extern long ClosingTransactionNew(long _to_holder_value_sat, long _to_counterparty_value_sat, long _to_holder_script, long _to_counterparty_script, long _funding_outpoint);
	// MUST_USE_RES struct LDKTrustedClosingTransaction ClosingTransaction_trust(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_trust")] public static extern long ClosingTransactionTrust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedClosingTransactionNoneZ ClosingTransaction_verify(const struct LDKClosingTransaction *NONNULL_PTR this_arg, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_verify")] public static extern long ClosingTransactionVerify(long _this_arg, long _funding_outpoint);
	// MUST_USE_RES uint64_t ClosingTransaction_to_holder_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_value_sat")] public static extern long ClosingTransactionToHolderValueSat(long _this_arg);
	// MUST_USE_RES uint64_t ClosingTransaction_to_counterparty_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_value_sat")] public static extern long ClosingTransactionToCounterpartyValueSat(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_holder_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_script")] public static extern long ClosingTransactionToHolderScript(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_counterparty_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_script")] public static extern long ClosingTransactionToCounterpartyScript(long _this_arg);
	// void TrustedClosingTransaction_free(struct LDKTrustedClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_free")] public static extern void TrustedClosingTransactionFree(long _this_obj);
	// MUST_USE_RES struct LDKTransaction TrustedClosingTransaction_built_transaction(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_built_transaction")] public static extern long TrustedClosingTransactionBuiltTransaction(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedClosingTransaction_get_sighash_all(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_get_sighash_all")] public static extern long TrustedClosingTransactionGetSighashAll(long _this_arg, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature TrustedClosingTransaction_sign(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_sign")] public static extern long TrustedClosingTransactionSign(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis);
	// void CommitmentTransaction_free(struct LDKCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_free")] public static extern void CommitmentTransactionFree(long _this_obj);
	// uint64_t CommitmentTransaction_clone_ptr(LDKCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone_ptr")] public static extern long CommitmentTransactionClonePtr(long _arg);
	// struct LDKCommitmentTransaction CommitmentTransaction_clone(const struct LDKCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone")] public static extern long CommitmentTransactionClone(long _orig);
	// struct LDKCVec_u8Z CommitmentTransaction_write(const struct LDKCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_write")] public static extern long CommitmentTransactionWrite(long _obj);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_read")] public static extern long CommitmentTransactionRead(long _ser);
	// MUST_USE_RES uint64_t CommitmentTransaction_commitment_number(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_commitment_number")] public static extern long CommitmentTransactionCommitmentNumber(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey CommitmentTransaction_per_commitment_point(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_per_commitment_point")] public static extern long CommitmentTransactionPerCommitmentPoint(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_broadcaster_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_broadcaster_value_sat")] public static extern long CommitmentTransactionToBroadcasterValueSat(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_countersignatory_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_countersignatory_value_sat")] public static extern long CommitmentTransactionToCountersignatoryValueSat(long _this_arg);
	// MUST_USE_RES uint32_t CommitmentTransaction_feerate_per_kw(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_feerate_per_kw")] public static extern int CommitmentTransactionFeeratePerKw(long _this_arg);
	// MUST_USE_RES struct LDKTrustedCommitmentTransaction CommitmentTransaction_trust(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_trust")] public static extern long CommitmentTransactionTrust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedCommitmentTransactionNoneZ CommitmentTransaction_verify(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg, const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_verify")] public static extern long CommitmentTransactionVerify(long _this_arg, long _channel_parameters, long _broadcaster_keys, long _countersignatory_keys);
	// void TrustedCommitmentTransaction_free(struct LDKTrustedCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_free")] public static extern void TrustedCommitmentTransactionFree(long _this_obj);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedCommitmentTransaction_txid(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_txid")] public static extern long TrustedCommitmentTransactionTxid(long _this_arg);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction TrustedCommitmentTransaction_built_transaction(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_built_transaction")] public static extern long TrustedCommitmentTransactionBuiltTransaction(long _this_arg);
	// MUST_USE_RES struct LDKTxCreationKeys TrustedCommitmentTransaction_keys(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_keys")] public static extern long TrustedCommitmentTransactionKeys(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures TrustedCommitmentTransaction_channel_type_features(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_channel_type_features")] public static extern long TrustedCommitmentTransactionChannelTypeFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_ECDSASignatureZNoneZ TrustedCommitmentTransaction_get_htlc_sigs(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*htlc_base_key)[32], const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_get_htlc_sigs")] public static extern long TrustedCommitmentTransactionGetHtlcSigs(long _this_arg, long _htlc_base_key, long _channel_parameters, long _entropy_source);
	// MUST_USE_RES struct LDKCOption_usizeZ TrustedCommitmentTransaction_revokeable_output_index(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_revokeable_output_index")] public static extern long TrustedCommitmentTransactionRevokeableOutputIndex(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ TrustedCommitmentTransaction_build_to_local_justice_tx(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg, uint64_t feerate_per_kw, struct LDKCVec_u8Z destination_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_build_to_local_justice_tx")] public static extern long TrustedCommitmentTransactionBuildToLocalJusticeTx(long _this_arg, long _feerate_per_kw, long _destination_script);
	// uint64_t get_commitment_transaction_number_obscure_factor(struct LDKPublicKey broadcaster_payment_basepoint, struct LDKPublicKey countersignatory_payment_basepoint, bool outbound_from_broadcaster);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_commitment_transaction_number_obscure_factor")] public static extern long GetCommitmentTransactionNumberObscureFactor(long _broadcaster_payment_basepoint, long _countersignatory_payment_basepoint, bool _outbound_from_broadcaster);
	// bool InitFeatures_eq(const struct LDKInitFeatures *NONNULL_PTR a, const struct LDKInitFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_eq")] public static extern bool InitFeaturesEq(long _a, long _b);
	// bool NodeFeatures_eq(const struct LDKNodeFeatures *NONNULL_PTR a, const struct LDKNodeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_eq")] public static extern bool NodeFeaturesEq(long _a, long _b);
	// bool ChannelFeatures_eq(const struct LDKChannelFeatures *NONNULL_PTR a, const struct LDKChannelFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_eq")] public static extern bool ChannelFeaturesEq(long _a, long _b);
	// bool Bolt11InvoiceFeatures_eq(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR a, const struct LDKBolt11InvoiceFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_eq")] public static extern bool Bolt11InvoiceFeaturesEq(long _a, long _b);
	// bool OfferFeatures_eq(const struct LDKOfferFeatures *NONNULL_PTR a, const struct LDKOfferFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_eq")] public static extern bool OfferFeaturesEq(long _a, long _b);
	// bool InvoiceRequestFeatures_eq(const struct LDKInvoiceRequestFeatures *NONNULL_PTR a, const struct LDKInvoiceRequestFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_eq")] public static extern bool InvoiceRequestFeaturesEq(long _a, long _b);
	// bool Bolt12InvoiceFeatures_eq(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR a, const struct LDKBolt12InvoiceFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_eq")] public static extern bool Bolt12InvoiceFeaturesEq(long _a, long _b);
	// bool BlindedHopFeatures_eq(const struct LDKBlindedHopFeatures *NONNULL_PTR a, const struct LDKBlindedHopFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_eq")] public static extern bool BlindedHopFeaturesEq(long _a, long _b);
	// bool ChannelTypeFeatures_eq(const struct LDKChannelTypeFeatures *NONNULL_PTR a, const struct LDKChannelTypeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_eq")] public static extern bool ChannelTypeFeaturesEq(long _a, long _b);
	// uint64_t InitFeatures_clone_ptr(LDKInitFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone_ptr")] public static extern long InitFeaturesClonePtr(long _arg);
	// struct LDKInitFeatures InitFeatures_clone(const struct LDKInitFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone")] public static extern long InitFeaturesClone(long _orig);
	// uint64_t NodeFeatures_clone_ptr(LDKNodeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone_ptr")] public static extern long NodeFeaturesClonePtr(long _arg);
	// struct LDKNodeFeatures NodeFeatures_clone(const struct LDKNodeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone")] public static extern long NodeFeaturesClone(long _orig);
	// uint64_t ChannelFeatures_clone_ptr(LDKChannelFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone_ptr")] public static extern long ChannelFeaturesClonePtr(long _arg);
	// struct LDKChannelFeatures ChannelFeatures_clone(const struct LDKChannelFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone")] public static extern long ChannelFeaturesClone(long _orig);
	// uint64_t Bolt11InvoiceFeatures_clone_ptr(LDKBolt11InvoiceFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_clone_ptr")] public static extern long Bolt11InvoiceFeaturesClonePtr(long _arg);
	// struct LDKBolt11InvoiceFeatures Bolt11InvoiceFeatures_clone(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_clone")] public static extern long Bolt11InvoiceFeaturesClone(long _orig);
	// uint64_t OfferFeatures_clone_ptr(LDKOfferFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone_ptr")] public static extern long OfferFeaturesClonePtr(long _arg);
	// struct LDKOfferFeatures OfferFeatures_clone(const struct LDKOfferFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone")] public static extern long OfferFeaturesClone(long _orig);
	// uint64_t InvoiceRequestFeatures_clone_ptr(LDKInvoiceRequestFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone_ptr")] public static extern long InvoiceRequestFeaturesClonePtr(long _arg);
	// struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_clone(const struct LDKInvoiceRequestFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone")] public static extern long InvoiceRequestFeaturesClone(long _orig);
	// uint64_t Bolt12InvoiceFeatures_clone_ptr(LDKBolt12InvoiceFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_clone_ptr")] public static extern long Bolt12InvoiceFeaturesClonePtr(long _arg);
	// struct LDKBolt12InvoiceFeatures Bolt12InvoiceFeatures_clone(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_clone")] public static extern long Bolt12InvoiceFeaturesClone(long _orig);
	// uint64_t BlindedHopFeatures_clone_ptr(LDKBlindedHopFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_clone_ptr")] public static extern long BlindedHopFeaturesClonePtr(long _arg);
	// struct LDKBlindedHopFeatures BlindedHopFeatures_clone(const struct LDKBlindedHopFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_clone")] public static extern long BlindedHopFeaturesClone(long _orig);
	// uint64_t ChannelTypeFeatures_clone_ptr(LDKChannelTypeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone_ptr")] public static extern long ChannelTypeFeaturesClonePtr(long _arg);
	// struct LDKChannelTypeFeatures ChannelTypeFeatures_clone(const struct LDKChannelTypeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone")] public static extern long ChannelTypeFeaturesClone(long _orig);
	// uint64_t InitFeatures_hash(const struct LDKInitFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_hash")] public static extern long InitFeaturesHash(long _o);
	// uint64_t NodeFeatures_hash(const struct LDKNodeFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_hash")] public static extern long NodeFeaturesHash(long _o);
	// uint64_t ChannelFeatures_hash(const struct LDKChannelFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_hash")] public static extern long ChannelFeaturesHash(long _o);
	// uint64_t Bolt11InvoiceFeatures_hash(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_hash")] public static extern long Bolt11InvoiceFeaturesHash(long _o);
	// uint64_t OfferFeatures_hash(const struct LDKOfferFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_hash")] public static extern long OfferFeaturesHash(long _o);
	// uint64_t InvoiceRequestFeatures_hash(const struct LDKInvoiceRequestFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_hash")] public static extern long InvoiceRequestFeaturesHash(long _o);
	// uint64_t Bolt12InvoiceFeatures_hash(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_hash")] public static extern long Bolt12InvoiceFeaturesHash(long _o);
	// uint64_t BlindedHopFeatures_hash(const struct LDKBlindedHopFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_hash")] public static extern long BlindedHopFeaturesHash(long _o);
	// uint64_t ChannelTypeFeatures_hash(const struct LDKChannelTypeFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_hash")] public static extern long ChannelTypeFeaturesHash(long _o);
	// void InitFeatures_free(struct LDKInitFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_free")] public static extern void InitFeaturesFree(long _this_obj);
	// void NodeFeatures_free(struct LDKNodeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_free")] public static extern void NodeFeaturesFree(long _this_obj);
	// void ChannelFeatures_free(struct LDKChannelFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_free")] public static extern void ChannelFeaturesFree(long _this_obj);
	// void Bolt11InvoiceFeatures_free(struct LDKBolt11InvoiceFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_free")] public static extern void Bolt11InvoiceFeaturesFree(long _this_obj);
	// void OfferFeatures_free(struct LDKOfferFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_free")] public static extern void OfferFeaturesFree(long _this_obj);
	// void InvoiceRequestFeatures_free(struct LDKInvoiceRequestFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_free")] public static extern void InvoiceRequestFeaturesFree(long _this_obj);
	// void Bolt12InvoiceFeatures_free(struct LDKBolt12InvoiceFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_free")] public static extern void Bolt12InvoiceFeaturesFree(long _this_obj);
	// void BlindedHopFeatures_free(struct LDKBlindedHopFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_free")] public static extern void BlindedHopFeaturesFree(long _this_obj);
	// void ChannelTypeFeatures_free(struct LDKChannelTypeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_free")] public static extern void ChannelTypeFeaturesFree(long _this_obj);
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_empty")] public static extern long InitFeaturesEmpty();
	// MUST_USE_RES bool InitFeatures_requires_unknown_bits_from(const struct LDKInitFeatures *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_unknown_bits_from")] public static extern bool InitFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool InitFeatures_requires_unknown_bits(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_unknown_bits")] public static extern bool InitFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_required_feature_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_required_feature_bit")] public static extern long InitFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_optional_feature_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_optional_feature_bit")] public static extern long InitFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_required_custom_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_required_custom_bit")] public static extern long InitFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_optional_custom_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_optional_custom_bit")] public static extern long InitFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_empty")] public static extern long NodeFeaturesEmpty();
	// MUST_USE_RES bool NodeFeatures_requires_unknown_bits_from(const struct LDKNodeFeatures *NONNULL_PTR this_arg, const struct LDKNodeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_unknown_bits_from")] public static extern bool NodeFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool NodeFeatures_requires_unknown_bits(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_unknown_bits")] public static extern bool NodeFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_required_feature_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_required_feature_bit")] public static extern long NodeFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_optional_feature_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_optional_feature_bit")] public static extern long NodeFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_required_custom_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_required_custom_bit")] public static extern long NodeFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_optional_custom_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_optional_custom_bit")] public static extern long NodeFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKChannelFeatures ChannelFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_empty")] public static extern long ChannelFeaturesEmpty();
	// MUST_USE_RES bool ChannelFeatures_requires_unknown_bits_from(const struct LDKChannelFeatures *NONNULL_PTR this_arg, const struct LDKChannelFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_requires_unknown_bits_from")] public static extern bool ChannelFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool ChannelFeatures_requires_unknown_bits(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_requires_unknown_bits")] public static extern bool ChannelFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_required_feature_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_required_feature_bit")] public static extern long ChannelFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_optional_feature_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_optional_feature_bit")] public static extern long ChannelFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_required_custom_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_required_custom_bit")] public static extern long ChannelFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_optional_custom_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_optional_custom_bit")] public static extern long ChannelFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures Bolt11InvoiceFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_empty")] public static extern long Bolt11InvoiceFeaturesEmpty();
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_unknown_bits_from(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt11InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_unknown_bits_from")] public static extern bool Bolt11InvoiceFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_unknown_bits(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_unknown_bits")] public static extern bool Bolt11InvoiceFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_required_feature_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_required_feature_bit")] public static extern long Bolt11InvoiceFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_optional_feature_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_optional_feature_bit")] public static extern long Bolt11InvoiceFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_required_custom_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_required_custom_bit")] public static extern long Bolt11InvoiceFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_optional_custom_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_optional_custom_bit")] public static extern long Bolt11InvoiceFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKOfferFeatures OfferFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_empty")] public static extern long OfferFeaturesEmpty();
	// MUST_USE_RES bool OfferFeatures_requires_unknown_bits_from(const struct LDKOfferFeatures *NONNULL_PTR this_arg, const struct LDKOfferFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_requires_unknown_bits_from")] public static extern bool OfferFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool OfferFeatures_requires_unknown_bits(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_requires_unknown_bits")] public static extern bool OfferFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_required_feature_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_required_feature_bit")] public static extern long OfferFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_optional_feature_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_optional_feature_bit")] public static extern long OfferFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_required_custom_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_required_custom_bit")] public static extern long OfferFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_optional_custom_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_optional_custom_bit")] public static extern long OfferFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_empty")] public static extern long InvoiceRequestFeaturesEmpty();
	// MUST_USE_RES bool InvoiceRequestFeatures_requires_unknown_bits_from(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, const struct LDKInvoiceRequestFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_requires_unknown_bits_from")] public static extern bool InvoiceRequestFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool InvoiceRequestFeatures_requires_unknown_bits(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_requires_unknown_bits")] public static extern bool InvoiceRequestFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_required_feature_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_required_feature_bit")] public static extern long InvoiceRequestFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_optional_feature_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_optional_feature_bit")] public static extern long InvoiceRequestFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_required_custom_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_required_custom_bit")] public static extern long InvoiceRequestFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_optional_custom_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_optional_custom_bit")] public static extern long InvoiceRequestFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures Bolt12InvoiceFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_empty")] public static extern long Bolt12InvoiceFeaturesEmpty();
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_unknown_bits_from(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt12InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_unknown_bits_from")] public static extern bool Bolt12InvoiceFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_unknown_bits(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_unknown_bits")] public static extern bool Bolt12InvoiceFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_required_feature_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_required_feature_bit")] public static extern long Bolt12InvoiceFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_optional_feature_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_optional_feature_bit")] public static extern long Bolt12InvoiceFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_required_custom_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_required_custom_bit")] public static extern long Bolt12InvoiceFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_optional_custom_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_optional_custom_bit")] public static extern long Bolt12InvoiceFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBlindedHopFeatures BlindedHopFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_empty")] public static extern long BlindedHopFeaturesEmpty();
	// MUST_USE_RES bool BlindedHopFeatures_requires_unknown_bits_from(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, const struct LDKBlindedHopFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_requires_unknown_bits_from")] public static extern bool BlindedHopFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool BlindedHopFeatures_requires_unknown_bits(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_requires_unknown_bits")] public static extern bool BlindedHopFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_required_feature_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_required_feature_bit")] public static extern long BlindedHopFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_optional_feature_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_optional_feature_bit")] public static extern long BlindedHopFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_required_custom_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_required_custom_bit")] public static extern long BlindedHopFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_optional_custom_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_optional_custom_bit")] public static extern long BlindedHopFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelTypeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_empty")] public static extern long ChannelTypeFeaturesEmpty();
	// MUST_USE_RES bool ChannelTypeFeatures_requires_unknown_bits_from(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, const struct LDKChannelTypeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_unknown_bits_from")] public static extern bool ChannelTypeFeaturesRequiresUnknownBitsFrom(long _this_arg, long _other);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_unknown_bits(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_unknown_bits")] public static extern bool ChannelTypeFeaturesRequiresUnknownBits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_required_feature_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_required_feature_bit")] public static extern long ChannelTypeFeaturesSetRequiredFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_optional_feature_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_optional_feature_bit")] public static extern long ChannelTypeFeaturesSetOptionalFeatureBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_required_custom_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_required_custom_bit")] public static extern long ChannelTypeFeaturesSetRequiredCustomBit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_optional_custom_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_optional_custom_bit")] public static extern long ChannelTypeFeaturesSetOptionalCustomBit(long _this_arg, long _bit);
	// struct LDKCVec_u8Z InitFeatures_write(const struct LDKInitFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_write")] public static extern long InitFeaturesWrite(long _obj);
	// struct LDKCResult_InitFeaturesDecodeErrorZ InitFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_read")] public static extern long InitFeaturesRead(long _ser);
	// struct LDKCVec_u8Z ChannelFeatures_write(const struct LDKChannelFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_write")] public static extern long ChannelFeaturesWrite(long _obj);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ ChannelFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_read")] public static extern long ChannelFeaturesRead(long _ser);
	// struct LDKCVec_u8Z NodeFeatures_write(const struct LDKNodeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_write")] public static extern long NodeFeaturesWrite(long _obj);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ NodeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_read")] public static extern long NodeFeaturesRead(long _ser);
	// struct LDKCVec_u8Z Bolt11InvoiceFeatures_write(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_write")] public static extern long Bolt11InvoiceFeaturesWrite(long _obj);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ Bolt11InvoiceFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_read")] public static extern long Bolt11InvoiceFeaturesRead(long _ser);
	// struct LDKCVec_u8Z Bolt12InvoiceFeatures_write(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_write")] public static extern long Bolt12InvoiceFeaturesWrite(long _obj);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ Bolt12InvoiceFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_read")] public static extern long Bolt12InvoiceFeaturesRead(long _ser);
	// struct LDKCVec_u8Z BlindedHopFeatures_write(const struct LDKBlindedHopFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_write")] public static extern long BlindedHopFeaturesWrite(long _obj);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ BlindedHopFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_read")] public static extern long BlindedHopFeaturesRead(long _ser);
	// struct LDKCVec_u8Z ChannelTypeFeatures_write(const struct LDKChannelTypeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_write")] public static extern long ChannelTypeFeaturesWrite(long _obj);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ ChannelTypeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_read")] public static extern long ChannelTypeFeaturesRead(long _ser);
	// void InitFeatures_set_data_loss_protect_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_optional")] public static extern void InitFeaturesSetDataLossProtectOptional(long _this_arg);
	// void InitFeatures_set_data_loss_protect_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_required")] public static extern void InitFeaturesSetDataLossProtectRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_data_loss_protect")] public static extern bool InitFeaturesSupportsDataLossProtect(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_optional")] public static extern void NodeFeaturesSetDataLossProtectOptional(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_required")] public static extern void NodeFeaturesSetDataLossProtectRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_data_loss_protect")] public static extern bool NodeFeaturesSupportsDataLossProtect(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_data_loss_protect")] public static extern bool InitFeaturesRequiresDataLossProtect(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_data_loss_protect")] public static extern bool NodeFeaturesRequiresDataLossProtect(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_optional")] public static extern void InitFeaturesSetInitialRoutingSyncOptional(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_required")] public static extern void InitFeaturesSetInitialRoutingSyncRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_initial_routing_sync(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_initial_routing_sync")] public static extern bool InitFeaturesInitialRoutingSync(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_optional")] public static extern void InitFeaturesSetUpfrontShutdownScriptOptional(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_required")] public static extern void InitFeaturesSetUpfrontShutdownScriptRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_upfront_shutdown_script")] public static extern bool InitFeaturesSupportsUpfrontShutdownScript(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_optional")] public static extern void NodeFeaturesSetUpfrontShutdownScriptOptional(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_required")] public static extern void NodeFeaturesSetUpfrontShutdownScriptRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_upfront_shutdown_script")] public static extern bool NodeFeaturesSupportsUpfrontShutdownScript(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_upfront_shutdown_script")] public static extern bool InitFeaturesRequiresUpfrontShutdownScript(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_upfront_shutdown_script")] public static extern bool NodeFeaturesRequiresUpfrontShutdownScript(long _this_arg);
	// void InitFeatures_set_gossip_queries_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_optional")] public static extern void InitFeaturesSetGossipQueriesOptional(long _this_arg);
	// void InitFeatures_set_gossip_queries_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_required")] public static extern void InitFeaturesSetGossipQueriesRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_gossip_queries")] public static extern bool InitFeaturesSupportsGossipQueries(long _this_arg);
	// void NodeFeatures_set_gossip_queries_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_optional")] public static extern void NodeFeaturesSetGossipQueriesOptional(long _this_arg);
	// void NodeFeatures_set_gossip_queries_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_required")] public static extern void NodeFeaturesSetGossipQueriesRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_gossip_queries")] public static extern bool NodeFeaturesSupportsGossipQueries(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_gossip_queries")] public static extern bool InitFeaturesRequiresGossipQueries(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_gossip_queries")] public static extern bool NodeFeaturesRequiresGossipQueries(long _this_arg);
	// void InitFeatures_set_variable_length_onion_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_optional")] public static extern void InitFeaturesSetVariableLengthOnionOptional(long _this_arg);
	// void InitFeatures_set_variable_length_onion_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_required")] public static extern void InitFeaturesSetVariableLengthOnionRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_variable_length_onion")] public static extern bool InitFeaturesSupportsVariableLengthOnion(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_optional")] public static extern void NodeFeaturesSetVariableLengthOnionOptional(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_required")] public static extern void NodeFeaturesSetVariableLengthOnionRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_variable_length_onion")] public static extern bool NodeFeaturesSupportsVariableLengthOnion(long _this_arg);
	// void Bolt11InvoiceFeatures_set_variable_length_onion_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_variable_length_onion_optional")] public static extern void Bolt11InvoiceFeaturesSetVariableLengthOnionOptional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_variable_length_onion_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_variable_length_onion_required")] public static extern void Bolt11InvoiceFeaturesSetVariableLengthOnionRequired(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_variable_length_onion(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_variable_length_onion")] public static extern bool Bolt11InvoiceFeaturesSupportsVariableLengthOnion(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_variable_length_onion")] public static extern bool InitFeaturesRequiresVariableLengthOnion(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_variable_length_onion")] public static extern bool NodeFeaturesRequiresVariableLengthOnion(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_variable_length_onion(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_variable_length_onion")] public static extern bool Bolt11InvoiceFeaturesRequiresVariableLengthOnion(long _this_arg);
	// void InitFeatures_set_static_remote_key_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_optional")] public static extern void InitFeaturesSetStaticRemoteKeyOptional(long _this_arg);
	// void InitFeatures_set_static_remote_key_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_required")] public static extern void InitFeaturesSetStaticRemoteKeyRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_static_remote_key")] public static extern bool InitFeaturesSupportsStaticRemoteKey(long _this_arg);
	// void NodeFeatures_set_static_remote_key_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_optional")] public static extern void NodeFeaturesSetStaticRemoteKeyOptional(long _this_arg);
	// void NodeFeatures_set_static_remote_key_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_required")] public static extern void NodeFeaturesSetStaticRemoteKeyRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_static_remote_key")] public static extern bool NodeFeaturesSupportsStaticRemoteKey(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_optional")] public static extern void ChannelTypeFeaturesSetStaticRemoteKeyOptional(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_required")] public static extern void ChannelTypeFeaturesSetStaticRemoteKeyRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_static_remote_key")] public static extern bool ChannelTypeFeaturesSupportsStaticRemoteKey(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_static_remote_key")] public static extern bool InitFeaturesRequiresStaticRemoteKey(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_static_remote_key")] public static extern bool NodeFeaturesRequiresStaticRemoteKey(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_static_remote_key")] public static extern bool ChannelTypeFeaturesRequiresStaticRemoteKey(long _this_arg);
	// void InitFeatures_set_payment_secret_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_optional")] public static extern void InitFeaturesSetPaymentSecretOptional(long _this_arg);
	// void InitFeatures_set_payment_secret_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_required")] public static extern void InitFeaturesSetPaymentSecretRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_payment_secret")] public static extern bool InitFeaturesSupportsPaymentSecret(long _this_arg);
	// void NodeFeatures_set_payment_secret_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_optional")] public static extern void NodeFeaturesSetPaymentSecretOptional(long _this_arg);
	// void NodeFeatures_set_payment_secret_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_required")] public static extern void NodeFeaturesSetPaymentSecretRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_payment_secret")] public static extern bool NodeFeaturesSupportsPaymentSecret(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_secret_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_secret_optional")] public static extern void Bolt11InvoiceFeaturesSetPaymentSecretOptional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_secret_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_secret_required")] public static extern void Bolt11InvoiceFeaturesSetPaymentSecretRequired(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_payment_secret(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_payment_secret")] public static extern bool Bolt11InvoiceFeaturesSupportsPaymentSecret(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_payment_secret")] public static extern bool InitFeaturesRequiresPaymentSecret(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_payment_secret")] public static extern bool NodeFeaturesRequiresPaymentSecret(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_payment_secret(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_payment_secret")] public static extern bool Bolt11InvoiceFeaturesRequiresPaymentSecret(long _this_arg);
	// void InitFeatures_set_basic_mpp_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_optional")] public static extern void InitFeaturesSetBasicMppOptional(long _this_arg);
	// void InitFeatures_set_basic_mpp_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_required")] public static extern void InitFeaturesSetBasicMppRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_basic_mpp")] public static extern bool InitFeaturesSupportsBasicMpp(long _this_arg);
	// void NodeFeatures_set_basic_mpp_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_optional")] public static extern void NodeFeaturesSetBasicMppOptional(long _this_arg);
	// void NodeFeatures_set_basic_mpp_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_required")] public static extern void NodeFeaturesSetBasicMppRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_basic_mpp")] public static extern bool NodeFeaturesSupportsBasicMpp(long _this_arg);
	// void Bolt11InvoiceFeatures_set_basic_mpp_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_basic_mpp_optional")] public static extern void Bolt11InvoiceFeaturesSetBasicMppOptional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_basic_mpp_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_basic_mpp_required")] public static extern void Bolt11InvoiceFeaturesSetBasicMppRequired(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_basic_mpp(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_basic_mpp")] public static extern bool Bolt11InvoiceFeaturesSupportsBasicMpp(long _this_arg);
	// void Bolt12InvoiceFeatures_set_basic_mpp_optional(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_basic_mpp_optional")] public static extern void Bolt12InvoiceFeaturesSetBasicMppOptional(long _this_arg);
	// void Bolt12InvoiceFeatures_set_basic_mpp_required(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_basic_mpp_required")] public static extern void Bolt12InvoiceFeaturesSetBasicMppRequired(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_supports_basic_mpp(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_supports_basic_mpp")] public static extern bool Bolt12InvoiceFeaturesSupportsBasicMpp(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_basic_mpp")] public static extern bool InitFeaturesRequiresBasicMpp(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_basic_mpp")] public static extern bool NodeFeaturesRequiresBasicMpp(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_basic_mpp(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_basic_mpp")] public static extern bool Bolt11InvoiceFeaturesRequiresBasicMpp(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_basic_mpp(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_basic_mpp")] public static extern bool Bolt12InvoiceFeaturesRequiresBasicMpp(long _this_arg);
	// void InitFeatures_set_wumbo_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_optional")] public static extern void InitFeaturesSetWumboOptional(long _this_arg);
	// void InitFeatures_set_wumbo_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_required")] public static extern void InitFeaturesSetWumboRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_wumbo")] public static extern bool InitFeaturesSupportsWumbo(long _this_arg);
	// void NodeFeatures_set_wumbo_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_optional")] public static extern void NodeFeaturesSetWumboOptional(long _this_arg);
	// void NodeFeatures_set_wumbo_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_required")] public static extern void NodeFeaturesSetWumboRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_wumbo")] public static extern bool NodeFeaturesSupportsWumbo(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_wumbo")] public static extern bool InitFeaturesRequiresWumbo(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_wumbo")] public static extern bool NodeFeaturesRequiresWumbo(long _this_arg);
	// void InitFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void InitFeaturesSetAnchorsNonzeroFeeHtlcTxOptional(long _this_arg);
	// void InitFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void InitFeaturesSetAnchorsNonzeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool InitFeaturesSupportsAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void NodeFeaturesSetAnchorsNonzeroFeeHtlcTxOptional(long _this_arg);
	// void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void NodeFeaturesSetAnchorsNonzeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool NodeFeaturesSupportsAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void ChannelTypeFeaturesSetAnchorsNonzeroFeeHtlcTxOptional(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void ChannelTypeFeaturesSetAnchorsNonzeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool ChannelTypeFeaturesSupportsAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool InitFeaturesRequiresAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool NodeFeaturesRequiresAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool ChannelTypeFeaturesRequiresAnchorsNonzeroFeeHtlcTx(long _this_arg);
	// void InitFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void InitFeaturesSetAnchorsZeroFeeHtlcTxOptional(long _this_arg);
	// void InitFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void InitFeaturesSetAnchorsZeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool InitFeaturesSupportsAnchorsZeroFeeHtlcTx(long _this_arg);
	// void NodeFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void NodeFeaturesSetAnchorsZeroFeeHtlcTxOptional(long _this_arg);
	// void NodeFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void NodeFeaturesSetAnchorsZeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool NodeFeaturesSupportsAnchorsZeroFeeHtlcTx(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void ChannelTypeFeaturesSetAnchorsZeroFeeHtlcTxOptional(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void ChannelTypeFeaturesSetAnchorsZeroFeeHtlcTxRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool ChannelTypeFeaturesSupportsAnchorsZeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool InitFeaturesRequiresAnchorsZeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool NodeFeaturesRequiresAnchorsZeroFeeHtlcTx(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool ChannelTypeFeaturesRequiresAnchorsZeroFeeHtlcTx(long _this_arg);
	// void InitFeatures_set_route_blinding_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_route_blinding_optional")] public static extern void InitFeaturesSetRouteBlindingOptional(long _this_arg);
	// void InitFeatures_set_route_blinding_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_route_blinding_required")] public static extern void InitFeaturesSetRouteBlindingRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_route_blinding(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_route_blinding")] public static extern bool InitFeaturesSupportsRouteBlinding(long _this_arg);
	// void NodeFeatures_set_route_blinding_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_route_blinding_optional")] public static extern void NodeFeaturesSetRouteBlindingOptional(long _this_arg);
	// void NodeFeatures_set_route_blinding_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_route_blinding_required")] public static extern void NodeFeaturesSetRouteBlindingRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_route_blinding(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_route_blinding")] public static extern bool NodeFeaturesSupportsRouteBlinding(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_route_blinding(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_route_blinding")] public static extern bool InitFeaturesRequiresRouteBlinding(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_route_blinding(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_route_blinding")] public static extern bool NodeFeaturesRequiresRouteBlinding(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_optional")] public static extern void InitFeaturesSetShutdownAnySegwitOptional(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_required")] public static extern void InitFeaturesSetShutdownAnySegwitRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_shutdown_anysegwit")] public static extern bool InitFeaturesSupportsShutdownAnysegwit(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_optional")] public static extern void NodeFeaturesSetShutdownAnySegwitOptional(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_required")] public static extern void NodeFeaturesSetShutdownAnySegwitRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_shutdown_anysegwit")] public static extern bool NodeFeaturesSupportsShutdownAnysegwit(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_shutdown_anysegwit")] public static extern bool InitFeaturesRequiresShutdownAnysegwit(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_shutdown_anysegwit")] public static extern bool NodeFeaturesRequiresShutdownAnysegwit(long _this_arg);
	// void InitFeatures_set_taproot_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_taproot_optional")] public static extern void InitFeaturesSetTaprootOptional(long _this_arg);
	// void InitFeatures_set_taproot_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_taproot_required")] public static extern void InitFeaturesSetTaprootRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_taproot(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_taproot")] public static extern bool InitFeaturesSupportsTaproot(long _this_arg);
	// void NodeFeatures_set_taproot_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_taproot_optional")] public static extern void NodeFeaturesSetTaprootOptional(long _this_arg);
	// void NodeFeatures_set_taproot_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_taproot_required")] public static extern void NodeFeaturesSetTaprootRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_taproot(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_taproot")] public static extern bool NodeFeaturesSupportsTaproot(long _this_arg);
	// void ChannelTypeFeatures_set_taproot_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_taproot_optional")] public static extern void ChannelTypeFeaturesSetTaprootOptional(long _this_arg);
	// void ChannelTypeFeatures_set_taproot_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_taproot_required")] public static extern void ChannelTypeFeaturesSetTaprootRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_taproot(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_taproot")] public static extern bool ChannelTypeFeaturesSupportsTaproot(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_taproot(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_taproot")] public static extern bool InitFeaturesRequiresTaproot(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_taproot(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_taproot")] public static extern bool NodeFeaturesRequiresTaproot(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_taproot(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_taproot")] public static extern bool ChannelTypeFeaturesRequiresTaproot(long _this_arg);
	// void InitFeatures_set_onion_messages_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_optional")] public static extern void InitFeaturesSetOnionMessagesOptional(long _this_arg);
	// void InitFeatures_set_onion_messages_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_required")] public static extern void InitFeaturesSetOnionMessagesRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_onion_messages")] public static extern bool InitFeaturesSupportsOnionMessages(long _this_arg);
	// void NodeFeatures_set_onion_messages_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_optional")] public static extern void NodeFeaturesSetOnionMessagesOptional(long _this_arg);
	// void NodeFeatures_set_onion_messages_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_required")] public static extern void NodeFeaturesSetOnionMessagesRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_onion_messages")] public static extern bool NodeFeaturesSupportsOnionMessages(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_onion_messages")] public static extern bool InitFeaturesRequiresOnionMessages(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_onion_messages")] public static extern bool NodeFeaturesRequiresOnionMessages(long _this_arg);
	// void InitFeatures_set_channel_type_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_optional")] public static extern void InitFeaturesSetChannelTypeOptional(long _this_arg);
	// void InitFeatures_set_channel_type_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_required")] public static extern void InitFeaturesSetChannelTypeRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_channel_type")] public static extern bool InitFeaturesSupportsChannelType(long _this_arg);
	// void NodeFeatures_set_channel_type_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_optional")] public static extern void NodeFeaturesSetChannelTypeOptional(long _this_arg);
	// void NodeFeatures_set_channel_type_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_required")] public static extern void NodeFeaturesSetChannelTypeRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_channel_type")] public static extern bool NodeFeaturesSupportsChannelType(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_channel_type")] public static extern bool InitFeaturesRequiresChannelType(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_channel_type")] public static extern bool NodeFeaturesRequiresChannelType(long _this_arg);
	// void InitFeatures_set_scid_privacy_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_optional")] public static extern void InitFeaturesSetScidPrivacyOptional(long _this_arg);
	// void InitFeatures_set_scid_privacy_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_required")] public static extern void InitFeaturesSetScidPrivacyRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_scid_privacy")] public static extern bool InitFeaturesSupportsScidPrivacy(long _this_arg);
	// void NodeFeatures_set_scid_privacy_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_optional")] public static extern void NodeFeaturesSetScidPrivacyOptional(long _this_arg);
	// void NodeFeatures_set_scid_privacy_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_required")] public static extern void NodeFeaturesSetScidPrivacyRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_scid_privacy")] public static extern bool NodeFeaturesSupportsScidPrivacy(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_optional")] public static extern void ChannelTypeFeaturesSetScidPrivacyOptional(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_required")] public static extern void ChannelTypeFeaturesSetScidPrivacyRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_scid_privacy")] public static extern bool ChannelTypeFeaturesSupportsScidPrivacy(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_scid_privacy")] public static extern bool InitFeaturesRequiresScidPrivacy(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_scid_privacy")] public static extern bool NodeFeaturesRequiresScidPrivacy(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_scid_privacy")] public static extern bool ChannelTypeFeaturesRequiresScidPrivacy(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_metadata_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_metadata_optional")] public static extern void Bolt11InvoiceFeaturesSetPaymentMetadataOptional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_metadata_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_metadata_required")] public static extern void Bolt11InvoiceFeaturesSetPaymentMetadataRequired(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_payment_metadata(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_payment_metadata")] public static extern bool Bolt11InvoiceFeaturesSupportsPaymentMetadata(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_payment_metadata(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_payment_metadata")] public static extern bool Bolt11InvoiceFeaturesRequiresPaymentMetadata(long _this_arg);
	// void InitFeatures_set_zero_conf_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_optional")] public static extern void InitFeaturesSetZeroConfOptional(long _this_arg);
	// void InitFeatures_set_zero_conf_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_required")] public static extern void InitFeaturesSetZeroConfRequired(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_zero_conf")] public static extern bool InitFeaturesSupportsZeroConf(long _this_arg);
	// void NodeFeatures_set_zero_conf_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_optional")] public static extern void NodeFeaturesSetZeroConfOptional(long _this_arg);
	// void NodeFeatures_set_zero_conf_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_required")] public static extern void NodeFeaturesSetZeroConfRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_zero_conf")] public static extern bool NodeFeaturesSupportsZeroConf(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_optional")] public static extern void ChannelTypeFeaturesSetZeroConfOptional(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_required")] public static extern void ChannelTypeFeaturesSetZeroConfRequired(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_zero_conf")] public static extern bool ChannelTypeFeaturesSupportsZeroConf(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_zero_conf")] public static extern bool InitFeaturesRequiresZeroConf(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_zero_conf")] public static extern bool NodeFeaturesRequiresZeroConf(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_zero_conf")] public static extern bool ChannelTypeFeaturesRequiresZeroConf(long _this_arg);
	// void NodeFeatures_set_keysend_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_optional")] public static extern void NodeFeaturesSetKeysendOptional(long _this_arg);
	// void NodeFeatures_set_keysend_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_required")] public static extern void NodeFeaturesSetKeysendRequired(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_keysend")] public static extern bool NodeFeaturesSupportsKeysend(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_keysend")] public static extern bool NodeFeaturesRequiresKeysend(long _this_arg);
	// void ShutdownScript_free(struct LDKShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_free")] public static extern void ShutdownScriptFree(long _this_obj);
	// uint64_t ShutdownScript_clone_ptr(LDKShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone_ptr")] public static extern long ShutdownScriptClonePtr(long _arg);
	// struct LDKShutdownScript ShutdownScript_clone(const struct LDKShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone")] public static extern long ShutdownScriptClone(long _orig);
	// bool ShutdownScript_eq(const struct LDKShutdownScript *NONNULL_PTR a, const struct LDKShutdownScript *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_eq")] public static extern bool ShutdownScriptEq(long _a, long _b);
	// void InvalidShutdownScript_free(struct LDKInvalidShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_free")] public static extern void InvalidShutdownScriptFree(long _this_obj);
	// struct LDKCVec_u8Z InvalidShutdownScript_get_script(const struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_get_script")] public static extern long InvalidShutdownScriptGetScript(long _this_ptr);
	// void InvalidShutdownScript_set_script(struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_set_script")] public static extern void InvalidShutdownScriptSetScript(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInvalidShutdownScript InvalidShutdownScript_new(struct LDKCVec_u8Z script_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_new")] public static extern long InvalidShutdownScriptNew(long _script_arg);
	// uint64_t InvalidShutdownScript_clone_ptr(LDKInvalidShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone_ptr")] public static extern long InvalidShutdownScriptClonePtr(long _arg);
	// struct LDKInvalidShutdownScript InvalidShutdownScript_clone(const struct LDKInvalidShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone")] public static extern long InvalidShutdownScriptClone(long _orig);
	// struct LDKCVec_u8Z ShutdownScript_write(const struct LDKShutdownScript *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_write")] public static extern long ShutdownScriptWrite(long _obj);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ ShutdownScript_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_read")] public static extern long ShutdownScriptRead(long _ser);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wpkh(const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wpkh")] public static extern long ShutdownScriptNewP2Wpkh(long _pubkey_hash);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wsh(const uint8_t (*script_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wsh")] public static extern long ShutdownScriptNewP2Wsh(long _script_hash);
	// MUST_USE_RES struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ ShutdownScript_new_witness_program(struct LDKWitnessProgram witness_program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_witness_program")] public static extern long ShutdownScriptNewWitnessProgram(long _witness_program);
	// MUST_USE_RES struct LDKCVec_u8Z ShutdownScript_into_inner(struct LDKShutdownScript this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_into_inner")] public static extern long ShutdownScriptIntoInner(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey ShutdownScript_as_legacy_pubkey(const struct LDKShutdownScript *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_as_legacy_pubkey")] public static extern long ShutdownScriptAsLegacyPubkey(long _this_arg);
	// MUST_USE_RES bool ShutdownScript_is_compatible(const struct LDKShutdownScript *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_is_compatible")] public static extern bool ShutdownScriptIsCompatible(long _this_arg, long _features);
	// void Retry_free(struct LDKRetry this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_free")] public static extern void RetryFree(long _this_ptr);
	// uint64_t Retry_clone_ptr(LDKRetry *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone_ptr")] public static extern long RetryClonePtr(long _arg);
	// struct LDKRetry Retry_clone(const struct LDKRetry *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone")] public static extern long RetryClone(long _orig);
	// struct LDKRetry Retry_attempts(uint32_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_attempts")] public static extern long RetryAttempts(int _a);
	// struct LDKRetry Retry_timeout(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_timeout")] public static extern long RetryTimeout(long _a);
	// bool Retry_eq(const struct LDKRetry *NONNULL_PTR a, const struct LDKRetry *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_eq")] public static extern bool RetryEq(long _a, long _b);
	// uint64_t Retry_hash(const struct LDKRetry *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_hash")] public static extern long RetryHash(long _o);
	// struct LDKCVec_u8Z Retry_write(const struct LDKRetry *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_write")] public static extern long RetryWrite(long _obj);
	// struct LDKCResult_RetryDecodeErrorZ Retry_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_read")] public static extern long RetryRead(long _ser);
	// enum LDKRetryableSendFailure RetryableSendFailure_clone(const enum LDKRetryableSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_clone")] public static extern RetryableSendFailure RetryableSendFailureClone(long _orig);
	// enum LDKRetryableSendFailure RetryableSendFailure_payment_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_payment_expired")] public static extern RetryableSendFailure RetryableSendFailurePaymentExpired();
	// enum LDKRetryableSendFailure RetryableSendFailure_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_route_not_found")] public static extern RetryableSendFailure RetryableSendFailureRouteNotFound();
	// enum LDKRetryableSendFailure RetryableSendFailure_duplicate_payment(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_duplicate_payment")] public static extern RetryableSendFailure RetryableSendFailureDuplicatePayment();
	// bool RetryableSendFailure_eq(const enum LDKRetryableSendFailure *NONNULL_PTR a, const enum LDKRetryableSendFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_eq")] public static extern bool RetryableSendFailureEq(long _a, long _b);
	// void PaymentSendFailure_free(struct LDKPaymentSendFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_free")] public static extern void PaymentSendFailureFree(long _this_ptr);
	// uint64_t PaymentSendFailure_clone_ptr(LDKPaymentSendFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_clone_ptr")] public static extern long PaymentSendFailureClonePtr(long _arg);
	// struct LDKPaymentSendFailure PaymentSendFailure_clone(const struct LDKPaymentSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_clone")] public static extern long PaymentSendFailureClone(long _orig);
	// struct LDKPaymentSendFailure PaymentSendFailure_parameter_error(struct LDKAPIError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_parameter_error")] public static extern long PaymentSendFailureParameterError(long _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_path_parameter_error(struct LDKCVec_CResult_NoneAPIErrorZZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_path_parameter_error")] public static extern long PaymentSendFailurePathParameterError(long _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_all_failed_resend_safe(struct LDKCVec_APIErrorZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_all_failed_resend_safe")] public static extern long PaymentSendFailureAllFailedResendSafe(long _a);
	// struct LDKPaymentSendFailure PaymentSendFailure_duplicate_payment(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_duplicate_payment")] public static extern long PaymentSendFailureDuplicatePayment();
	// struct LDKPaymentSendFailure PaymentSendFailure_partial_failure(struct LDKCVec_CResult_NoneAPIErrorZZ results, struct LDKRouteParameters failed_paths_retry, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_partial_failure")] public static extern long PaymentSendFailurePartialFailure(long _results, long _failed_paths_retry, long _payment_id);
	// bool PaymentSendFailure_eq(const struct LDKPaymentSendFailure *NONNULL_PTR a, const struct LDKPaymentSendFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentSendFailure_eq")] public static extern bool PaymentSendFailureEq(long _a, long _b);
	// void ProbeSendFailure_free(struct LDKProbeSendFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_free")] public static extern void ProbeSendFailureFree(long _this_ptr);
	// uint64_t ProbeSendFailure_clone_ptr(LDKProbeSendFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_clone_ptr")] public static extern long ProbeSendFailureClonePtr(long _arg);
	// struct LDKProbeSendFailure ProbeSendFailure_clone(const struct LDKProbeSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_clone")] public static extern long ProbeSendFailureClone(long _orig);
	// struct LDKProbeSendFailure ProbeSendFailure_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_route_not_found")] public static extern long ProbeSendFailureRouteNotFound();
	// struct LDKProbeSendFailure ProbeSendFailure_sending_failed(struct LDKPaymentSendFailure a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_sending_failed")] public static extern long ProbeSendFailureSendingFailed(long _a);
	// bool ProbeSendFailure_eq(const struct LDKProbeSendFailure *NONNULL_PTR a, const struct LDKProbeSendFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_eq")] public static extern bool ProbeSendFailureEq(long _a, long _b);
	// void RecipientOnionFields_free(struct LDKRecipientOnionFields this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_free")] public static extern void RecipientOnionFieldsFree(long _this_obj);
	// struct LDKCOption_ThirtyTwoBytesZ RecipientOnionFields_get_payment_secret(const struct LDKRecipientOnionFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_get_payment_secret")] public static extern long RecipientOnionFieldsGetPaymentSecret(long _this_ptr);
	// void RecipientOnionFields_set_payment_secret(struct LDKRecipientOnionFields *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_set_payment_secret")] public static extern void RecipientOnionFieldsSetPaymentSecret(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ RecipientOnionFields_get_payment_metadata(const struct LDKRecipientOnionFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_get_payment_metadata")] public static extern long RecipientOnionFieldsGetPaymentMetadata(long _this_ptr);
	// void RecipientOnionFields_set_payment_metadata(struct LDKRecipientOnionFields *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_set_payment_metadata")] public static extern void RecipientOnionFieldsSetPaymentMetadata(long _this_ptr, long _val);
	// uint64_t RecipientOnionFields_clone_ptr(LDKRecipientOnionFields *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_clone_ptr")] public static extern long RecipientOnionFieldsClonePtr(long _arg);
	// struct LDKRecipientOnionFields RecipientOnionFields_clone(const struct LDKRecipientOnionFields *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_clone")] public static extern long RecipientOnionFieldsClone(long _orig);
	// bool RecipientOnionFields_eq(const struct LDKRecipientOnionFields *NONNULL_PTR a, const struct LDKRecipientOnionFields *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_eq")] public static extern bool RecipientOnionFieldsEq(long _a, long _b);
	// struct LDKCVec_u8Z RecipientOnionFields_write(const struct LDKRecipientOnionFields *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_write")] public static extern long RecipientOnionFieldsWrite(long _obj);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ RecipientOnionFields_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_read")] public static extern long RecipientOnionFieldsRead(long _ser);
	// MUST_USE_RES struct LDKRecipientOnionFields RecipientOnionFields_secret_only(struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_secret_only")] public static extern long RecipientOnionFieldsSecretOnly(long _payment_secret);
	// MUST_USE_RES struct LDKRecipientOnionFields RecipientOnionFields_spontaneous_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_spontaneous_empty")] public static extern long RecipientOnionFieldsSpontaneousEmpty();
	// MUST_USE_RES struct LDKCResult_RecipientOnionFieldsNoneZ RecipientOnionFields_with_custom_tlvs(struct LDKRecipientOnionFields this_arg, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_with_custom_tlvs")] public static extern long RecipientOnionFieldsWithCustomTlvs(long _this_arg, long _custom_tlvs);
	// MUST_USE_RES struct LDKCVec_C2Tuple_u64CVec_u8ZZZ RecipientOnionFields_custom_tlvs(const struct LDKRecipientOnionFields *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_custom_tlvs")] public static extern long RecipientOnionFieldsCustomTlvs(long _this_arg);
	// void CustomMessageReader_free(struct LDKCustomMessageReader this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_free")] public static extern void CustomMessageReaderFree(long _this_ptr);
	// uint64_t Type_clone_ptr(LDKType *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone_ptr")] public static extern long TypeClonePtr(long _arg);
	// struct LDKType Type_clone(const struct LDKType *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone")] public static extern long TypeClone(long _orig);
	// void Type_free(struct LDKType this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_free")] public static extern void TypeFree(long _this_ptr);
	// void Offer_free(struct LDKOffer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_free")] public static extern void OfferFree(long _this_obj);
	// uint64_t Offer_clone_ptr(LDKOffer *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_clone_ptr")] public static extern long OfferClonePtr(long _arg);
	// struct LDKOffer Offer_clone(const struct LDKOffer *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_clone")] public static extern long OfferClone(long _orig);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ Offer_chains(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_chains")] public static extern long OfferChains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Offer_metadata(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_metadata")] public static extern long OfferMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount Offer_amount(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_amount")] public static extern long OfferAmount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Offer_description(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_description")] public static extern long OfferDescription(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures Offer_offer_features(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_offer_features")] public static extern long OfferOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Offer_absolute_expiry(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_absolute_expiry")] public static extern long OfferAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Offer_issuer(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_issuer")] public static extern long OfferIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ Offer_paths(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_paths")] public static extern long OfferPaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity Offer_supported_quantity(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_supported_quantity")] public static extern long OfferSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Offer_signing_pubkey(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_signing_pubkey")] public static extern long OfferSigningPubkey(long _this_arg);
	// MUST_USE_RES bool Offer_supports_chain(const struct LDKOffer *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes chain);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_supports_chain")] public static extern bool OfferSupportsChain(long _this_arg, long _chain);
	// MUST_USE_RES bool Offer_is_expired(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_expired")] public static extern bool OfferIsExpired(long _this_arg);
	// MUST_USE_RES bool Offer_is_expired_no_std(const struct LDKOffer *NONNULL_PTR this_arg, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_expired_no_std")] public static extern bool OfferIsExpiredNoStd(long _this_arg, long _duration_since_epoch);
	// MUST_USE_RES bool Offer_is_valid_quantity(const struct LDKOffer *NONNULL_PTR this_arg, uint64_t quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_valid_quantity")] public static extern bool OfferIsValidQuantity(long _this_arg, long _quantity);
	// MUST_USE_RES bool Offer_expects_quantity(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_expects_quantity")] public static extern bool OfferExpectsQuantity(long _this_arg);
	// struct LDKCVec_u8Z Offer_write(const struct LDKOffer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_write")] public static extern long OfferWrite(long _obj);
	// void Amount_free(struct LDKAmount this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_free")] public static extern void AmountFree(long _this_obj);
	// uint64_t Amount_clone_ptr(LDKAmount *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_clone_ptr")] public static extern long AmountClonePtr(long _arg);
	// struct LDKAmount Amount_clone(const struct LDKAmount *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_clone")] public static extern long AmountClone(long _orig);
	// void Quantity_free(struct LDKQuantity this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_free")] public static extern void QuantityFree(long _this_obj);
	// uint64_t Quantity_clone_ptr(LDKQuantity *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_clone_ptr")] public static extern long QuantityClonePtr(long _arg);
	// struct LDKQuantity Quantity_clone(const struct LDKQuantity *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_clone")] public static extern long QuantityClone(long _orig);
	// struct LDKCResult_OfferBolt12ParseErrorZ Offer_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_from_str")] public static extern long OfferFromStr(long _s);
	// void UnsignedBolt12Invoice_free(struct LDKUnsignedBolt12Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_free")] public static extern void UnsignedBolt12InvoiceFree(long _this_obj);
	// MUST_USE_RES struct LDKTaggedHash UnsignedBolt12Invoice_tagged_hash(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_tagged_hash")] public static extern long UnsignedBolt12InvoiceTaggedHash(long _this_arg);
	// void Bolt12Invoice_free(struct LDKBolt12Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_free")] public static extern void Bolt12InvoiceFree(long _this_obj);
	// uint64_t Bolt12Invoice_clone_ptr(LDKBolt12Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_clone_ptr")] public static extern long Bolt12InvoiceClonePtr(long _arg);
	// struct LDKBolt12Invoice Bolt12Invoice_clone(const struct LDKBolt12Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_clone")] public static extern long Bolt12InvoiceClone(long _orig);
	// MUST_USE_RES struct LDKCOption_CVec_ThirtyTwoBytesZZ UnsignedBolt12Invoice_offer_chains(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_offer_chains")] public static extern long UnsignedBolt12InvoiceOfferChains(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedBolt12Invoice_chain(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_chain")] public static extern long UnsignedBolt12InvoiceChain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ UnsignedBolt12Invoice_metadata(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_metadata")] public static extern long UnsignedBolt12InvoiceMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount UnsignedBolt12Invoice_amount(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_amount")] public static extern long UnsignedBolt12InvoiceAmount(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures UnsignedBolt12Invoice_offer_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_offer_features")] public static extern long UnsignedBolt12InvoiceOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_description(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_description")] public static extern long UnsignedBolt12InvoiceDescription(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedBolt12Invoice_absolute_expiry(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_absolute_expiry")] public static extern long UnsignedBolt12InvoiceAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_issuer(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_issuer")] public static extern long UnsignedBolt12InvoiceIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ UnsignedBolt12Invoice_message_paths(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_message_paths")] public static extern long UnsignedBolt12InvoiceMessagePaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity UnsignedBolt12Invoice_supported_quantity(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_supported_quantity")] public static extern long UnsignedBolt12InvoiceSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKu8slice UnsignedBolt12Invoice_payer_metadata(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_metadata")] public static extern long UnsignedBolt12InvoicePayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures UnsignedBolt12Invoice_invoice_request_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_invoice_request_features")] public static extern long UnsignedBolt12InvoiceInvoiceRequestFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedBolt12Invoice_quantity(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_quantity")] public static extern long UnsignedBolt12InvoiceQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedBolt12Invoice_payer_id(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_id")] public static extern long UnsignedBolt12InvoicePayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_payer_note(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_note")] public static extern long UnsignedBolt12InvoicePayerNote(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_created_at(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_created_at")] public static extern long UnsignedBolt12InvoiceCreatedAt(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_relative_expiry(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_relative_expiry")] public static extern long UnsignedBolt12InvoiceRelativeExpiry(long _this_arg);
	// MUST_USE_RES bool UnsignedBolt12Invoice_is_expired(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_is_expired")] public static extern bool UnsignedBolt12InvoiceIsExpired(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedBolt12Invoice_payment_hash(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payment_hash")] public static extern long UnsignedBolt12InvoicePaymentHash(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_amount_msats(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_amount_msats")] public static extern long UnsignedBolt12InvoiceAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures UnsignedBolt12Invoice_invoice_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_invoice_features")] public static extern long UnsignedBolt12InvoiceInvoiceFeatures(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedBolt12Invoice_signing_pubkey(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_signing_pubkey")] public static extern long UnsignedBolt12InvoiceSigningPubkey(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_ThirtyTwoBytesZZ Bolt12Invoice_offer_chains(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_offer_chains")] public static extern long Bolt12InvoiceOfferChains(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_chain(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_chain")] public static extern long Bolt12InvoiceChain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Bolt12Invoice_metadata(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_metadata")] public static extern long Bolt12InvoiceMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount Bolt12Invoice_amount(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_amount")] public static extern long Bolt12InvoiceAmount(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures Bolt12Invoice_offer_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_offer_features")] public static extern long Bolt12InvoiceOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_description(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_description")] public static extern long Bolt12InvoiceDescription(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt12Invoice_absolute_expiry(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_absolute_expiry")] public static extern long Bolt12InvoiceAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_issuer(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_issuer")] public static extern long Bolt12InvoiceIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ Bolt12Invoice_message_paths(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_message_paths")] public static extern long Bolt12InvoiceMessagePaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity Bolt12Invoice_supported_quantity(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_supported_quantity")] public static extern long Bolt12InvoiceSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKu8slice Bolt12Invoice_payer_metadata(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_metadata")] public static extern long Bolt12InvoicePayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures Bolt12Invoice_invoice_request_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_invoice_request_features")] public static extern long Bolt12InvoiceInvoiceRequestFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt12Invoice_quantity(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_quantity")] public static extern long Bolt12InvoiceQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt12Invoice_payer_id(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_id")] public static extern long Bolt12InvoicePayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_payer_note(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_note")] public static extern long Bolt12InvoicePayerNote(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_created_at(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_created_at")] public static extern long Bolt12InvoiceCreatedAt(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_relative_expiry(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_relative_expiry")] public static extern long Bolt12InvoiceRelativeExpiry(long _this_arg);
	// MUST_USE_RES bool Bolt12Invoice_is_expired(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_is_expired")] public static extern bool Bolt12InvoiceIsExpired(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_payment_hash(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payment_hash")] public static extern long Bolt12InvoicePaymentHash(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_amount_msats(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_amount_msats")] public static extern long Bolt12InvoiceAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures Bolt12Invoice_invoice_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_invoice_features")] public static extern long Bolt12InvoiceInvoiceFeatures(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt12Invoice_signing_pubkey(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signing_pubkey")] public static extern long Bolt12InvoiceSigningPubkey(long _this_arg);
	// MUST_USE_RES struct LDKSchnorrSignature Bolt12Invoice_signature(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signature")] public static extern long Bolt12InvoiceSignature(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_signable_hash(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signable_hash")] public static extern long Bolt12InvoiceSignableHash(long _this_arg);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesNoneZ Bolt12Invoice_verify(const struct LDKBolt12Invoice *NONNULL_PTR this_arg, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_verify")] public static extern long Bolt12InvoiceVerify(long _this_arg, long _key);
	// struct LDKCVec_u8Z UnsignedBolt12Invoice_write(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_write")] public static extern long UnsignedBolt12InvoiceWrite(long _obj);
	// struct LDKCVec_u8Z Bolt12Invoice_write(const struct LDKBolt12Invoice *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_write")] public static extern long Bolt12InvoiceWrite(long _obj);
	// void BlindedPayInfo_free(struct LDKBlindedPayInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_free")] public static extern void BlindedPayInfoFree(long _this_obj);
	// uint32_t BlindedPayInfo_get_fee_base_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_fee_base_msat")] public static extern int BlindedPayInfoGetFeeBaseMsat(long _this_ptr);
	// void BlindedPayInfo_set_fee_base_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_fee_base_msat")] public static extern void BlindedPayInfoSetFeeBaseMsat(long _this_ptr, int _val);
	// uint32_t BlindedPayInfo_get_fee_proportional_millionths(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_fee_proportional_millionths")] public static extern int BlindedPayInfoGetFeeProportionalMillionths(long _this_ptr);
	// void BlindedPayInfo_set_fee_proportional_millionths(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_fee_proportional_millionths")] public static extern void BlindedPayInfoSetFeeProportionalMillionths(long _this_ptr, int _val);
	// uint16_t BlindedPayInfo_get_cltv_expiry_delta(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_cltv_expiry_delta")] public static extern short BlindedPayInfoGetCltvExpiryDelta(long _this_ptr);
	// void BlindedPayInfo_set_cltv_expiry_delta(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_cltv_expiry_delta")] public static extern void BlindedPayInfoSetCltvExpiryDelta(long _this_ptr, short _val);
	// uint64_t BlindedPayInfo_get_htlc_minimum_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_htlc_minimum_msat")] public static extern long BlindedPayInfoGetHtlcMinimumMsat(long _this_ptr);
	// void BlindedPayInfo_set_htlc_minimum_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_htlc_minimum_msat")] public static extern void BlindedPayInfoSetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint64_t BlindedPayInfo_get_htlc_maximum_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_htlc_maximum_msat")] public static extern long BlindedPayInfoGetHtlcMaximumMsat(long _this_ptr);
	// void BlindedPayInfo_set_htlc_maximum_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_htlc_maximum_msat")] public static extern void BlindedPayInfoSetHtlcMaximumMsat(long _this_ptr, long _val);
	// struct LDKBlindedHopFeatures BlindedPayInfo_get_features(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_features")] public static extern long BlindedPayInfoGetFeatures(long _this_ptr);
	// void BlindedPayInfo_set_features(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, struct LDKBlindedHopFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_features")] public static extern void BlindedPayInfoSetFeatures(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedPayInfo BlindedPayInfo_new(uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, struct LDKBlindedHopFeatures features_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_new")] public static extern long BlindedPayInfoNew(int _fee_base_msat_arg, int _fee_proportional_millionths_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, long _features_arg);
	// uint64_t BlindedPayInfo_clone_ptr(LDKBlindedPayInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_clone_ptr")] public static extern long BlindedPayInfoClonePtr(long _arg);
	// struct LDKBlindedPayInfo BlindedPayInfo_clone(const struct LDKBlindedPayInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_clone")] public static extern long BlindedPayInfoClone(long _orig);
	// uint64_t BlindedPayInfo_hash(const struct LDKBlindedPayInfo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_hash")] public static extern long BlindedPayInfoHash(long _o);
	// bool BlindedPayInfo_eq(const struct LDKBlindedPayInfo *NONNULL_PTR a, const struct LDKBlindedPayInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_eq")] public static extern bool BlindedPayInfoEq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedPayInfo_write(const struct LDKBlindedPayInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_write")] public static extern long BlindedPayInfoWrite(long _obj);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ BlindedPayInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_read")] public static extern long BlindedPayInfoRead(long _ser);
	// void InvoiceError_free(struct LDKInvoiceError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_free")] public static extern void InvoiceErrorFree(long _this_obj);
	// struct LDKErroneousField InvoiceError_get_erroneous_field(const struct LDKInvoiceError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_get_erroneous_field")] public static extern long InvoiceErrorGetErroneousField(long _this_ptr);
	// void InvoiceError_set_erroneous_field(struct LDKInvoiceError *NONNULL_PTR this_ptr, struct LDKErroneousField val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_set_erroneous_field")] public static extern void InvoiceErrorSetErroneousField(long _this_ptr, long _val);
	// struct LDKUntrustedString InvoiceError_get_message(const struct LDKInvoiceError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_get_message")] public static extern long InvoiceErrorGetMessage(long _this_ptr);
	// void InvoiceError_set_message(struct LDKInvoiceError *NONNULL_PTR this_ptr, struct LDKUntrustedString val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_set_message")] public static extern void InvoiceErrorSetMessage(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInvoiceError InvoiceError_new(struct LDKErroneousField erroneous_field_arg, struct LDKUntrustedString message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_new")] public static extern long InvoiceErrorNew(long _erroneous_field_arg, long _message_arg);
	// uint64_t InvoiceError_clone_ptr(LDKInvoiceError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_clone_ptr")] public static extern long InvoiceErrorClonePtr(long _arg);
	// struct LDKInvoiceError InvoiceError_clone(const struct LDKInvoiceError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_clone")] public static extern long InvoiceErrorClone(long _orig);
	// void ErroneousField_free(struct LDKErroneousField this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_free")] public static extern void ErroneousFieldFree(long _this_obj);
	// uint64_t ErroneousField_get_tlv_fieldnum(const struct LDKErroneousField *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_get_tlv_fieldnum")] public static extern long ErroneousFieldGetTlvFieldnum(long _this_ptr);
	// void ErroneousField_set_tlv_fieldnum(struct LDKErroneousField *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_set_tlv_fieldnum")] public static extern void ErroneousFieldSetTlvFieldnum(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ ErroneousField_get_suggested_value(const struct LDKErroneousField *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_get_suggested_value")] public static extern long ErroneousFieldGetSuggestedValue(long _this_ptr);
	// void ErroneousField_set_suggested_value(struct LDKErroneousField *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_set_suggested_value")] public static extern void ErroneousFieldSetSuggestedValue(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKErroneousField ErroneousField_new(uint64_t tlv_fieldnum_arg, struct LDKCOption_CVec_u8ZZ suggested_value_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_new")] public static extern long ErroneousFieldNew(long _tlv_fieldnum_arg, long _suggested_value_arg);
	// uint64_t ErroneousField_clone_ptr(LDKErroneousField *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_clone_ptr")] public static extern long ErroneousFieldClonePtr(long _arg);
	// struct LDKErroneousField ErroneousField_clone(const struct LDKErroneousField *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_clone")] public static extern long ErroneousFieldClone(long _orig);
	// MUST_USE_RES struct LDKInvoiceError InvoiceError_from_string(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_from_string")] public static extern long InvoiceErrorFromString(long _s);
	// struct LDKCVec_u8Z InvoiceError_write(const struct LDKInvoiceError *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_write")] public static extern long InvoiceErrorWrite(long _obj);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ InvoiceError_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_read")] public static extern long InvoiceErrorRead(long _ser);
	// void UnsignedInvoiceRequest_free(struct LDKUnsignedInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_free")] public static extern void UnsignedInvoiceRequestFree(long _this_obj);
	// MUST_USE_RES struct LDKTaggedHash UnsignedInvoiceRequest_tagged_hash(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_tagged_hash")] public static extern long UnsignedInvoiceRequestTaggedHash(long _this_arg);
	// void InvoiceRequest_free(struct LDKInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_free")] public static extern void InvoiceRequestFree(long _this_obj);
	// uint64_t InvoiceRequest_clone_ptr(LDKInvoiceRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_clone_ptr")] public static extern long InvoiceRequestClonePtr(long _arg);
	// struct LDKInvoiceRequest InvoiceRequest_clone(const struct LDKInvoiceRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_clone")] public static extern long InvoiceRequestClone(long _orig);
	// void VerifiedInvoiceRequest_free(struct LDKVerifiedInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_free")] public static extern void VerifiedInvoiceRequestFree(long _this_obj);
	// struct LDKCOption_SecretKeyZ VerifiedInvoiceRequest_get_keys(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_get_keys")] public static extern long VerifiedInvoiceRequestGetKeys(long _this_ptr);
	// void VerifiedInvoiceRequest_set_keys(struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_ptr, struct LDKCOption_SecretKeyZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_set_keys")] public static extern void VerifiedInvoiceRequestSetKeys(long _this_ptr, long _val);
	// uint64_t VerifiedInvoiceRequest_clone_ptr(LDKVerifiedInvoiceRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_clone_ptr")] public static extern long VerifiedInvoiceRequestClonePtr(long _arg);
	// struct LDKVerifiedInvoiceRequest VerifiedInvoiceRequest_clone(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_clone")] public static extern long VerifiedInvoiceRequestClone(long _orig);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ UnsignedInvoiceRequest_chains(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_chains")] public static extern long UnsignedInvoiceRequestChains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ UnsignedInvoiceRequest_metadata(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_metadata")] public static extern long UnsignedInvoiceRequestMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount UnsignedInvoiceRequest_amount(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_amount")] public static extern long UnsignedInvoiceRequestAmount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_description(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_description")] public static extern long UnsignedInvoiceRequestDescription(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures UnsignedInvoiceRequest_offer_features(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_offer_features")] public static extern long UnsignedInvoiceRequestOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_absolute_expiry(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_absolute_expiry")] public static extern long UnsignedInvoiceRequestAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_issuer(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_issuer")] public static extern long UnsignedInvoiceRequestIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ UnsignedInvoiceRequest_paths(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_paths")] public static extern long UnsignedInvoiceRequestPaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity UnsignedInvoiceRequest_supported_quantity(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_supported_quantity")] public static extern long UnsignedInvoiceRequestSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedInvoiceRequest_signing_pubkey(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_signing_pubkey")] public static extern long UnsignedInvoiceRequestSigningPubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice UnsignedInvoiceRequest_payer_metadata(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_metadata")] public static extern long UnsignedInvoiceRequestPayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedInvoiceRequest_chain(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_chain")] public static extern long UnsignedInvoiceRequestChain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_amount_msats(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_amount_msats")] public static extern long UnsignedInvoiceRequestAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures UnsignedInvoiceRequest_invoice_request_features(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_invoice_request_features")] public static extern long UnsignedInvoiceRequestInvoiceRequestFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_quantity(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_quantity")] public static extern long UnsignedInvoiceRequestQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedInvoiceRequest_payer_id(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_id")] public static extern long UnsignedInvoiceRequestPayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_payer_note(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_note")] public static extern long UnsignedInvoiceRequestPayerNote(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ InvoiceRequest_chains(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_chains")] public static extern long InvoiceRequestChains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ InvoiceRequest_metadata(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_metadata")] public static extern long InvoiceRequestMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount InvoiceRequest_amount(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_amount")] public static extern long InvoiceRequestAmount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_description(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_description")] public static extern long InvoiceRequestDescription(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures InvoiceRequest_offer_features(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_offer_features")] public static extern long InvoiceRequestOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_absolute_expiry(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_absolute_expiry")] public static extern long InvoiceRequestAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_issuer(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_issuer")] public static extern long InvoiceRequestIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ InvoiceRequest_paths(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_paths")] public static extern long InvoiceRequestPaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity InvoiceRequest_supported_quantity(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_supported_quantity")] public static extern long InvoiceRequestSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey InvoiceRequest_signing_pubkey(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_signing_pubkey")] public static extern long InvoiceRequestSigningPubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice InvoiceRequest_payer_metadata(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_metadata")] public static extern long InvoiceRequestPayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes InvoiceRequest_chain(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_chain")] public static extern long InvoiceRequestChain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_amount_msats(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_amount_msats")] public static extern long InvoiceRequestAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures InvoiceRequest_invoice_request_features(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_invoice_request_features")] public static extern long InvoiceRequestInvoiceRequestFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_quantity(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_quantity")] public static extern long InvoiceRequestQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey InvoiceRequest_payer_id(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_id")] public static extern long InvoiceRequestPayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_payer_note(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_note")] public static extern long InvoiceRequestPayerNote(long _this_arg);
	// MUST_USE_RES struct LDKSchnorrSignature InvoiceRequest_signature(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_signature")] public static extern long InvoiceRequestSignature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_VerifiedInvoiceRequestNoneZ InvoiceRequest_verify(struct LDKInvoiceRequest this_arg, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_verify")] public static extern long InvoiceRequestVerify(long _this_arg, long _key);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ VerifiedInvoiceRequest_chains(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_chains")] public static extern long VerifiedInvoiceRequestChains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ VerifiedInvoiceRequest_metadata(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_metadata")] public static extern long VerifiedInvoiceRequestMetadata(long _this_arg);
	// MUST_USE_RES struct LDKAmount VerifiedInvoiceRequest_amount(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_amount")] public static extern long VerifiedInvoiceRequestAmount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_description(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_description")] public static extern long VerifiedInvoiceRequestDescription(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures VerifiedInvoiceRequest_offer_features(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_offer_features")] public static extern long VerifiedInvoiceRequestOfferFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_absolute_expiry(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_absolute_expiry")] public static extern long VerifiedInvoiceRequestAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_issuer(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_issuer")] public static extern long VerifiedInvoiceRequestIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ VerifiedInvoiceRequest_paths(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_paths")] public static extern long VerifiedInvoiceRequestPaths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity VerifiedInvoiceRequest_supported_quantity(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_supported_quantity")] public static extern long VerifiedInvoiceRequestSupportedQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey VerifiedInvoiceRequest_signing_pubkey(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_signing_pubkey")] public static extern long VerifiedInvoiceRequestSigningPubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice VerifiedInvoiceRequest_payer_metadata(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_metadata")] public static extern long VerifiedInvoiceRequestPayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes VerifiedInvoiceRequest_chain(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_chain")] public static extern long VerifiedInvoiceRequestChain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_amount_msats(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_amount_msats")] public static extern long VerifiedInvoiceRequestAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures VerifiedInvoiceRequest_invoice_request_features(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_invoice_request_features")] public static extern long VerifiedInvoiceRequestInvoiceRequestFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_quantity(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_quantity")] public static extern long VerifiedInvoiceRequestQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey VerifiedInvoiceRequest_payer_id(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_id")] public static extern long VerifiedInvoiceRequestPayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_payer_note(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_note")] public static extern long VerifiedInvoiceRequestPayerNote(long _this_arg);
	// struct LDKCVec_u8Z UnsignedInvoiceRequest_write(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_write")] public static extern long UnsignedInvoiceRequestWrite(long _obj);
	// struct LDKCVec_u8Z InvoiceRequest_write(const struct LDKInvoiceRequest *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_write")] public static extern long InvoiceRequestWrite(long _obj);
	// void TaggedHash_free(struct LDKTaggedHash this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_free")] public static extern void TaggedHashFree(long _this_obj);
	// uint64_t TaggedHash_clone_ptr(LDKTaggedHash *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_clone_ptr")] public static extern long TaggedHashClonePtr(long _arg);
	// struct LDKTaggedHash TaggedHash_clone(const struct LDKTaggedHash *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_clone")] public static extern long TaggedHashClone(long _orig);
	// MUST_USE_RES const uint8_t (*TaggedHash_as_digest(const struct LDKTaggedHash *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_as_digest")] public static extern long TaggedHashAsDigest(long _this_arg);
	// MUST_USE_RES struct LDKStr TaggedHash_tag(const struct LDKTaggedHash *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_tag")] public static extern long TaggedHashTag(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes TaggedHash_merkle_root(const struct LDKTaggedHash *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_merkle_root")] public static extern long TaggedHashMerkleRoot(long _this_arg);
	// void Bolt12ParseError_free(struct LDKBolt12ParseError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_free")] public static extern void Bolt12ParseErrorFree(long _this_obj);
	// uint64_t Bolt12ParseError_clone_ptr(LDKBolt12ParseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_clone_ptr")] public static extern long Bolt12ParseErrorClonePtr(long _arg);
	// struct LDKBolt12ParseError Bolt12ParseError_clone(const struct LDKBolt12ParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_clone")] public static extern long Bolt12ParseErrorClone(long _orig);
	// enum LDKBolt12SemanticError Bolt12SemanticError_clone(const enum LDKBolt12SemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_clone")] public static extern Bolt12SemanticError Bolt12SemanticErrorClone(long _orig);
	// enum LDKBolt12SemanticError Bolt12SemanticError_already_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_already_expired")] public static extern Bolt12SemanticError Bolt12SemanticErrorAlreadyExpired();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unsupported_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unsupported_chain")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnsupportedChain();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_chain")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedChain();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_amount")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingAmount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_amount")] public static extern Bolt12SemanticError Bolt12SemanticErrorInvalidAmount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_insufficient_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_insufficient_amount")] public static extern Bolt12SemanticError Bolt12SemanticErrorInsufficientAmount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_amount")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedAmount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unsupported_currency(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unsupported_currency")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnsupportedCurrency();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unknown_required_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unknown_required_features")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnknownRequiredFeatures();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_features")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedFeatures();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_description(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_description")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingDescription();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingSigningPubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticErrorInvalidSigningPubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedSigningPubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_quantity")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingQuantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_quantity")] public static extern Bolt12SemanticError Bolt12SemanticErrorInvalidQuantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_quantity")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedQuantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_metadata")] public static extern Bolt12SemanticError Bolt12SemanticErrorInvalidMetadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_metadata")] public static extern Bolt12SemanticError Bolt12SemanticErrorUnexpectedMetadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payer_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payer_metadata")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingPayerMetadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payer_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payer_id")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingPayerId();
	// enum LDKBolt12SemanticError Bolt12SemanticError_duplicate_payment_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_duplicate_payment_id")] public static extern Bolt12SemanticError Bolt12SemanticErrorDuplicatePaymentId();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_paths(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_paths")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingPaths();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_pay_info(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_pay_info")] public static extern Bolt12SemanticError Bolt12SemanticErrorInvalidPayInfo();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_creation_time(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_creation_time")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingCreationTime();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payment_hash")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingPaymentHash();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_signature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_signature")] public static extern Bolt12SemanticError Bolt12SemanticErrorMissingSignature();
	// void Refund_free(struct LDKRefund this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_free")] public static extern void RefundFree(long _this_obj);
	// uint64_t Refund_clone_ptr(LDKRefund *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_clone_ptr")] public static extern long RefundClonePtr(long _arg);
	// struct LDKRefund Refund_clone(const struct LDKRefund *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_clone")] public static extern long RefundClone(long _orig);
	// MUST_USE_RES struct LDKPrintableString Refund_description(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_description")] public static extern long RefundDescription(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Refund_absolute_expiry(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_absolute_expiry")] public static extern long RefundAbsoluteExpiry(long _this_arg);
	// MUST_USE_RES bool Refund_is_expired(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_is_expired")] public static extern bool RefundIsExpired(long _this_arg);
	// MUST_USE_RES bool Refund_is_expired_no_std(const struct LDKRefund *NONNULL_PTR this_arg, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_is_expired_no_std")] public static extern bool RefundIsExpiredNoStd(long _this_arg, long _duration_since_epoch);
	// MUST_USE_RES struct LDKPrintableString Refund_issuer(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_issuer")] public static extern long RefundIssuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPathZ Refund_paths(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_paths")] public static extern long RefundPaths(long _this_arg);
	// MUST_USE_RES struct LDKu8slice Refund_payer_metadata(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_metadata")] public static extern long RefundPayerMetadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Refund_chain(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_chain")] public static extern long RefundChain(long _this_arg);
	// MUST_USE_RES uint64_t Refund_amount_msats(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_amount_msats")] public static extern long RefundAmountMsats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures Refund_features(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_features")] public static extern long RefundFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Refund_quantity(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_quantity")] public static extern long RefundQuantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Refund_payer_id(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_id")] public static extern long RefundPayerId(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Refund_payer_note(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_note")] public static extern long RefundPayerNote(long _this_arg);
	// struct LDKCVec_u8Z Refund_write(const struct LDKRefund *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_write")] public static extern long RefundWrite(long _obj);
	// struct LDKCResult_RefundBolt12ParseErrorZ Refund_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_from_str")] public static extern long RefundFromStr(long _s);
	// enum LDKUtxoLookupError UtxoLookupError_clone(const enum LDKUtxoLookupError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_clone")] public static extern UtxoLookupError UtxoLookupErrorClone(long _orig);
	// enum LDKUtxoLookupError UtxoLookupError_unknown_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_unknown_chain")] public static extern UtxoLookupError UtxoLookupErrorUnknownChain();
	// enum LDKUtxoLookupError UtxoLookupError_unknown_tx(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_unknown_tx")] public static extern UtxoLookupError UtxoLookupErrorUnknownTx();
	// void UtxoResult_free(struct LDKUtxoResult this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_free")] public static extern void UtxoResultFree(long _this_ptr);
	// uint64_t UtxoResult_clone_ptr(LDKUtxoResult *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_clone_ptr")] public static extern long UtxoResultClonePtr(long _arg);
	// struct LDKUtxoResult UtxoResult_clone(const struct LDKUtxoResult *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_clone")] public static extern long UtxoResultClone(long _orig);
	// struct LDKUtxoResult UtxoResult_sync(struct LDKCResult_TxOutUtxoLookupErrorZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_sync")] public static extern long UtxoResultSync(long _a);
	// struct LDKUtxoResult UtxoResult_async(struct LDKUtxoFuture a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_async")] public static extern long UtxoResultAsync(long _a);
	// void UtxoLookup_free(struct LDKUtxoLookup this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookup_free")] public static extern void UtxoLookupFree(long _this_ptr);
	// void UtxoFuture_free(struct LDKUtxoFuture this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_free")] public static extern void UtxoFutureFree(long _this_obj);
	// uint64_t UtxoFuture_clone_ptr(LDKUtxoFuture *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_clone_ptr")] public static extern long UtxoFutureClonePtr(long _arg);
	// struct LDKUtxoFuture UtxoFuture_clone(const struct LDKUtxoFuture *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_clone")] public static extern long UtxoFutureClone(long _orig);
	// MUST_USE_RES struct LDKUtxoFuture UtxoFuture_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_new")] public static extern long UtxoFutureNew();
	// void UtxoFuture_resolve_without_forwarding(const struct LDKUtxoFuture *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR graph, struct LDKCResult_TxOutUtxoLookupErrorZ result);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_resolve_without_forwarding")] public static extern void UtxoFutureResolveWithoutForwarding(long _this_arg, long _graph, long _result);
	// void UtxoFuture_resolve(const struct LDKUtxoFuture *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR graph, const struct LDKP2PGossipSync *NONNULL_PTR gossip, struct LDKCResult_TxOutUtxoLookupErrorZ result);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_resolve")] public static extern void UtxoFutureResolve(long _this_arg, long _graph, long _gossip, long _result);
	// void NodeId_free(struct LDKNodeId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_free")] public static extern void NodeIdFree(long _this_obj);
	// uint64_t NodeId_clone_ptr(LDKNodeId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone_ptr")] public static extern long NodeIdClonePtr(long _arg);
	// struct LDKNodeId NodeId_clone(const struct LDKNodeId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone")] public static extern long NodeIdClone(long _orig);
	// MUST_USE_RES struct LDKNodeId NodeId_from_pubkey(struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_from_pubkey")] public static extern long NodeIdFromPubkey(long _pubkey);
	// MUST_USE_RES struct LDKu8slice NodeId_as_slice(const struct LDKNodeId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_slice")] public static extern long NodeIdAsSlice(long _this_arg);
	// MUST_USE_RES const uint8_t (*NodeId_as_array(const struct LDKNodeId *NONNULL_PTR this_arg))[33];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_array")] public static extern long NodeIdAsArray(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PublicKeySecp256k1ErrorZ NodeId_as_pubkey(const struct LDKNodeId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_pubkey")] public static extern long NodeIdAsPubkey(long _this_arg);
	// uint64_t NodeId_hash(const struct LDKNodeId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_hash")] public static extern long NodeIdHash(long _o);
	// struct LDKCVec_u8Z NodeId_write(const struct LDKNodeId *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_write")] public static extern long NodeIdWrite(long _obj);
	// struct LDKCResult_NodeIdDecodeErrorZ NodeId_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_read")] public static extern long NodeIdRead(long _ser);
	// void NetworkGraph_free(struct LDKNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_free")] public static extern void NetworkGraphFree(long _this_obj);
	// void ReadOnlyNetworkGraph_free(struct LDKReadOnlyNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_free")] public static extern void ReadOnlyNetworkGraphFree(long _this_obj);
	// void NetworkUpdate_free(struct LDKNetworkUpdate this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_free")] public static extern void NetworkUpdateFree(long _this_ptr);
	// uint64_t NetworkUpdate_clone_ptr(LDKNetworkUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone_ptr")] public static extern long NetworkUpdateClonePtr(long _arg);
	// struct LDKNetworkUpdate NetworkUpdate_clone(const struct LDKNetworkUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone")] public static extern long NetworkUpdateClone(long _orig);
	// struct LDKNetworkUpdate NetworkUpdate_channel_update_message(struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_channel_update_message")] public static extern long NetworkUpdateChannelUpdateMessage(long _msg);
	// struct LDKNetworkUpdate NetworkUpdate_channel_failure(uint64_t short_channel_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_channel_failure")] public static extern long NetworkUpdateChannelFailure(long _short_channel_id, bool _is_permanent);
	// struct LDKNetworkUpdate NetworkUpdate_node_failure(struct LDKPublicKey node_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_node_failure")] public static extern long NetworkUpdateNodeFailure(long _node_id, bool _is_permanent);
	// bool NetworkUpdate_eq(const struct LDKNetworkUpdate *NONNULL_PTR a, const struct LDKNetworkUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_eq")] public static extern bool NetworkUpdateEq(long _a, long _b);
	// struct LDKCVec_u8Z NetworkUpdate_write(const struct LDKNetworkUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_write")] public static extern long NetworkUpdateWrite(long _obj);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ NetworkUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_read")] public static extern long NetworkUpdateRead(long _ser);
	// void P2PGossipSync_free(struct LDKP2PGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_free")] public static extern void P2PGossipSyncFree(long _this_obj);
	// MUST_USE_RES struct LDKP2PGossipSync P2PGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCOption_UtxoLookupZ utxo_lookup, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_new")] public static extern long P2PGossipSyncNew(long _network_graph, long _utxo_lookup, long _logger);
	// void P2PGossipSync_add_utxo_lookup(const struct LDKP2PGossipSync *NONNULL_PTR this_arg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_add_utxo_lookup")] public static extern void P2PGossipSyncAddUtxoLookup(long _this_arg, long _utxo_lookup);
	// void NetworkGraph_handle_network_update(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNetworkUpdate *NONNULL_PTR network_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_handle_network_update")] public static extern void NetworkGraphHandleNetworkUpdate(long _this_arg, long _network_update);
	// MUST_USE_RES struct LDKThirtyTwoBytes NetworkGraph_get_chain_hash(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_get_chain_hash")] public static extern long NetworkGraphGetChainHash(long _this_arg);
	// struct LDKCResult_NoneLightningErrorZ verify_node_announcement(const struct LDKNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify_node_announcement")] public static extern long VerifyNodeAnnouncement(long _msg);
	// struct LDKCResult_NoneLightningErrorZ verify_channel_announcement(const struct LDKChannelAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify_channel_announcement")] public static extern long VerifyChannelAnnouncement(long _msg);
	// struct LDKRoutingMessageHandler P2PGossipSync_as_RoutingMessageHandler(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_RoutingMessageHandler")] public static extern long P2PGossipSyncAsRoutingMessageHandler(long _this_arg);
	// struct LDKMessageSendEventsProvider P2PGossipSync_as_MessageSendEventsProvider(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_MessageSendEventsProvider")] public static extern long P2PGossipSyncAsMessageSendEventsProvider(long _this_arg);
	// void ChannelUpdateInfo_free(struct LDKChannelUpdateInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_free")] public static extern void ChannelUpdateInfoFree(long _this_obj);
	// uint32_t ChannelUpdateInfo_get_last_update(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update")] public static extern int ChannelUpdateInfoGetLastUpdate(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update")] public static extern void ChannelUpdateInfoSetLastUpdate(long _this_ptr, int _val);
	// bool ChannelUpdateInfo_get_enabled(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_enabled")] public static extern bool ChannelUpdateInfoGetEnabled(long _this_ptr);
	// void ChannelUpdateInfo_set_enabled(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_enabled")] public static extern void ChannelUpdateInfoSetEnabled(long _this_ptr, bool _val);
	// uint16_t ChannelUpdateInfo_get_cltv_expiry_delta(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_cltv_expiry_delta")] public static extern short ChannelUpdateInfoGetCltvExpiryDelta(long _this_ptr);
	// void ChannelUpdateInfo_set_cltv_expiry_delta(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_cltv_expiry_delta")] public static extern void ChannelUpdateInfoSetCltvExpiryDelta(long _this_ptr, short _val);
	// uint64_t ChannelUpdateInfo_get_htlc_minimum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_minimum_msat")] public static extern long ChannelUpdateInfoGetHtlcMinimumMsat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_minimum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_minimum_msat")] public static extern void ChannelUpdateInfoSetHtlcMinimumMsat(long _this_ptr, long _val);
	// uint64_t ChannelUpdateInfo_get_htlc_maximum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_maximum_msat")] public static extern long ChannelUpdateInfoGetHtlcMaximumMsat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_maximum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_maximum_msat")] public static extern void ChannelUpdateInfoSetHtlcMaximumMsat(long _this_ptr, long _val);
	// struct LDKRoutingFees ChannelUpdateInfo_get_fees(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_fees")] public static extern long ChannelUpdateInfoGetFees(long _this_ptr);
	// void ChannelUpdateInfo_set_fees(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_fees")] public static extern void ChannelUpdateInfoSetFees(long _this_ptr, long _val);
	// struct LDKChannelUpdate ChannelUpdateInfo_get_last_update_message(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update_message")] public static extern long ChannelUpdateInfoGetLastUpdateMessage(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update_message(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update_message")] public static extern void ChannelUpdateInfoSetLastUpdateMessage(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelUpdateInfo_new(uint32_t last_update_arg, bool enabled_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, struct LDKRoutingFees fees_arg, struct LDKChannelUpdate last_update_message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_new")] public static extern long ChannelUpdateInfoNew(int _last_update_arg, bool _enabled_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, long _fees_arg, long _last_update_message_arg);
	// uint64_t ChannelUpdateInfo_clone_ptr(LDKChannelUpdateInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone_ptr")] public static extern long ChannelUpdateInfoClonePtr(long _arg);
	// struct LDKChannelUpdateInfo ChannelUpdateInfo_clone(const struct LDKChannelUpdateInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone")] public static extern long ChannelUpdateInfoClone(long _orig);
	// bool ChannelUpdateInfo_eq(const struct LDKChannelUpdateInfo *NONNULL_PTR a, const struct LDKChannelUpdateInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_eq")] public static extern bool ChannelUpdateInfoEq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelUpdateInfo_write(const struct LDKChannelUpdateInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_write")] public static extern long ChannelUpdateInfoWrite(long _obj);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ ChannelUpdateInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_read")] public static extern long ChannelUpdateInfoRead(long _ser);
	// void ChannelInfo_free(struct LDKChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_free")] public static extern void ChannelInfoFree(long _this_obj);
	// struct LDKChannelFeatures ChannelInfo_get_features(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_features")] public static extern long ChannelInfoGetFeatures(long _this_ptr);
	// void ChannelInfo_set_features(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_features")] public static extern void ChannelInfoSetFeatures(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_one")] public static extern long ChannelInfoGetNodeOne(long _this_ptr);
	// void ChannelInfo_set_node_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_one")] public static extern void ChannelInfoSetNodeOne(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_one_to_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_one_to_two")] public static extern long ChannelInfoGetOneToTwo(long _this_ptr);
	// void ChannelInfo_set_one_to_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_one_to_two")] public static extern void ChannelInfoSetOneToTwo(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_two")] public static extern long ChannelInfoGetNodeTwo(long _this_ptr);
	// void ChannelInfo_set_node_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_two")] public static extern void ChannelInfoSetNodeTwo(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_two_to_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_two_to_one")] public static extern long ChannelInfoGetTwoToOne(long _this_ptr);
	// void ChannelInfo_set_two_to_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_two_to_one")] public static extern void ChannelInfoSetTwoToOne(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelInfo_get_capacity_sats(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_capacity_sats")] public static extern long ChannelInfoGetCapacitySats(long _this_ptr);
	// void ChannelInfo_set_capacity_sats(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_capacity_sats")] public static extern void ChannelInfoSetCapacitySats(long _this_ptr, long _val);
	// struct LDKChannelAnnouncement ChannelInfo_get_announcement_message(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_announcement_message")] public static extern long ChannelInfoGetAnnouncementMessage(long _this_ptr);
	// void ChannelInfo_set_announcement_message(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_announcement_message")] public static extern void ChannelInfoSetAnnouncementMessage(long _this_ptr, long _val);
	// uint64_t ChannelInfo_clone_ptr(LDKChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone_ptr")] public static extern long ChannelInfoClonePtr(long _arg);
	// struct LDKChannelInfo ChannelInfo_clone(const struct LDKChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone")] public static extern long ChannelInfoClone(long _orig);
	// bool ChannelInfo_eq(const struct LDKChannelInfo *NONNULL_PTR a, const struct LDKChannelInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_eq")] public static extern bool ChannelInfoEq(long _a, long _b);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelInfo_get_directional_info(const struct LDKChannelInfo *NONNULL_PTR this_arg, uint8_t channel_flags);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_directional_info")] public static extern long ChannelInfoGetDirectionalInfo(long _this_arg, byte _channel_flags);
	// struct LDKCVec_u8Z ChannelInfo_write(const struct LDKChannelInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_write")] public static extern long ChannelInfoWrite(long _obj);
	// struct LDKCResult_ChannelInfoDecodeErrorZ ChannelInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_read")] public static extern long ChannelInfoRead(long _ser);
	// void DirectedChannelInfo_free(struct LDKDirectedChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_free")] public static extern void DirectedChannelInfoFree(long _this_obj);
	// uint64_t DirectedChannelInfo_clone_ptr(LDKDirectedChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone_ptr")] public static extern long DirectedChannelInfoClonePtr(long _arg);
	// struct LDKDirectedChannelInfo DirectedChannelInfo_clone(const struct LDKDirectedChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone")] public static extern long DirectedChannelInfoClone(long _orig);
	// MUST_USE_RES struct LDKChannelInfo DirectedChannelInfo_channel(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_channel")] public static extern long DirectedChannelInfoChannel(long _this_arg);
	// MUST_USE_RES struct LDKEffectiveCapacity DirectedChannelInfo_effective_capacity(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_effective_capacity")] public static extern long DirectedChannelInfoEffectiveCapacity(long _this_arg);
	// void EffectiveCapacity_free(struct LDKEffectiveCapacity this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_free")] public static extern void EffectiveCapacityFree(long _this_ptr);
	// uint64_t EffectiveCapacity_clone_ptr(LDKEffectiveCapacity *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone_ptr")] public static extern long EffectiveCapacityClonePtr(long _arg);
	// struct LDKEffectiveCapacity EffectiveCapacity_clone(const struct LDKEffectiveCapacity *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone")] public static extern long EffectiveCapacityClone(long _orig);
	// struct LDKEffectiveCapacity EffectiveCapacity_exact_liquidity(uint64_t liquidity_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_exact_liquidity")] public static extern long EffectiveCapacityExactLiquidity(long _liquidity_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_advertised_max_htlc(uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_advertised_max_htlc")] public static extern long EffectiveCapacityAdvertisedMaxHtlc(long _amount_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_total(uint64_t capacity_msat, uint64_t htlc_maximum_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_total")] public static extern long EffectiveCapacityTotal(long _capacity_msat, long _htlc_maximum_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_infinite(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_infinite")] public static extern long EffectiveCapacityInfinite();
	// struct LDKEffectiveCapacity EffectiveCapacity_hint_max_htlc(uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_hint_max_htlc")] public static extern long EffectiveCapacityHintMaxHtlc(long _amount_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_unknown(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_unknown")] public static extern long EffectiveCapacityUnknown();
	// MUST_USE_RES uint64_t EffectiveCapacity_as_msat(const struct LDKEffectiveCapacity *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_as_msat")] public static extern long EffectiveCapacityAsMsat(long _this_arg);
	// void RoutingFees_free(struct LDKRoutingFees this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_free")] public static extern void RoutingFeesFree(long _this_obj);
	// uint32_t RoutingFees_get_base_msat(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_base_msat")] public static extern int RoutingFeesGetBaseMsat(long _this_ptr);
	// void RoutingFees_set_base_msat(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_base_msat")] public static extern void RoutingFeesSetBaseMsat(long _this_ptr, int _val);
	// uint32_t RoutingFees_get_proportional_millionths(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_proportional_millionths")] public static extern int RoutingFeesGetProportionalMillionths(long _this_ptr);
	// void RoutingFees_set_proportional_millionths(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_proportional_millionths")] public static extern void RoutingFeesSetProportionalMillionths(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRoutingFees RoutingFees_new(uint32_t base_msat_arg, uint32_t proportional_millionths_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_new")] public static extern long RoutingFeesNew(int _base_msat_arg, int _proportional_millionths_arg);
	// bool RoutingFees_eq(const struct LDKRoutingFees *NONNULL_PTR a, const struct LDKRoutingFees *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_eq")] public static extern bool RoutingFeesEq(long _a, long _b);
	// uint64_t RoutingFees_clone_ptr(LDKRoutingFees *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone_ptr")] public static extern long RoutingFeesClonePtr(long _arg);
	// struct LDKRoutingFees RoutingFees_clone(const struct LDKRoutingFees *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone")] public static extern long RoutingFeesClone(long _orig);
	// uint64_t RoutingFees_hash(const struct LDKRoutingFees *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_hash")] public static extern long RoutingFeesHash(long _o);
	// struct LDKCVec_u8Z RoutingFees_write(const struct LDKRoutingFees *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_write")] public static extern long RoutingFeesWrite(long _obj);
	// struct LDKCResult_RoutingFeesDecodeErrorZ RoutingFees_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_read")] public static extern long RoutingFeesRead(long _ser);
	// void NodeAnnouncementInfo_free(struct LDKNodeAnnouncementInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_free")] public static extern void NodeAnnouncementInfoFree(long _this_obj);
	// struct LDKNodeFeatures NodeAnnouncementInfo_get_features(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_features")] public static extern long NodeAnnouncementInfoGetFeatures(long _this_ptr);
	// void NodeAnnouncementInfo_set_features(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_features")] public static extern void NodeAnnouncementInfoSetFeatures(long _this_ptr, long _val);
	// uint32_t NodeAnnouncementInfo_get_last_update(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_last_update")] public static extern int NodeAnnouncementInfoGetLastUpdate(long _this_ptr);
	// void NodeAnnouncementInfo_set_last_update(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_last_update")] public static extern void NodeAnnouncementInfoSetLastUpdate(long _this_ptr, int _val);
	// const uint8_t (*NodeAnnouncementInfo_get_rgb(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_rgb")] public static extern long NodeAnnouncementInfoGetRgb(long _this_ptr);
	// void NodeAnnouncementInfo_set_rgb(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_rgb")] public static extern void NodeAnnouncementInfoSetRgb(long _this_ptr, long _val);
	// struct LDKNodeAlias NodeAnnouncementInfo_get_alias(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_alias")] public static extern long NodeAnnouncementInfoGetAlias(long _this_ptr);
	// void NodeAnnouncementInfo_set_alias(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeAlias val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_alias")] public static extern void NodeAnnouncementInfoSetAlias(long _this_ptr, long _val);
	// struct LDKNodeAnnouncement NodeAnnouncementInfo_get_announcement_message(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_get_announcement_message")] public static extern long NodeAnnouncementInfoGetAnnouncementMessage(long _this_ptr);
	// void NodeAnnouncementInfo_set_announcement_message(struct LDKNodeAnnouncementInfo *NONNULL_PTR this_ptr, struct LDKNodeAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_set_announcement_message")] public static extern void NodeAnnouncementInfoSetAnnouncementMessage(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_new(struct LDKNodeFeatures features_arg, uint32_t last_update_arg, struct LDKThreeBytes rgb_arg, struct LDKNodeAlias alias_arg, struct LDKNodeAnnouncement announcement_message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_new")] public static extern long NodeAnnouncementInfoNew(long _features_arg, int _last_update_arg, long _rgb_arg, long _alias_arg, long _announcement_message_arg);
	// uint64_t NodeAnnouncementInfo_clone_ptr(LDKNodeAnnouncementInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone_ptr")] public static extern long NodeAnnouncementInfoClonePtr(long _arg);
	// struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_clone(const struct LDKNodeAnnouncementInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone")] public static extern long NodeAnnouncementInfoClone(long _orig);
	// bool NodeAnnouncementInfo_eq(const struct LDKNodeAnnouncementInfo *NONNULL_PTR a, const struct LDKNodeAnnouncementInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_eq")] public static extern bool NodeAnnouncementInfoEq(long _a, long _b);
	// MUST_USE_RES struct LDKCVec_SocketAddressZ NodeAnnouncementInfo_addresses(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_addresses")] public static extern long NodeAnnouncementInfoAddresses(long _this_arg);
	// struct LDKCVec_u8Z NodeAnnouncementInfo_write(const struct LDKNodeAnnouncementInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_write")] public static extern long NodeAnnouncementInfoWrite(long _obj);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ NodeAnnouncementInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_read")] public static extern long NodeAnnouncementInfoRead(long _ser);
	// void NodeAlias_free(struct LDKNodeAlias this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_free")] public static extern void NodeAliasFree(long _this_obj);
	// const uint8_t (*NodeAlias_get_a(const struct LDKNodeAlias *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_get_a")] public static extern long NodeAliasGetA(long _this_ptr);
	// void NodeAlias_set_a(struct LDKNodeAlias *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_set_a")] public static extern void NodeAliasSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAlias NodeAlias_new(struct LDKThirtyTwoBytes a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_new")] public static extern long NodeAliasNew(long _a_arg);
	// uint64_t NodeAlias_clone_ptr(LDKNodeAlias *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone_ptr")] public static extern long NodeAliasClonePtr(long _arg);
	// struct LDKNodeAlias NodeAlias_clone(const struct LDKNodeAlias *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone")] public static extern long NodeAliasClone(long _orig);
	// uint64_t NodeAlias_hash(const struct LDKNodeAlias *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_hash")] public static extern long NodeAliasHash(long _o);
	// bool NodeAlias_eq(const struct LDKNodeAlias *NONNULL_PTR a, const struct LDKNodeAlias *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_eq")] public static extern bool NodeAliasEq(long _a, long _b);
	// struct LDKCVec_u8Z NodeAlias_write(const struct LDKNodeAlias *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_write")] public static extern long NodeAliasWrite(long _obj);
	// struct LDKCResult_NodeAliasDecodeErrorZ NodeAlias_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_read")] public static extern long NodeAliasRead(long _ser);
	// void NodeInfo_free(struct LDKNodeInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_free")] public static extern void NodeInfoFree(long _this_obj);
	// struct LDKCVec_u64Z NodeInfo_get_channels(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_channels")] public static extern long NodeInfoGetChannels(long _this_ptr);
	// void NodeInfo_set_channels(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_channels")] public static extern void NodeInfoSetChannels(long _this_ptr, long _val);
	// struct LDKNodeAnnouncementInfo NodeInfo_get_announcement_info(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_announcement_info")] public static extern long NodeInfoGetAnnouncementInfo(long _this_ptr);
	// void NodeInfo_set_announcement_info(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKNodeAnnouncementInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_announcement_info")] public static extern void NodeInfoSetAnnouncementInfo(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeInfo NodeInfo_new(struct LDKCVec_u64Z channels_arg, struct LDKNodeAnnouncementInfo announcement_info_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_new")] public static extern long NodeInfoNew(long _channels_arg, long _announcement_info_arg);
	// uint64_t NodeInfo_clone_ptr(LDKNodeInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone_ptr")] public static extern long NodeInfoClonePtr(long _arg);
	// struct LDKNodeInfo NodeInfo_clone(const struct LDKNodeInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone")] public static extern long NodeInfoClone(long _orig);
	// bool NodeInfo_eq(const struct LDKNodeInfo *NONNULL_PTR a, const struct LDKNodeInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_eq")] public static extern bool NodeInfoEq(long _a, long _b);
	// struct LDKCVec_u8Z NodeInfo_write(const struct LDKNodeInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_write")] public static extern long NodeInfoWrite(long _obj);
	// struct LDKCResult_NodeInfoDecodeErrorZ NodeInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_read")] public static extern long NodeInfoRead(long _ser);
	// struct LDKCVec_u8Z NetworkGraph_write(const struct LDKNetworkGraph *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_write")] public static extern long NetworkGraphWrite(long _obj);
	// struct LDKCResult_NetworkGraphDecodeErrorZ NetworkGraph_read(struct LDKu8slice ser, struct LDKLogger arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read")] public static extern long NetworkGraphRead(long _ser, long _arg);
	// MUST_USE_RES struct LDKNetworkGraph NetworkGraph_new(enum LDKNetwork network, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_new")] public static extern long NetworkGraphNew(Network _network, long _logger);
	// MUST_USE_RES struct LDKReadOnlyNetworkGraph NetworkGraph_read_only(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read_only")] public static extern long NetworkGraphReadOnly(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u32Z NetworkGraph_get_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_get_last_rapid_gossip_sync_timestamp")] public static extern long NetworkGraphGetLastRapidGossipSyncTimestamp(long _this_arg);
	// void NetworkGraph_set_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint32_t last_rapid_gossip_sync_timestamp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_set_last_rapid_gossip_sync_timestamp")] public static extern void NetworkGraphSetLastRapidGossipSyncTimestamp(long _this_arg, int _last_rapid_gossip_sync_timestamp);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_announcement")] public static extern long NetworkGraphUpdateNodeFromAnnouncement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_unsigned_announcement")] public static extern long NetworkGraphUpdateNodeFromUnsignedAnnouncement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_announcement")] public static extern long NetworkGraphUpdateChannelFromAnnouncement(long _this_arg, long _msg, long _utxo_lookup);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_announcement_no_lookup(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_announcement_no_lookup")] public static extern long NetworkGraphUpdateChannelFromAnnouncementNoLookup(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_unsigned_announcement")] public static extern long NetworkGraphUpdateChannelFromUnsignedAnnouncement(long _this_arg, long _msg, long _utxo_lookup);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_add_channel_from_partial_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id, uint64_t timestamp, struct LDKChannelFeatures features, struct LDKPublicKey node_id_1, struct LDKPublicKey node_id_2);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_add_channel_from_partial_announcement")] public static extern long NetworkGraphAddChannelFromPartialAnnouncement(long _this_arg, long _short_channel_id, long _timestamp, long _features, long _node_id_1, long _node_id_2);
	// void NetworkGraph_channel_failed_permanent(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_channel_failed_permanent")] public static extern void NetworkGraphChannelFailedPermanent(long _this_arg, long _short_channel_id);
	// void NetworkGraph_node_failed_permanent(const struct LDKNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_node_failed_permanent")] public static extern void NetworkGraphNodeFailedPermanent(long _this_arg, long _node_id);
	// void NetworkGraph_remove_stale_channels_and_tracking(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking")] public static extern void NetworkGraphRemoveStaleChannelsAndTracking(long _this_arg);
	// void NetworkGraph_remove_stale_channels_and_tracking_with_time(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t current_time_unix);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking_with_time")] public static extern void NetworkGraphRemoveStaleChannelsAndTrackingWithTime(long _this_arg, long _current_time_unix);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel")] public static extern long NetworkGraphUpdateChannel(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_unsigned(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_unsigned")] public static extern long NetworkGraphUpdateChannelUnsigned(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_verify_channel_update(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_verify_channel_update")] public static extern long NetworkGraphVerifyChannelUpdate(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKChannelInfo ReadOnlyNetworkGraph_channel(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_channel")] public static extern long ReadOnlyNetworkGraphChannel(long _this_arg, long _short_channel_id);
	// MUST_USE_RES struct LDKCVec_u64Z ReadOnlyNetworkGraph_list_channels(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_channels")] public static extern long ReadOnlyNetworkGraphListChannels(long _this_arg);
	// MUST_USE_RES struct LDKNodeInfo ReadOnlyNetworkGraph_node(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_node")] public static extern long ReadOnlyNetworkGraphNode(long _this_arg, long _node_id);
	// MUST_USE_RES struct LDKCVec_NodeIdZ ReadOnlyNetworkGraph_list_nodes(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_nodes")] public static extern long ReadOnlyNetworkGraphListNodes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_SocketAddressZZ ReadOnlyNetworkGraph_get_addresses(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_get_addresses")] public static extern long ReadOnlyNetworkGraphGetAddresses(long _this_arg, long _pubkey);
	// void DefaultRouter_free(struct LDKDefaultRouter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_free")] public static extern void DefaultRouterFree(long _this_obj);
	// MUST_USE_RES struct LDKDefaultRouter DefaultRouter_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, struct LDKEntropySource entropy_source, struct LDKLockableScore scorer, struct LDKProbabilisticScoringFeeParameters score_params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_new")] public static extern long DefaultRouterNew(long _network_graph, long _logger, long _entropy_source, long _scorer, long _score_params);
	// struct LDKRouter DefaultRouter_as_Router(const struct LDKDefaultRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_as_Router")] public static extern long DefaultRouterAsRouter(long _this_arg);
	// struct LDKMessageRouter DefaultRouter_as_MessageRouter(const struct LDKDefaultRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_as_MessageRouter")] public static extern long DefaultRouterAsMessageRouter(long _this_arg);
	// void Router_free(struct LDKRouter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_free")] public static extern void RouterFree(long _this_ptr);
	// void ScorerAccountingForInFlightHtlcs_free(struct LDKScorerAccountingForInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_free")] public static extern void ScorerAccountingForInFlightHtlcsFree(long _this_obj);
	// MUST_USE_RES struct LDKScorerAccountingForInFlightHtlcs ScorerAccountingForInFlightHtlcs_new(struct LDKScoreLookUp scorer, const struct LDKInFlightHtlcs *NONNULL_PTR inflight_htlcs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_new")] public static extern long ScorerAccountingForInFlightHtlcsNew(long _scorer, long _inflight_htlcs);
	// struct LDKScoreLookUp ScorerAccountingForInFlightHtlcs_as_ScoreLookUp(const struct LDKScorerAccountingForInFlightHtlcs *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_as_ScoreLookUp")] public static extern long ScorerAccountingForInFlightHtlcsAsScoreLookUp(long _this_arg);
	// void InFlightHtlcs_free(struct LDKInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_free")] public static extern void InFlightHtlcsFree(long _this_obj);
	// uint64_t InFlightHtlcs_clone_ptr(LDKInFlightHtlcs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone_ptr")] public static extern long InFlightHtlcsClonePtr(long _arg);
	// struct LDKInFlightHtlcs InFlightHtlcs_clone(const struct LDKInFlightHtlcs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone")] public static extern long InFlightHtlcsClone(long _orig);
	// MUST_USE_RES struct LDKInFlightHtlcs InFlightHtlcs_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_new")] public static extern long InFlightHtlcsNew();
	// void InFlightHtlcs_process_path(struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, struct LDKPublicKey payer_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_process_path")] public static extern void InFlightHtlcsProcessPath(long _this_arg, long _path, long _payer_node_id);
	// void InFlightHtlcs_add_inflight_htlc(struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, uint64_t channel_scid, uint64_t used_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_add_inflight_htlc")] public static extern void InFlightHtlcsAddInflightHtlc(long _this_arg, long _source, long _target, long _channel_scid, long _used_msat);
	// MUST_USE_RES struct LDKCOption_u64Z InFlightHtlcs_used_liquidity_msat(const struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, uint64_t channel_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_used_liquidity_msat")] public static extern long InFlightHtlcsUsedLiquidityMsat(long _this_arg, long _source, long _target, long _channel_scid);
	// struct LDKCVec_u8Z InFlightHtlcs_write(const struct LDKInFlightHtlcs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_write")] public static extern long InFlightHtlcsWrite(long _obj);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ InFlightHtlcs_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_read")] public static extern long InFlightHtlcsRead(long _ser);
	// void RouteHop_free(struct LDKRouteHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_free")] public static extern void RouteHopFree(long _this_obj);
	// struct LDKPublicKey RouteHop_get_pubkey(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_pubkey")] public static extern long RouteHopGetPubkey(long _this_ptr);
	// void RouteHop_set_pubkey(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_pubkey")] public static extern void RouteHopSetPubkey(long _this_ptr, long _val);
	// struct LDKNodeFeatures RouteHop_get_node_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_node_features")] public static extern long RouteHopGetNodeFeatures(long _this_ptr);
	// void RouteHop_set_node_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_node_features")] public static extern void RouteHopSetNodeFeatures(long _this_ptr, long _val);
	// uint64_t RouteHop_get_short_channel_id(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_short_channel_id")] public static extern long RouteHopGetShortChannelId(long _this_ptr);
	// void RouteHop_set_short_channel_id(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_short_channel_id")] public static extern void RouteHopSetShortChannelId(long _this_ptr, long _val);
	// struct LDKChannelFeatures RouteHop_get_channel_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_channel_features")] public static extern long RouteHopGetChannelFeatures(long _this_ptr);
	// void RouteHop_set_channel_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_channel_features")] public static extern void RouteHopSetChannelFeatures(long _this_ptr, long _val);
	// uint64_t RouteHop_get_fee_msat(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_fee_msat")] public static extern long RouteHopGetFeeMsat(long _this_ptr);
	// void RouteHop_set_fee_msat(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_fee_msat")] public static extern void RouteHopSetFeeMsat(long _this_ptr, long _val);
	// uint32_t RouteHop_get_cltv_expiry_delta(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_cltv_expiry_delta")] public static extern int RouteHopGetCltvExpiryDelta(long _this_ptr);
	// void RouteHop_set_cltv_expiry_delta(struct LDKRouteHop *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_cltv_expiry_delta")] public static extern void RouteHopSetCltvExpiryDelta(long _this_ptr, int _val);
	// bool RouteHop_get_maybe_announced_channel(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_maybe_announced_channel")] public static extern bool RouteHopGetMaybeAnnouncedChannel(long _this_ptr);
	// void RouteHop_set_maybe_announced_channel(struct LDKRouteHop *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_maybe_announced_channel")] public static extern void RouteHopSetMaybeAnnouncedChannel(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKRouteHop RouteHop_new(struct LDKPublicKey pubkey_arg, struct LDKNodeFeatures node_features_arg, uint64_t short_channel_id_arg, struct LDKChannelFeatures channel_features_arg, uint64_t fee_msat_arg, uint32_t cltv_expiry_delta_arg, bool maybe_announced_channel_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_new")] public static extern long RouteHopNew(long _pubkey_arg, long _node_features_arg, long _short_channel_id_arg, long _channel_features_arg, long _fee_msat_arg, int _cltv_expiry_delta_arg, bool _maybe_announced_channel_arg);
	// uint64_t RouteHop_clone_ptr(LDKRouteHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone_ptr")] public static extern long RouteHopClonePtr(long _arg);
	// struct LDKRouteHop RouteHop_clone(const struct LDKRouteHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone")] public static extern long RouteHopClone(long _orig);
	// uint64_t RouteHop_hash(const struct LDKRouteHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_hash")] public static extern long RouteHopHash(long _o);
	// bool RouteHop_eq(const struct LDKRouteHop *NONNULL_PTR a, const struct LDKRouteHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_eq")] public static extern bool RouteHopEq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHop_write(const struct LDKRouteHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_write")] public static extern long RouteHopWrite(long _obj);
	// struct LDKCResult_RouteHopDecodeErrorZ RouteHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_read")] public static extern long RouteHopRead(long _ser);
	// void BlindedTail_free(struct LDKBlindedTail this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_free")] public static extern void BlindedTailFree(long _this_obj);
	// struct LDKCVec_BlindedHopZ BlindedTail_get_hops(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_hops")] public static extern long BlindedTailGetHops(long _this_ptr);
	// void BlindedTail_set_hops(struct LDKBlindedTail *NONNULL_PTR this_ptr, struct LDKCVec_BlindedHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_hops")] public static extern void BlindedTailSetHops(long _this_ptr, long _val);
	// struct LDKPublicKey BlindedTail_get_blinding_point(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_blinding_point")] public static extern long BlindedTailGetBlindingPoint(long _this_ptr);
	// void BlindedTail_set_blinding_point(struct LDKBlindedTail *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_blinding_point")] public static extern void BlindedTailSetBlindingPoint(long _this_ptr, long _val);
	// uint32_t BlindedTail_get_excess_final_cltv_expiry_delta(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_excess_final_cltv_expiry_delta")] public static extern int BlindedTailGetExcessFinalCltvExpiryDelta(long _this_ptr);
	// void BlindedTail_set_excess_final_cltv_expiry_delta(struct LDKBlindedTail *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_excess_final_cltv_expiry_delta")] public static extern void BlindedTailSetExcessFinalCltvExpiryDelta(long _this_ptr, int _val);
	// uint64_t BlindedTail_get_final_value_msat(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_final_value_msat")] public static extern long BlindedTailGetFinalValueMsat(long _this_ptr);
	// void BlindedTail_set_final_value_msat(struct LDKBlindedTail *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_final_value_msat")] public static extern void BlindedTailSetFinalValueMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedTail BlindedTail_new(struct LDKCVec_BlindedHopZ hops_arg, struct LDKPublicKey blinding_point_arg, uint32_t excess_final_cltv_expiry_delta_arg, uint64_t final_value_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_new")] public static extern long BlindedTailNew(long _hops_arg, long _blinding_point_arg, int _excess_final_cltv_expiry_delta_arg, long _final_value_msat_arg);
	// uint64_t BlindedTail_clone_ptr(LDKBlindedTail *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_clone_ptr")] public static extern long BlindedTailClonePtr(long _arg);
	// struct LDKBlindedTail BlindedTail_clone(const struct LDKBlindedTail *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_clone")] public static extern long BlindedTailClone(long _orig);
	// uint64_t BlindedTail_hash(const struct LDKBlindedTail *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_hash")] public static extern long BlindedTailHash(long _o);
	// bool BlindedTail_eq(const struct LDKBlindedTail *NONNULL_PTR a, const struct LDKBlindedTail *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_eq")] public static extern bool BlindedTailEq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedTail_write(const struct LDKBlindedTail *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_write")] public static extern long BlindedTailWrite(long _obj);
	// struct LDKCResult_BlindedTailDecodeErrorZ BlindedTail_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_read")] public static extern long BlindedTailRead(long _ser);
	// void Path_free(struct LDKPath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_free")] public static extern void PathFree(long _this_obj);
	// struct LDKCVec_RouteHopZ Path_get_hops(const struct LDKPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_get_hops")] public static extern long PathGetHops(long _this_ptr);
	// void Path_set_hops(struct LDKPath *NONNULL_PTR this_ptr, struct LDKCVec_RouteHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_set_hops")] public static extern void PathSetHops(long _this_ptr, long _val);
	// struct LDKBlindedTail Path_get_blinded_tail(const struct LDKPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_get_blinded_tail")] public static extern long PathGetBlindedTail(long _this_ptr);
	// void Path_set_blinded_tail(struct LDKPath *NONNULL_PTR this_ptr, struct LDKBlindedTail val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_set_blinded_tail")] public static extern void PathSetBlindedTail(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPath Path_new(struct LDKCVec_RouteHopZ hops_arg, struct LDKBlindedTail blinded_tail_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_new")] public static extern long PathNew(long _hops_arg, long _blinded_tail_arg);
	// uint64_t Path_clone_ptr(LDKPath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_clone_ptr")] public static extern long PathClonePtr(long _arg);
	// struct LDKPath Path_clone(const struct LDKPath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_clone")] public static extern long PathClone(long _orig);
	// uint64_t Path_hash(const struct LDKPath *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_hash")] public static extern long PathHash(long _o);
	// bool Path_eq(const struct LDKPath *NONNULL_PTR a, const struct LDKPath *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_eq")] public static extern bool PathEq(long _a, long _b);
	// MUST_USE_RES uint64_t Path_fee_msat(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_fee_msat")] public static extern long PathFeeMsat(long _this_arg);
	// MUST_USE_RES uint64_t Path_final_value_msat(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_final_value_msat")] public static extern long PathFinalValueMsat(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u32Z Path_final_cltv_expiry_delta(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_final_cltv_expiry_delta")] public static extern long PathFinalCltvExpiryDelta(long _this_arg);
	// void Route_free(struct LDKRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_free")] public static extern void RouteFree(long _this_obj);
	// struct LDKCVec_PathZ Route_get_paths(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_paths")] public static extern long RouteGetPaths(long _this_ptr);
	// void Route_set_paths(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKCVec_PathZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_paths")] public static extern void RouteSetPaths(long _this_ptr, long _val);
	// struct LDKRouteParameters Route_get_route_params(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_route_params")] public static extern long RouteGetRouteParams(long _this_ptr);
	// void Route_set_route_params(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKRouteParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_route_params")] public static extern void RouteSetRouteParams(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRoute Route_new(struct LDKCVec_PathZ paths_arg, struct LDKRouteParameters route_params_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_new")] public static extern long RouteNew(long _paths_arg, long _route_params_arg);
	// uint64_t Route_clone_ptr(LDKRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone_ptr")] public static extern long RouteClonePtr(long _arg);
	// struct LDKRoute Route_clone(const struct LDKRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone")] public static extern long RouteClone(long _orig);
	// uint64_t Route_hash(const struct LDKRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_hash")] public static extern long RouteHash(long _o);
	// bool Route_eq(const struct LDKRoute *NONNULL_PTR a, const struct LDKRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_eq")] public static extern bool RouteEq(long _a, long _b);
	// MUST_USE_RES uint64_t Route_get_total_fees(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_fees")] public static extern long RouteGetTotalFees(long _this_arg);
	// MUST_USE_RES uint64_t Route_get_total_amount(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_amount")] public static extern long RouteGetTotalAmount(long _this_arg);
	// struct LDKCVec_u8Z Route_write(const struct LDKRoute *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_write")] public static extern long RouteWrite(long _obj);
	// struct LDKCResult_RouteDecodeErrorZ Route_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_read")] public static extern long RouteRead(long _ser);
	// void RouteParameters_free(struct LDKRouteParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_free")] public static extern void RouteParametersFree(long _this_obj);
	// struct LDKPaymentParameters RouteParameters_get_payment_params(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_payment_params")] public static extern long RouteParametersGetPaymentParams(long _this_ptr);
	// void RouteParameters_set_payment_params(struct LDKRouteParameters *NONNULL_PTR this_ptr, struct LDKPaymentParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_payment_params")] public static extern void RouteParametersSetPaymentParams(long _this_ptr, long _val);
	// uint64_t RouteParameters_get_final_value_msat(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_final_value_msat")] public static extern long RouteParametersGetFinalValueMsat(long _this_ptr);
	// void RouteParameters_set_final_value_msat(struct LDKRouteParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_final_value_msat")] public static extern void RouteParametersSetFinalValueMsat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z RouteParameters_get_max_total_routing_fee_msat(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_max_total_routing_fee_msat")] public static extern long RouteParametersGetMaxTotalRoutingFeeMsat(long _this_ptr);
	// void RouteParameters_set_max_total_routing_fee_msat(struct LDKRouteParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_max_total_routing_fee_msat")] public static extern void RouteParametersSetMaxTotalRoutingFeeMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteParameters RouteParameters_new(struct LDKPaymentParameters payment_params_arg, uint64_t final_value_msat_arg, struct LDKCOption_u64Z max_total_routing_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_new")] public static extern long RouteParametersNew(long _payment_params_arg, long _final_value_msat_arg, long _max_total_routing_fee_msat_arg);
	// uint64_t RouteParameters_clone_ptr(LDKRouteParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone_ptr")] public static extern long RouteParametersClonePtr(long _arg);
	// struct LDKRouteParameters RouteParameters_clone(const struct LDKRouteParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone")] public static extern long RouteParametersClone(long _orig);
	// uint64_t RouteParameters_hash(const struct LDKRouteParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_hash")] public static extern long RouteParametersHash(long _o);
	// bool RouteParameters_eq(const struct LDKRouteParameters *NONNULL_PTR a, const struct LDKRouteParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_eq")] public static extern bool RouteParametersEq(long _a, long _b);
	// MUST_USE_RES struct LDKRouteParameters RouteParameters_from_payment_params_and_value(struct LDKPaymentParameters payment_params, uint64_t final_value_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_from_payment_params_and_value")] public static extern long RouteParametersFromPaymentParamsAndValue(long _payment_params, long _final_value_msat);
	// struct LDKCVec_u8Z RouteParameters_write(const struct LDKRouteParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_write")] public static extern long RouteParametersWrite(long _obj);
	// struct LDKCResult_RouteParametersDecodeErrorZ RouteParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_read")] public static extern long RouteParametersRead(long _ser);
	// void PaymentParameters_free(struct LDKPaymentParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_free")] public static extern void PaymentParametersFree(long _this_obj);
	// struct LDKPayee PaymentParameters_get_payee(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_payee")] public static extern long PaymentParametersGetPayee(long _this_ptr);
	// void PaymentParameters_set_payee(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKPayee val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_payee")] public static extern void PaymentParametersSetPayee(long _this_ptr, long _val);
	// struct LDKCOption_u64Z PaymentParameters_get_expiry_time(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_expiry_time")] public static extern long PaymentParametersGetExpiryTime(long _this_ptr);
	// void PaymentParameters_set_expiry_time(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_expiry_time")] public static extern void PaymentParametersSetExpiryTime(long _this_ptr, long _val);
	// uint32_t PaymentParameters_get_max_total_cltv_expiry_delta(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_total_cltv_expiry_delta")] public static extern int PaymentParametersGetMaxTotalCltvExpiryDelta(long _this_ptr);
	// void PaymentParameters_set_max_total_cltv_expiry_delta(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_total_cltv_expiry_delta")] public static extern void PaymentParametersSetMaxTotalCltvExpiryDelta(long _this_ptr, int _val);
	// uint8_t PaymentParameters_get_max_path_count(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_path_count")] public static extern byte PaymentParametersGetMaxPathCount(long _this_ptr);
	// void PaymentParameters_set_max_path_count(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_path_count")] public static extern void PaymentParametersSetMaxPathCount(long _this_ptr, byte _val);
	// uint8_t PaymentParameters_get_max_channel_saturation_power_of_half(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_channel_saturation_power_of_half")] public static extern byte PaymentParametersGetMaxChannelSaturationPowerOfHalf(long _this_ptr);
	// void PaymentParameters_set_max_channel_saturation_power_of_half(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_channel_saturation_power_of_half")] public static extern void PaymentParametersSetMaxChannelSaturationPowerOfHalf(long _this_ptr, byte _val);
	// struct LDKCVec_u64Z PaymentParameters_get_previously_failed_channels(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_previously_failed_channels")] public static extern long PaymentParametersGetPreviouslyFailedChannels(long _this_ptr);
	// void PaymentParameters_set_previously_failed_channels(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_previously_failed_channels")] public static extern void PaymentParametersSetPreviouslyFailedChannels(long _this_ptr, long _val);
	// struct LDKCVec_u64Z PaymentParameters_get_previously_failed_blinded_path_idxs(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_previously_failed_blinded_path_idxs")] public static extern long PaymentParametersGetPreviouslyFailedBlindedPathIdxs(long _this_ptr);
	// void PaymentParameters_set_previously_failed_blinded_path_idxs(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_previously_failed_blinded_path_idxs")] public static extern void PaymentParametersSetPreviouslyFailedBlindedPathIdxs(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_new(struct LDKPayee payee_arg, struct LDKCOption_u64Z expiry_time_arg, uint32_t max_total_cltv_expiry_delta_arg, uint8_t max_path_count_arg, uint8_t max_channel_saturation_power_of_half_arg, struct LDKCVec_u64Z previously_failed_channels_arg, struct LDKCVec_u64Z previously_failed_blinded_path_idxs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_new")] public static extern long PaymentParametersNew(long _payee_arg, long _expiry_time_arg, int _max_total_cltv_expiry_delta_arg, byte _max_path_count_arg, byte _max_channel_saturation_power_of_half_arg, long _previously_failed_channels_arg, long _previously_failed_blinded_path_idxs_arg);
	// uint64_t PaymentParameters_clone_ptr(LDKPaymentParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone_ptr")] public static extern long PaymentParametersClonePtr(long _arg);
	// struct LDKPaymentParameters PaymentParameters_clone(const struct LDKPaymentParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone")] public static extern long PaymentParametersClone(long _orig);
	// uint64_t PaymentParameters_hash(const struct LDKPaymentParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_hash")] public static extern long PaymentParametersHash(long _o);
	// bool PaymentParameters_eq(const struct LDKPaymentParameters *NONNULL_PTR a, const struct LDKPaymentParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_eq")] public static extern bool PaymentParametersEq(long _a, long _b);
	// struct LDKCVec_u8Z PaymentParameters_write(const struct LDKPaymentParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_write")] public static extern long PaymentParametersWrite(long _obj);
	// struct LDKCResult_PaymentParametersDecodeErrorZ PaymentParameters_read(struct LDKu8slice ser, uint32_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_read")] public static extern long PaymentParametersRead(long _ser, int _arg);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_from_node_id(struct LDKPublicKey payee_pubkey, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_from_node_id")] public static extern long PaymentParametersFromNodeId(long _payee_pubkey, int _final_cltv_expiry_delta);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_for_keysend(struct LDKPublicKey payee_pubkey, uint32_t final_cltv_expiry_delta, bool allow_mpp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_for_keysend")] public static extern long PaymentParametersForKeysend(long _payee_pubkey, int _final_cltv_expiry_delta, bool _allow_mpp);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_from_bolt12_invoice(const struct LDKBolt12Invoice *NONNULL_PTR invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_from_bolt12_invoice")] public static extern long PaymentParametersFromBolt12Invoice(long _invoice);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_blinded(struct LDKCVec_C2Tuple_BlindedPayInfoBlindedPathZZ blinded_route_hints);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_blinded")] public static extern long PaymentParametersBlinded(long _blinded_route_hints);
	// void Payee_free(struct LDKPayee this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_free")] public static extern void PayeeFree(long _this_ptr);
	// uint64_t Payee_clone_ptr(LDKPayee *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clone_ptr")] public static extern long PayeeClonePtr(long _arg);
	// struct LDKPayee Payee_clone(const struct LDKPayee *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clone")] public static extern long PayeeClone(long _orig);
	// struct LDKPayee Payee_blinded(struct LDKCVec_C2Tuple_BlindedPayInfoBlindedPathZZ route_hints, struct LDKBolt12InvoiceFeatures features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_blinded")] public static extern long PayeeBlinded(long _route_hints, long _features);
	// struct LDKPayee Payee_clear(struct LDKPublicKey node_id, struct LDKCVec_RouteHintZ route_hints, struct LDKBolt11InvoiceFeatures features, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clear")] public static extern long PayeeClear(long _node_id, long _route_hints, long _features, int _final_cltv_expiry_delta);
	// uint64_t Payee_hash(const struct LDKPayee *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_hash")] public static extern long PayeeHash(long _o);
	// bool Payee_eq(const struct LDKPayee *NONNULL_PTR a, const struct LDKPayee *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_eq")] public static extern bool PayeeEq(long _a, long _b);
	// void RouteHint_free(struct LDKRouteHint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_free")] public static extern void RouteHintFree(long _this_obj);
	// struct LDKCVec_RouteHintHopZ RouteHint_get_a(const struct LDKRouteHint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_get_a")] public static extern long RouteHintGetA(long _this_ptr);
	// void RouteHint_set_a(struct LDKRouteHint *NONNULL_PTR this_ptr, struct LDKCVec_RouteHintHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_set_a")] public static extern void RouteHintSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteHint RouteHint_new(struct LDKCVec_RouteHintHopZ a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_new")] public static extern long RouteHintNew(long _a_arg);
	// uint64_t RouteHint_clone_ptr(LDKRouteHint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone_ptr")] public static extern long RouteHintClonePtr(long _arg);
	// struct LDKRouteHint RouteHint_clone(const struct LDKRouteHint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone")] public static extern long RouteHintClone(long _orig);
	// uint64_t RouteHint_hash(const struct LDKRouteHint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_hash")] public static extern long RouteHintHash(long _o);
	// bool RouteHint_eq(const struct LDKRouteHint *NONNULL_PTR a, const struct LDKRouteHint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_eq")] public static extern bool RouteHintEq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHint_write(const struct LDKRouteHint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_write")] public static extern long RouteHintWrite(long _obj);
	// struct LDKCResult_RouteHintDecodeErrorZ RouteHint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_read")] public static extern long RouteHintRead(long _ser);
	// void RouteHintHop_free(struct LDKRouteHintHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_free")] public static extern void RouteHintHopFree(long _this_obj);
	// struct LDKPublicKey RouteHintHop_get_src_node_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_src_node_id")] public static extern long RouteHintHopGetSrcNodeId(long _this_ptr);
	// void RouteHintHop_set_src_node_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_src_node_id")] public static extern void RouteHintHopSetSrcNodeId(long _this_ptr, long _val);
	// uint64_t RouteHintHop_get_short_channel_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_short_channel_id")] public static extern long RouteHintHopGetShortChannelId(long _this_ptr);
	// void RouteHintHop_set_short_channel_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_short_channel_id")] public static extern void RouteHintHopSetShortChannelId(long _this_ptr, long _val);
	// struct LDKRoutingFees RouteHintHop_get_fees(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_fees")] public static extern long RouteHintHopGetFees(long _this_ptr);
	// void RouteHintHop_set_fees(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_fees")] public static extern void RouteHintHopSetFees(long _this_ptr, long _val);
	// uint16_t RouteHintHop_get_cltv_expiry_delta(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_cltv_expiry_delta")] public static extern short RouteHintHopGetCltvExpiryDelta(long _this_ptr);
	// void RouteHintHop_set_cltv_expiry_delta(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_cltv_expiry_delta")] public static extern void RouteHintHopSetCltvExpiryDelta(long _this_ptr, short _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_minimum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_minimum_msat")] public static extern long RouteHintHopGetHtlcMinimumMsat(long _this_ptr);
	// void RouteHintHop_set_htlc_minimum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_minimum_msat")] public static extern void RouteHintHopSetHtlcMinimumMsat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_maximum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_maximum_msat")] public static extern long RouteHintHopGetHtlcMaximumMsat(long _this_ptr);
	// void RouteHintHop_set_htlc_maximum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_maximum_msat")] public static extern void RouteHintHopSetHtlcMaximumMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteHintHop RouteHintHop_new(struct LDKPublicKey src_node_id_arg, uint64_t short_channel_id_arg, struct LDKRoutingFees fees_arg, uint16_t cltv_expiry_delta_arg, struct LDKCOption_u64Z htlc_minimum_msat_arg, struct LDKCOption_u64Z htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_new")] public static extern long RouteHintHopNew(long _src_node_id_arg, long _short_channel_id_arg, long _fees_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg);
	// uint64_t RouteHintHop_clone_ptr(LDKRouteHintHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone_ptr")] public static extern long RouteHintHopClonePtr(long _arg);
	// struct LDKRouteHintHop RouteHintHop_clone(const struct LDKRouteHintHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone")] public static extern long RouteHintHopClone(long _orig);
	// uint64_t RouteHintHop_hash(const struct LDKRouteHintHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_hash")] public static extern long RouteHintHopHash(long _o);
	// bool RouteHintHop_eq(const struct LDKRouteHintHop *NONNULL_PTR a, const struct LDKRouteHintHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_eq")] public static extern bool RouteHintHopEq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHintHop_write(const struct LDKRouteHintHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_write")] public static extern long RouteHintHopWrite(long _obj);
	// struct LDKCResult_RouteHintHopDecodeErrorZ RouteHintHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_read")] public static extern long RouteHintHopRead(long _ser);
	// void FirstHopCandidate_free(struct LDKFirstHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_free")] public static extern void FirstHopCandidateFree(long _this_obj);
	// uint64_t FirstHopCandidate_clone_ptr(LDKFirstHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_clone_ptr")] public static extern long FirstHopCandidateClonePtr(long _arg);
	// struct LDKFirstHopCandidate FirstHopCandidate_clone(const struct LDKFirstHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_clone")] public static extern long FirstHopCandidateClone(long _orig);
	// void PublicHopCandidate_free(struct LDKPublicHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_free")] public static extern void PublicHopCandidateFree(long _this_obj);
	// uint64_t PublicHopCandidate_get_short_channel_id(const struct LDKPublicHopCandidate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_get_short_channel_id")] public static extern long PublicHopCandidateGetShortChannelId(long _this_ptr);
	// void PublicHopCandidate_set_short_channel_id(struct LDKPublicHopCandidate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_set_short_channel_id")] public static extern void PublicHopCandidateSetShortChannelId(long _this_ptr, long _val);
	// uint64_t PublicHopCandidate_clone_ptr(LDKPublicHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_clone_ptr")] public static extern long PublicHopCandidateClonePtr(long _arg);
	// struct LDKPublicHopCandidate PublicHopCandidate_clone(const struct LDKPublicHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_clone")] public static extern long PublicHopCandidateClone(long _orig);
	// void PrivateHopCandidate_free(struct LDKPrivateHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_free")] public static extern void PrivateHopCandidateFree(long _this_obj);
	// uint64_t PrivateHopCandidate_clone_ptr(LDKPrivateHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_clone_ptr")] public static extern long PrivateHopCandidateClonePtr(long _arg);
	// struct LDKPrivateHopCandidate PrivateHopCandidate_clone(const struct LDKPrivateHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_clone")] public static extern long PrivateHopCandidateClone(long _orig);
	// void BlindedPathCandidate_free(struct LDKBlindedPathCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_free")] public static extern void BlindedPathCandidateFree(long _this_obj);
	// uint64_t BlindedPathCandidate_clone_ptr(LDKBlindedPathCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_clone_ptr")] public static extern long BlindedPathCandidateClonePtr(long _arg);
	// struct LDKBlindedPathCandidate BlindedPathCandidate_clone(const struct LDKBlindedPathCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_clone")] public static extern long BlindedPathCandidateClone(long _orig);
	// void OneHopBlindedPathCandidate_free(struct LDKOneHopBlindedPathCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_free")] public static extern void OneHopBlindedPathCandidateFree(long _this_obj);
	// uint64_t OneHopBlindedPathCandidate_clone_ptr(LDKOneHopBlindedPathCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_clone_ptr")] public static extern long OneHopBlindedPathCandidateClonePtr(long _arg);
	// struct LDKOneHopBlindedPathCandidate OneHopBlindedPathCandidate_clone(const struct LDKOneHopBlindedPathCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_clone")] public static extern long OneHopBlindedPathCandidateClone(long _orig);
	// void CandidateRouteHop_free(struct LDKCandidateRouteHop this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_free")] public static extern void CandidateRouteHopFree(long _this_ptr);
	// uint64_t CandidateRouteHop_clone_ptr(LDKCandidateRouteHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_clone_ptr")] public static extern long CandidateRouteHopClonePtr(long _arg);
	// struct LDKCandidateRouteHop CandidateRouteHop_clone(const struct LDKCandidateRouteHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_clone")] public static extern long CandidateRouteHopClone(long _orig);
	// struct LDKCandidateRouteHop CandidateRouteHop_first_hop(struct LDKFirstHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_first_hop")] public static extern long CandidateRouteHopFirstHop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_public_hop(struct LDKPublicHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_public_hop")] public static extern long CandidateRouteHopPublicHop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_private_hop(struct LDKPrivateHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_private_hop")] public static extern long CandidateRouteHopPrivateHop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_blinded(struct LDKBlindedPathCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_blinded")] public static extern long CandidateRouteHopBlinded(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_one_hop_blinded(struct LDKOneHopBlindedPathCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_one_hop_blinded")] public static extern long CandidateRouteHopOneHopBlinded(long _a);
	// MUST_USE_RES struct LDKCOption_u64Z CandidateRouteHop_globally_unique_short_channel_id(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_globally_unique_short_channel_id")] public static extern long CandidateRouteHopGloballyUniqueShortChannelId(long _this_arg);
	// MUST_USE_RES uint32_t CandidateRouteHop_cltv_expiry_delta(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_cltv_expiry_delta")] public static extern int CandidateRouteHopCltvExpiryDelta(long _this_arg);
	// MUST_USE_RES uint64_t CandidateRouteHop_htlc_minimum_msat(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_htlc_minimum_msat")] public static extern long CandidateRouteHopHtlcMinimumMsat(long _this_arg);
	// MUST_USE_RES struct LDKRoutingFees CandidateRouteHop_fees(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_fees")] public static extern long CandidateRouteHopFees(long _this_arg);
	// MUST_USE_RES struct LDKNodeId CandidateRouteHop_source(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_source")] public static extern long CandidateRouteHopSource(long _this_arg);
	// MUST_USE_RES struct LDKNodeId CandidateRouteHop_target(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_target")] public static extern long CandidateRouteHopTarget(long _this_arg);
	// struct LDKCResult_RouteLightningErrorZ find_route(struct LDKPublicKey our_node_pubkey, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKLogger logger, const struct LDKScoreLookUp *NONNULL_PTR scorer, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR score_params, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_find_route")] public static extern long FindRoute(long _our_node_pubkey, long _route_params, long _network_graph, long _first_hops, long _logger, long _scorer, long _score_params, long _random_seed_bytes);
	// struct LDKCResult_RouteLightningErrorZ build_route_from_hops(struct LDKPublicKey our_node_pubkey, struct LDKCVec_PublicKeyZ hops, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_route_from_hops")] public static extern long BuildRouteFromHops(long _our_node_pubkey, long _hops, long _route_params, long _network_graph, long _logger, long _random_seed_bytes);
	// void ScoreLookUp_free(struct LDKScoreLookUp this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreLookUp_free")] public static extern void ScoreLookUpFree(long _this_ptr);
	// void ScoreUpdate_free(struct LDKScoreUpdate this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_free")] public static extern void ScoreUpdateFree(long _this_ptr);
	// void Score_free(struct LDKScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_free")] public static extern void ScoreFree(long _this_ptr);
	// void LockableScore_free(struct LDKLockableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_free")] public static extern void LockableScoreFree(long _this_ptr);
	// void WriteableScore_free(struct LDKWriteableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_free")] public static extern void WriteableScoreFree(long _this_ptr);
	// void MultiThreadedLockableScore_free(struct LDKMultiThreadedLockableScore this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_free")] public static extern void MultiThreadedLockableScoreFree(long _this_obj);
	// struct LDKLockableScore MultiThreadedLockableScore_as_LockableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_LockableScore")] public static extern long MultiThreadedLockableScoreAsLockableScore(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedLockableScore_write(const struct LDKMultiThreadedLockableScore *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_write")] public static extern long MultiThreadedLockableScoreWrite(long _obj);
	// struct LDKWriteableScore MultiThreadedLockableScore_as_WriteableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_WriteableScore")] public static extern long MultiThreadedLockableScoreAsWriteableScore(long _this_arg);
	// MUST_USE_RES struct LDKMultiThreadedLockableScore MultiThreadedLockableScore_new(struct LDKScore score);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_new")] public static extern long MultiThreadedLockableScoreNew(long _score);
	// void MultiThreadedScoreLockRead_free(struct LDKMultiThreadedScoreLockRead this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockRead_free")] public static extern void MultiThreadedScoreLockReadFree(long _this_obj);
	// void MultiThreadedScoreLockWrite_free(struct LDKMultiThreadedScoreLockWrite this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_free")] public static extern void MultiThreadedScoreLockWriteFree(long _this_obj);
	// struct LDKScoreLookUp MultiThreadedScoreLockRead_as_ScoreLookUp(const struct LDKMultiThreadedScoreLockRead *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockRead_as_ScoreLookUp")] public static extern long MultiThreadedScoreLockReadAsScoreLookUp(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedScoreLockWrite_write(const struct LDKMultiThreadedScoreLockWrite *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_write")] public static extern long MultiThreadedScoreLockWriteWrite(long _obj);
	// struct LDKScoreUpdate MultiThreadedScoreLockWrite_as_ScoreUpdate(const struct LDKMultiThreadedScoreLockWrite *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_as_ScoreUpdate")] public static extern long MultiThreadedScoreLockWriteAsScoreUpdate(long _this_arg);
	// void ChannelUsage_free(struct LDKChannelUsage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_free")] public static extern void ChannelUsageFree(long _this_obj);
	// uint64_t ChannelUsage_get_amount_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_amount_msat")] public static extern long ChannelUsageGetAmountMsat(long _this_ptr);
	// void ChannelUsage_set_amount_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_amount_msat")] public static extern void ChannelUsageSetAmountMsat(long _this_ptr, long _val);
	// uint64_t ChannelUsage_get_inflight_htlc_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_inflight_htlc_msat")] public static extern long ChannelUsageGetInflightHtlcMsat(long _this_ptr);
	// void ChannelUsage_set_inflight_htlc_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_inflight_htlc_msat")] public static extern void ChannelUsageSetInflightHtlcMsat(long _this_ptr, long _val);
	// struct LDKEffectiveCapacity ChannelUsage_get_effective_capacity(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_effective_capacity")] public static extern long ChannelUsageGetEffectiveCapacity(long _this_ptr);
	// void ChannelUsage_set_effective_capacity(struct LDKChannelUsage *NONNULL_PTR this_ptr, struct LDKEffectiveCapacity val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_effective_capacity")] public static extern void ChannelUsageSetEffectiveCapacity(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUsage ChannelUsage_new(uint64_t amount_msat_arg, uint64_t inflight_htlc_msat_arg, struct LDKEffectiveCapacity effective_capacity_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_new")] public static extern long ChannelUsageNew(long _amount_msat_arg, long _inflight_htlc_msat_arg, long _effective_capacity_arg);
	// uint64_t ChannelUsage_clone_ptr(LDKChannelUsage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone_ptr")] public static extern long ChannelUsageClonePtr(long _arg);
	// struct LDKChannelUsage ChannelUsage_clone(const struct LDKChannelUsage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone")] public static extern long ChannelUsageClone(long _orig);
	// void FixedPenaltyScorer_free(struct LDKFixedPenaltyScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_free")] public static extern void FixedPenaltyScorerFree(long _this_obj);
	// uint64_t FixedPenaltyScorer_clone_ptr(LDKFixedPenaltyScorer *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone_ptr")] public static extern long FixedPenaltyScorerClonePtr(long _arg);
	// struct LDKFixedPenaltyScorer FixedPenaltyScorer_clone(const struct LDKFixedPenaltyScorer *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone")] public static extern long FixedPenaltyScorerClone(long _orig);
	// MUST_USE_RES struct LDKFixedPenaltyScorer FixedPenaltyScorer_with_penalty(uint64_t penalty_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_with_penalty")] public static extern long FixedPenaltyScorerWithPenalty(long _penalty_msat);
	// struct LDKScoreLookUp FixedPenaltyScorer_as_ScoreLookUp(const struct LDKFixedPenaltyScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_as_ScoreLookUp")] public static extern long FixedPenaltyScorerAsScoreLookUp(long _this_arg);
	// struct LDKScoreUpdate FixedPenaltyScorer_as_ScoreUpdate(const struct LDKFixedPenaltyScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_as_ScoreUpdate")] public static extern long FixedPenaltyScorerAsScoreUpdate(long _this_arg);
	// struct LDKCVec_u8Z FixedPenaltyScorer_write(const struct LDKFixedPenaltyScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_write")] public static extern long FixedPenaltyScorerWrite(long _obj);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ FixedPenaltyScorer_read(struct LDKu8slice ser, uint64_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_read")] public static extern long FixedPenaltyScorerRead(long _ser, long _arg);
	// void ProbabilisticScorer_free(struct LDKProbabilisticScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_free")] public static extern void ProbabilisticScorerFree(long _this_obj);
	// void ProbabilisticScoringFeeParameters_free(struct LDKProbabilisticScoringFeeParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_free")] public static extern void ProbabilisticScoringFeeParametersFree(long _this_obj);
	// uint64_t ProbabilisticScoringFeeParameters_get_base_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_base_penalty_msat")] public static extern long ProbabilisticScoringFeeParametersGetBasePenaltyMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_base_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_base_penalty_msat")] public static extern void ProbabilisticScoringFeeParametersSetBasePenaltyMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_base_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_base_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParametersGetBasePenaltyAmountMultiplierMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_base_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_base_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParametersSetBasePenaltyAmountMultiplierMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringFeeParametersGetLiquidityPenaltyMultiplierMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringFeeParametersSetLiquidityPenaltyMultiplierMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParametersGetLiquidityPenaltyAmountMultiplierMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParametersSetLiquidityPenaltyAmountMultiplierMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringFeeParametersGetHistoricalLiquidityPenaltyMultiplierMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringFeeParametersSetHistoricalLiquidityPenaltyMultiplierMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParametersGetHistoricalLiquidityPenaltyAmountMultiplierMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParametersSetHistoricalLiquidityPenaltyAmountMultiplierMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_anti_probing_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_anti_probing_penalty_msat")] public static extern long ProbabilisticScoringFeeParametersGetAntiProbingPenaltyMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_anti_probing_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_anti_probing_penalty_msat")] public static extern void ProbabilisticScoringFeeParametersSetAntiProbingPenaltyMsat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_considered_impossible_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_considered_impossible_penalty_msat")] public static extern long ProbabilisticScoringFeeParametersGetConsideredImpossiblePenaltyMsat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_considered_impossible_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_considered_impossible_penalty_msat")] public static extern void ProbabilisticScoringFeeParametersSetConsideredImpossiblePenaltyMsat(long _this_ptr, long _val);
	// bool ProbabilisticScoringFeeParameters_get_linear_success_probability(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_linear_success_probability")] public static extern bool ProbabilisticScoringFeeParametersGetLinearSuccessProbability(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_linear_success_probability(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_linear_success_probability")] public static extern void ProbabilisticScoringFeeParametersSetLinearSuccessProbability(long _this_ptr, bool _val);
	// uint64_t ProbabilisticScoringFeeParameters_clone_ptr(LDKProbabilisticScoringFeeParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clone_ptr")] public static extern long ProbabilisticScoringFeeParametersClonePtr(long _arg);
	// struct LDKProbabilisticScoringFeeParameters ProbabilisticScoringFeeParameters_clone(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clone")] public static extern long ProbabilisticScoringFeeParametersClone(long _orig);
	// MUST_USE_RES struct LDKProbabilisticScoringFeeParameters ProbabilisticScoringFeeParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_default")] public static extern long ProbabilisticScoringFeeParametersDefault();
	// void ProbabilisticScoringFeeParameters_add_banned(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_add_banned")] public static extern void ProbabilisticScoringFeeParametersAddBanned(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_add_banned_from_list(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, struct LDKCVec_NodeIdZ node_ids);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_add_banned_from_list")] public static extern void ProbabilisticScoringFeeParametersAddBannedFromList(long _this_arg, long _node_ids);
	// void ProbabilisticScoringFeeParameters_remove_banned(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_remove_banned")] public static extern void ProbabilisticScoringFeeParametersRemoveBanned(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_set_manual_penalty(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id, uint64_t penalty);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_manual_penalty")] public static extern void ProbabilisticScoringFeeParametersSetManualPenalty(long _this_arg, long _node_id, long _penalty);
	// void ProbabilisticScoringFeeParameters_remove_manual_penalty(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_remove_manual_penalty")] public static extern void ProbabilisticScoringFeeParametersRemoveManualPenalty(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_clear_manual_penalties(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clear_manual_penalties")] public static extern void ProbabilisticScoringFeeParametersClearManualPenalties(long _this_arg);
	// void ProbabilisticScoringDecayParameters_free(struct LDKProbabilisticScoringDecayParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_free")] public static extern void ProbabilisticScoringDecayParametersFree(long _this_obj);
	// uint64_t ProbabilisticScoringDecayParameters_get_historical_no_updates_half_life(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_get_historical_no_updates_half_life")] public static extern long ProbabilisticScoringDecayParametersGetHistoricalNoUpdatesHalfLife(long _this_ptr);
	// void ProbabilisticScoringDecayParameters_set_historical_no_updates_half_life(struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_set_historical_no_updates_half_life")] public static extern void ProbabilisticScoringDecayParametersSetHistoricalNoUpdatesHalfLife(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringDecayParameters_get_liquidity_offset_half_life(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_get_liquidity_offset_half_life")] public static extern long ProbabilisticScoringDecayParametersGetLiquidityOffsetHalfLife(long _this_ptr);
	// void ProbabilisticScoringDecayParameters_set_liquidity_offset_half_life(struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_set_liquidity_offset_half_life")] public static extern void ProbabilisticScoringDecayParametersSetLiquidityOffsetHalfLife(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_new(uint64_t historical_no_updates_half_life_arg, uint64_t liquidity_offset_half_life_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_new")] public static extern long ProbabilisticScoringDecayParametersNew(long _historical_no_updates_half_life_arg, long _liquidity_offset_half_life_arg);
	// uint64_t ProbabilisticScoringDecayParameters_clone_ptr(LDKProbabilisticScoringDecayParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_clone_ptr")] public static extern long ProbabilisticScoringDecayParametersClonePtr(long _arg);
	// struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_clone(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_clone")] public static extern long ProbabilisticScoringDecayParametersClone(long _orig);
	// MUST_USE_RES struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_default")] public static extern long ProbabilisticScoringDecayParametersDefault();
	// MUST_USE_RES struct LDKProbabilisticScorer ProbabilisticScorer_new(struct LDKProbabilisticScoringDecayParameters decay_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_new")] public static extern long ProbabilisticScorerNew(long _decay_params, long _network_graph, long _logger);
	// void ProbabilisticScorer_debug_log_liquidity_stats(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_debug_log_liquidity_stats")] public static extern void ProbabilisticScorerDebugLogLiquidityStats(long _this_arg);
	// MUST_USE_RES struct LDKCOption_C2Tuple_u64u64ZZ ProbabilisticScorer_estimated_channel_liquidity_range(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_estimated_channel_liquidity_range")] public static extern long ProbabilisticScorerEstimatedChannelLiquidityRange(long _this_arg, long _scid, long _target);
	// MUST_USE_RES struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ ProbabilisticScorer_historical_estimated_channel_liquidity_probabilities(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_historical_estimated_channel_liquidity_probabilities")] public static extern long ProbabilisticScorerHistoricalEstimatedChannelLiquidityProbabilities(long _this_arg, long _scid, long _target);
	// MUST_USE_RES struct LDKCOption_f64Z ProbabilisticScorer_historical_estimated_payment_success_probability(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target, uint64_t amount_msat, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_historical_estimated_payment_success_probability")] public static extern long ProbabilisticScorerHistoricalEstimatedPaymentSuccessProbability(long _this_arg, long _scid, long _target, long _amount_msat, long _params);
	// struct LDKScoreLookUp ProbabilisticScorer_as_ScoreLookUp(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_ScoreLookUp")] public static extern long ProbabilisticScorerAsScoreLookUp(long _this_arg);
	// struct LDKScoreUpdate ProbabilisticScorer_as_ScoreUpdate(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_ScoreUpdate")] public static extern long ProbabilisticScorerAsScoreUpdate(long _this_arg);
	// struct LDKScore ProbabilisticScorer_as_Score(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_Score")] public static extern long ProbabilisticScorerAsScore(long _this_arg);
	// struct LDKCVec_u8Z ProbabilisticScorer_write(const struct LDKProbabilisticScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_write")] public static extern long ProbabilisticScorerWrite(long _obj);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ ProbabilisticScorer_read(struct LDKu8slice ser, struct LDKProbabilisticScoringDecayParameters arg_a, const struct LDKNetworkGraph *NONNULL_PTR arg_b, struct LDKLogger arg_c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_read")] public static extern long ProbabilisticScorerRead(long _ser, long _arg_a, long _arg_b, long _arg_c);
	// void DelayedPaymentOutputDescriptor_free(struct LDKDelayedPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_free")] public static extern void DelayedPaymentOutputDescriptorFree(long _this_obj);
	// struct LDKOutPoint DelayedPaymentOutputDescriptor_get_outpoint(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_outpoint")] public static extern long DelayedPaymentOutputDescriptorGetOutpoint(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_outpoint(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_outpoint")] public static extern void DelayedPaymentOutputDescriptorSetOutpoint(long _this_ptr, long _val);
	// struct LDKPublicKey DelayedPaymentOutputDescriptor_get_per_commitment_point(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_per_commitment_point")] public static extern long DelayedPaymentOutputDescriptorGetPerCommitmentPoint(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_per_commitment_point(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_per_commitment_point")] public static extern void DelayedPaymentOutputDescriptorSetPerCommitmentPoint(long _this_ptr, long _val);
	// uint16_t DelayedPaymentOutputDescriptor_get_to_self_delay(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_to_self_delay")] public static extern short DelayedPaymentOutputDescriptorGetToSelfDelay(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_to_self_delay(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_to_self_delay")] public static extern void DelayedPaymentOutputDescriptorSetToSelfDelay(long _this_ptr, short _val);
	// struct LDKTxOut DelayedPaymentOutputDescriptor_get_output(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_output")] public static extern long DelayedPaymentOutputDescriptorGetOutput(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_output(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_output")] public static extern void DelayedPaymentOutputDescriptorSetOutput(long _this_ptr, long _val);
	// struct LDKRevocationKey DelayedPaymentOutputDescriptor_get_revocation_pubkey(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_revocation_pubkey")] public static extern long DelayedPaymentOutputDescriptorGetRevocationPubkey(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_revocation_pubkey(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKRevocationKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_revocation_pubkey")] public static extern void DelayedPaymentOutputDescriptorSetRevocationPubkey(long _this_ptr, long _val);
	// const uint8_t (*DelayedPaymentOutputDescriptor_get_channel_keys_id(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_keys_id")] public static extern long DelayedPaymentOutputDescriptorGetChannelKeysId(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_keys_id(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_keys_id")] public static extern void DelayedPaymentOutputDescriptorSetChannelKeysId(long _this_ptr, long _val);
	// uint64_t DelayedPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long DelayedPaymentOutputDescriptorGetChannelValueSatoshis(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void DelayedPaymentOutputDescriptorSetChannelValueSatoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKPublicKey per_commitment_point_arg, uint16_t to_self_delay_arg, struct LDKTxOut output_arg, struct LDKRevocationKey revocation_pubkey_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_new")] public static extern long DelayedPaymentOutputDescriptorNew(long _outpoint_arg, long _per_commitment_point_arg, short _to_self_delay_arg, long _output_arg, long _revocation_pubkey_arg, long _channel_keys_id_arg, long _channel_value_satoshis_arg);
	// uint64_t DelayedPaymentOutputDescriptor_clone_ptr(LDKDelayedPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone_ptr")] public static extern long DelayedPaymentOutputDescriptorClonePtr(long _arg);
	// struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_clone(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone")] public static extern long DelayedPaymentOutputDescriptorClone(long _orig);
	// uint64_t DelayedPaymentOutputDescriptor_hash(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_hash")] public static extern long DelayedPaymentOutputDescriptorHash(long _o);
	// bool DelayedPaymentOutputDescriptor_eq(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_eq")] public static extern bool DelayedPaymentOutputDescriptorEq(long _a, long _b);
	// struct LDKCVec_u8Z DelayedPaymentOutputDescriptor_write(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_write")] public static extern long DelayedPaymentOutputDescriptorWrite(long _obj);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ DelayedPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_read")] public static extern long DelayedPaymentOutputDescriptorRead(long _ser);
	// void StaticPaymentOutputDescriptor_free(struct LDKStaticPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_free")] public static extern void StaticPaymentOutputDescriptorFree(long _this_obj);
	// struct LDKOutPoint StaticPaymentOutputDescriptor_get_outpoint(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_outpoint")] public static extern long StaticPaymentOutputDescriptorGetOutpoint(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_outpoint(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_outpoint")] public static extern void StaticPaymentOutputDescriptorSetOutpoint(long _this_ptr, long _val);
	// struct LDKTxOut StaticPaymentOutputDescriptor_get_output(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_output")] public static extern long StaticPaymentOutputDescriptorGetOutput(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_output(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_output")] public static extern void StaticPaymentOutputDescriptorSetOutput(long _this_ptr, long _val);
	// const uint8_t (*StaticPaymentOutputDescriptor_get_channel_keys_id(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_keys_id")] public static extern long StaticPaymentOutputDescriptorGetChannelKeysId(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_keys_id(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_keys_id")] public static extern void StaticPaymentOutputDescriptorSetChannelKeysId(long _this_ptr, long _val);
	// uint64_t StaticPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long StaticPaymentOutputDescriptorGetChannelValueSatoshis(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void StaticPaymentOutputDescriptorSetChannelValueSatoshis(long _this_ptr, long _val);
	// struct LDKChannelTransactionParameters StaticPaymentOutputDescriptor_get_channel_transaction_parameters(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_transaction_parameters")] public static extern long StaticPaymentOutputDescriptorGetChannelTransactionParameters(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_transaction_parameters(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_transaction_parameters")] public static extern void StaticPaymentOutputDescriptorSetChannelTransactionParameters(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut output_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg, struct LDKChannelTransactionParameters channel_transaction_parameters_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_new")] public static extern long StaticPaymentOutputDescriptorNew(long _outpoint_arg, long _output_arg, long _channel_keys_id_arg, long _channel_value_satoshis_arg, long _channel_transaction_parameters_arg);
	// uint64_t StaticPaymentOutputDescriptor_clone_ptr(LDKStaticPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone_ptr")] public static extern long StaticPaymentOutputDescriptorClonePtr(long _arg);
	// struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_clone(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone")] public static extern long StaticPaymentOutputDescriptorClone(long _orig);
	// uint64_t StaticPaymentOutputDescriptor_hash(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_hash")] public static extern long StaticPaymentOutputDescriptorHash(long _o);
	// bool StaticPaymentOutputDescriptor_eq(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_eq")] public static extern bool StaticPaymentOutputDescriptorEq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ StaticPaymentOutputDescriptor_witness_script(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_witness_script")] public static extern long StaticPaymentOutputDescriptorWitnessScript(long _this_arg);
	// MUST_USE_RES uint64_t StaticPaymentOutputDescriptor_max_witness_length(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_max_witness_length")] public static extern long StaticPaymentOutputDescriptorMaxWitnessLength(long _this_arg);
	// struct LDKCVec_u8Z StaticPaymentOutputDescriptor_write(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_write")] public static extern long StaticPaymentOutputDescriptorWrite(long _obj);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ StaticPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_read")] public static extern long StaticPaymentOutputDescriptorRead(long _ser);
	// void SpendableOutputDescriptor_free(struct LDKSpendableOutputDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_free")] public static extern void SpendableOutputDescriptorFree(long _this_ptr);
	// uint64_t SpendableOutputDescriptor_clone_ptr(LDKSpendableOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone_ptr")] public static extern long SpendableOutputDescriptorClonePtr(long _arg);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_clone(const struct LDKSpendableOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone")] public static extern long SpendableOutputDescriptorClone(long _orig);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_output(struct LDKOutPoint outpoint, struct LDKTxOut output, struct LDKThirtyTwoBytes channel_keys_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_output")] public static extern long SpendableOutputDescriptorStaticOutput(long _outpoint, long _output, long _channel_keys_id);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_delayed_payment_output(struct LDKDelayedPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_delayed_payment_output")] public static extern long SpendableOutputDescriptorDelayedPaymentOutput(long _a);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_payment_output(struct LDKStaticPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_payment_output")] public static extern long SpendableOutputDescriptorStaticPaymentOutput(long _a);
	// uint64_t SpendableOutputDescriptor_hash(const struct LDKSpendableOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_hash")] public static extern long SpendableOutputDescriptorHash(long _o);
	// bool SpendableOutputDescriptor_eq(const struct LDKSpendableOutputDescriptor *NONNULL_PTR a, const struct LDKSpendableOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_eq")] public static extern bool SpendableOutputDescriptorEq(long _a, long _b);
	// struct LDKCVec_u8Z SpendableOutputDescriptor_write(const struct LDKSpendableOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_write")] public static extern long SpendableOutputDescriptorWrite(long _obj);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ SpendableOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_read")] public static extern long SpendableOutputDescriptorRead(long _ser);
	// MUST_USE_RES struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ SpendableOutputDescriptor_create_spendable_outputs_psbt(struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight, struct LDKCOption_u32Z locktime);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_create_spendable_outputs_psbt")] public static extern long SpendableOutputDescriptorCreateSpendableOutputsPsbt(long _descriptors, long _outputs, long _change_destination_script, int _feerate_sat_per_1000_weight, long _locktime);
	// void ChannelDerivationParameters_free(struct LDKChannelDerivationParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_free")] public static extern void ChannelDerivationParametersFree(long _this_obj);
	// uint64_t ChannelDerivationParameters_get_value_satoshis(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_value_satoshis")] public static extern long ChannelDerivationParametersGetValueSatoshis(long _this_ptr);
	// void ChannelDerivationParameters_set_value_satoshis(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_value_satoshis")] public static extern void ChannelDerivationParametersSetValueSatoshis(long _this_ptr, long _val);
	// const uint8_t (*ChannelDerivationParameters_get_keys_id(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_keys_id")] public static extern long ChannelDerivationParametersGetKeysId(long _this_ptr);
	// void ChannelDerivationParameters_set_keys_id(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_keys_id")] public static extern void ChannelDerivationParametersSetKeysId(long _this_ptr, long _val);
	// struct LDKChannelTransactionParameters ChannelDerivationParameters_get_transaction_parameters(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_transaction_parameters")] public static extern long ChannelDerivationParametersGetTransactionParameters(long _this_ptr);
	// void ChannelDerivationParameters_set_transaction_parameters(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, struct LDKChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_transaction_parameters")] public static extern void ChannelDerivationParametersSetTransactionParameters(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelDerivationParameters ChannelDerivationParameters_new(uint64_t value_satoshis_arg, struct LDKThirtyTwoBytes keys_id_arg, struct LDKChannelTransactionParameters transaction_parameters_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_new")] public static extern long ChannelDerivationParametersNew(long _value_satoshis_arg, long _keys_id_arg, long _transaction_parameters_arg);
	// uint64_t ChannelDerivationParameters_clone_ptr(LDKChannelDerivationParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_clone_ptr")] public static extern long ChannelDerivationParametersClonePtr(long _arg);
	// struct LDKChannelDerivationParameters ChannelDerivationParameters_clone(const struct LDKChannelDerivationParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_clone")] public static extern long ChannelDerivationParametersClone(long _orig);
	// bool ChannelDerivationParameters_eq(const struct LDKChannelDerivationParameters *NONNULL_PTR a, const struct LDKChannelDerivationParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_eq")] public static extern bool ChannelDerivationParametersEq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelDerivationParameters_write(const struct LDKChannelDerivationParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_write")] public static extern long ChannelDerivationParametersWrite(long _obj);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ ChannelDerivationParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_read")] public static extern long ChannelDerivationParametersRead(long _ser);
	// void HTLCDescriptor_free(struct LDKHTLCDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_free")] public static extern void HTLCDescriptorFree(long _this_obj);
	// struct LDKChannelDerivationParameters HTLCDescriptor_get_channel_derivation_parameters(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_channel_derivation_parameters")] public static extern long HTLCDescriptorGetChannelDerivationParameters(long _this_ptr);
	// void HTLCDescriptor_set_channel_derivation_parameters(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKChannelDerivationParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_channel_derivation_parameters")] public static extern void HTLCDescriptorSetChannelDerivationParameters(long _this_ptr, long _val);
	// uint64_t HTLCDescriptor_get_per_commitment_number(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_per_commitment_number")] public static extern long HTLCDescriptorGetPerCommitmentNumber(long _this_ptr);
	// void HTLCDescriptor_set_per_commitment_number(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_per_commitment_number")] public static extern void HTLCDescriptorSetPerCommitmentNumber(long _this_ptr, long _val);
	// struct LDKPublicKey HTLCDescriptor_get_per_commitment_point(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_per_commitment_point")] public static extern long HTLCDescriptorGetPerCommitmentPoint(long _this_ptr);
	// void HTLCDescriptor_set_per_commitment_point(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_per_commitment_point")] public static extern void HTLCDescriptorSetPerCommitmentPoint(long _this_ptr, long _val);
	// uint32_t HTLCDescriptor_get_feerate_per_kw(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_feerate_per_kw")] public static extern int HTLCDescriptorGetFeeratePerKw(long _this_ptr);
	// void HTLCDescriptor_set_feerate_per_kw(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_feerate_per_kw")] public static extern void HTLCDescriptorSetFeeratePerKw(long _this_ptr, int _val);
	// struct LDKHTLCOutputInCommitment HTLCDescriptor_get_htlc(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_htlc")] public static extern long HTLCDescriptorGetHtlc(long _this_ptr);
	// void HTLCDescriptor_set_htlc(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKHTLCOutputInCommitment val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_htlc")] public static extern void HTLCDescriptorSetHtlc(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ HTLCDescriptor_get_preimage(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_preimage")] public static extern long HTLCDescriptorGetPreimage(long _this_ptr);
	// void HTLCDescriptor_set_preimage(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_preimage")] public static extern void HTLCDescriptorSetPreimage(long _this_ptr, long _val);
	// struct LDKECDSASignature HTLCDescriptor_get_counterparty_sig(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_counterparty_sig")] public static extern long HTLCDescriptorGetCounterpartySig(long _this_ptr);
	// void HTLCDescriptor_set_counterparty_sig(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_counterparty_sig")] public static extern void HTLCDescriptorSetCounterpartySig(long _this_ptr, long _val);
	// uint64_t HTLCDescriptor_clone_ptr(LDKHTLCDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_clone_ptr")] public static extern long HTLCDescriptorClonePtr(long _arg);
	// struct LDKHTLCDescriptor HTLCDescriptor_clone(const struct LDKHTLCDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_clone")] public static extern long HTLCDescriptorClone(long _orig);
	// bool HTLCDescriptor_eq(const struct LDKHTLCDescriptor *NONNULL_PTR a, const struct LDKHTLCDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_eq")] public static extern bool HTLCDescriptorEq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCDescriptor_write(const struct LDKHTLCDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_write")] public static extern long HTLCDescriptorWrite(long _obj);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ HTLCDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_read")] public static extern long HTLCDescriptorRead(long _ser);
	// MUST_USE_RES struct LDKOutPoint HTLCDescriptor_outpoint(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_outpoint")] public static extern long HTLCDescriptorOutpoint(long _this_arg);
	// MUST_USE_RES struct LDKTxOut HTLCDescriptor_previous_utxo(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_previous_utxo")] public static extern long HTLCDescriptorPreviousUtxo(long _this_arg);
	// MUST_USE_RES struct LDKTxIn HTLCDescriptor_unsigned_tx_input(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_unsigned_tx_input")] public static extern long HTLCDescriptorUnsignedTxInput(long _this_arg);
	// MUST_USE_RES struct LDKTxOut HTLCDescriptor_tx_output(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_tx_output")] public static extern long HTLCDescriptorTxOutput(long _this_arg);
	// MUST_USE_RES struct LDKCVec_u8Z HTLCDescriptor_witness_script(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_witness_script")] public static extern long HTLCDescriptorWitnessScript(long _this_arg);
	// MUST_USE_RES struct LDKWitness HTLCDescriptor_tx_input_witness(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg, struct LDKECDSASignature signature, struct LDKu8slice witness_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_tx_input_witness")] public static extern long HTLCDescriptorTxInputWitness(long _this_arg, long _signature, long _witness_script);
	// MUST_USE_RES struct LDKWriteableEcdsaChannelSigner HTLCDescriptor_derive_channel_signer(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg, const struct LDKSignerProvider *NONNULL_PTR signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_derive_channel_signer")] public static extern long HTLCDescriptorDeriveChannelSigner(long _this_arg, long _signer_provider);
	// void ChannelSigner_free(struct LDKChannelSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_free")] public static extern void ChannelSignerFree(long _this_ptr);
	// enum LDKRecipient Recipient_clone(const enum LDKRecipient *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_clone")] public static extern Recipient RecipientClone(long _orig);
	// enum LDKRecipient Recipient_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_node")] public static extern Recipient RecipientNode();
	// enum LDKRecipient Recipient_phantom_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_phantom_node")] public static extern Recipient RecipientPhantomNode();
	// void EntropySource_free(struct LDKEntropySource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EntropySource_free")] public static extern void EntropySourceFree(long _this_ptr);
	// void NodeSigner_free(struct LDKNodeSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_free")] public static extern void NodeSignerFree(long _this_ptr);
	// void SignerProvider_free(struct LDKSignerProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_free")] public static extern void SignerProviderFree(long _this_ptr);
	// void InMemorySigner_free(struct LDKInMemorySigner this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_free")] public static extern void InMemorySignerFree(long _this_obj);
	// const uint8_t (*InMemorySigner_get_funding_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_funding_key")] public static extern long InMemorySignerGetFundingKey(long _this_ptr);
	// void InMemorySigner_set_funding_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_funding_key")] public static extern void InMemorySignerSetFundingKey(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_revocation_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_revocation_base_key")] public static extern long InMemorySignerGetRevocationBaseKey(long _this_ptr);
	// void InMemorySigner_set_revocation_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_revocation_base_key")] public static extern void InMemorySignerSetRevocationBaseKey(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_payment_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_payment_key")] public static extern long InMemorySignerGetPaymentKey(long _this_ptr);
	// void InMemorySigner_set_payment_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_payment_key")] public static extern void InMemorySignerSetPaymentKey(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_delayed_payment_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_delayed_payment_base_key")] public static extern long InMemorySignerGetDelayedPaymentBaseKey(long _this_ptr);
	// void InMemorySigner_set_delayed_payment_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_delayed_payment_base_key")] public static extern void InMemorySignerSetDelayedPaymentBaseKey(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_htlc_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_htlc_base_key")] public static extern long InMemorySignerGetHtlcBaseKey(long _this_ptr);
	// void InMemorySigner_set_htlc_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_htlc_base_key")] public static extern void InMemorySignerSetHtlcBaseKey(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_commitment_seed(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_commitment_seed")] public static extern long InMemorySignerGetCommitmentSeed(long _this_ptr);
	// void InMemorySigner_set_commitment_seed(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_commitment_seed")] public static extern void InMemorySignerSetCommitmentSeed(long _this_ptr, long _val);
	// uint64_t InMemorySigner_clone_ptr(LDKInMemorySigner *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone_ptr")] public static extern long InMemorySignerClonePtr(long _arg);
	// struct LDKInMemorySigner InMemorySigner_clone(const struct LDKInMemorySigner *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone")] public static extern long InMemorySignerClone(long _orig);
	// MUST_USE_RES struct LDKInMemorySigner InMemorySigner_new(struct LDKSecretKey funding_key, struct LDKSecretKey revocation_base_key, struct LDKSecretKey payment_key, struct LDKSecretKey delayed_payment_base_key, struct LDKSecretKey htlc_base_key, struct LDKThirtyTwoBytes commitment_seed, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id, struct LDKThirtyTwoBytes rand_bytes_unique_start);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_new")] public static extern long InMemorySignerNew(long _funding_key, long _revocation_base_key, long _payment_key, long _delayed_payment_base_key, long _htlc_base_key, long _commitment_seed, long _channel_value_satoshis, long _channel_keys_id, long _rand_bytes_unique_start);
	// MUST_USE_RES struct LDKChannelPublicKeys InMemorySigner_counterparty_pubkeys(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_pubkeys")] public static extern long InMemorySignerCounterpartyPubkeys(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u16Z InMemorySigner_counterparty_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_selected_contest_delay")] public static extern long InMemorySignerCounterpartySelectedContestDelay(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u16Z InMemorySigner_holder_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_holder_selected_contest_delay")] public static extern long InMemorySignerHolderSelectedContestDelay(long _this_arg);
	// MUST_USE_RES struct LDKCOption_boolZ InMemorySigner_is_outbound(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_is_outbound")] public static extern long InMemorySignerIsOutbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint InMemorySigner_funding_outpoint(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_funding_outpoint")] public static extern long InMemorySignerFundingOutpoint(long _this_arg);
	// MUST_USE_RES struct LDKChannelTransactionParameters InMemorySigner_get_channel_parameters(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_channel_parameters")] public static extern long InMemorySignerGetChannelParameters(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures InMemorySigner_channel_type_features(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_channel_type_features")] public static extern long InMemorySignerChannelTypeFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCResult_WitnessNoneZ InMemorySigner_sign_counterparty_payment_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_counterparty_payment_input")] public static extern long InMemorySignerSignCounterpartyPaymentInput(long _this_arg, long _spend_tx, long _input_idx, long _descriptor);
	// MUST_USE_RES struct LDKCResult_WitnessNoneZ InMemorySigner_sign_dynamic_p2wsh_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_dynamic_p2wsh_input")] public static extern long InMemorySignerSignDynamicP2WshInput(long _this_arg, long _spend_tx, long _input_idx, long _descriptor);
	// struct LDKEntropySource InMemorySigner_as_EntropySource(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_EntropySource")] public static extern long InMemorySignerAsEntropySource(long _this_arg);
	// struct LDKChannelSigner InMemorySigner_as_ChannelSigner(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_ChannelSigner")] public static extern long InMemorySignerAsChannelSigner(long _this_arg);
	// struct LDKEcdsaChannelSigner InMemorySigner_as_EcdsaChannelSigner(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_EcdsaChannelSigner")] public static extern long InMemorySignerAsEcdsaChannelSigner(long _this_arg);
	// struct LDKWriteableEcdsaChannelSigner InMemorySigner_as_WriteableEcdsaChannelSigner(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_WriteableEcdsaChannelSigner")] public static extern long InMemorySignerAsWriteableEcdsaChannelSigner(long _this_arg);
	// struct LDKCVec_u8Z InMemorySigner_write(const struct LDKInMemorySigner *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_write")] public static extern long InMemorySignerWrite(long _obj);
	// struct LDKCResult_InMemorySignerDecodeErrorZ InMemorySigner_read(struct LDKu8slice ser, struct LDKEntropySource arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_read")] public static extern long InMemorySignerRead(long _ser, long _arg);
	// void KeysManager_free(struct LDKKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_free")] public static extern void KeysManagerFree(long _this_obj);
	// MUST_USE_RES struct LDKKeysManager KeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_new")] public static extern long KeysManagerNew(long _seed, long _starting_time_secs, int _starting_time_nanos);
	// MUST_USE_RES struct LDKSecretKey KeysManager_get_node_secret_key(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_get_node_secret_key")] public static extern long KeysManagerGetNodeSecretKey(long _this_arg);
	// MUST_USE_RES struct LDKInMemorySigner KeysManager_derive_channel_keys(const struct LDKKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_derive_channel_keys")] public static extern long KeysManagerDeriveChannelKeys(long _this_arg, long _channel_value_satoshis, long _params);
	// MUST_USE_RES struct LDKCResult_CVec_u8ZNoneZ KeysManager_sign_spendable_outputs_psbt(const struct LDKKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_u8Z psbt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_sign_spendable_outputs_psbt")] public static extern long KeysManagerSignSpendableOutputsPsbt(long _this_arg, long _descriptors, long _psbt);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ KeysManager_spend_spendable_outputs(const struct LDKKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight, struct LDKCOption_u32Z locktime);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_spend_spendable_outputs")] public static extern long KeysManagerSpendSpendableOutputs(long _this_arg, long _descriptors, long _outputs, long _change_destination_script, int _feerate_sat_per_1000_weight, long _locktime);
	// struct LDKEntropySource KeysManager_as_EntropySource(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_EntropySource")] public static extern long KeysManagerAsEntropySource(long _this_arg);
	// struct LDKNodeSigner KeysManager_as_NodeSigner(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_NodeSigner")] public static extern long KeysManagerAsNodeSigner(long _this_arg);
	// struct LDKSignerProvider KeysManager_as_SignerProvider(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_SignerProvider")] public static extern long KeysManagerAsSignerProvider(long _this_arg);
	// void PhantomKeysManager_free(struct LDKPhantomKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_free")] public static extern void PhantomKeysManagerFree(long _this_obj);
	// struct LDKEntropySource PhantomKeysManager_as_EntropySource(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_EntropySource")] public static extern long PhantomKeysManagerAsEntropySource(long _this_arg);
	// struct LDKNodeSigner PhantomKeysManager_as_NodeSigner(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_NodeSigner")] public static extern long PhantomKeysManagerAsNodeSigner(long _this_arg);
	// struct LDKSignerProvider PhantomKeysManager_as_SignerProvider(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_SignerProvider")] public static extern long PhantomKeysManagerAsSignerProvider(long _this_arg);
	// MUST_USE_RES struct LDKPhantomKeysManager PhantomKeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos, const uint8_t (*cross_node_seed)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_new")] public static extern long PhantomKeysManagerNew(long _seed, long _starting_time_secs, int _starting_time_nanos, long _cross_node_seed);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ PhantomKeysManager_spend_spendable_outputs(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight, struct LDKCOption_u32Z locktime);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_spend_spendable_outputs")] public static extern long PhantomKeysManagerSpendSpendableOutputs(long _this_arg, long _descriptors, long _outputs, long _change_destination_script, int _feerate_sat_per_1000_weight, long _locktime);
	// MUST_USE_RES struct LDKInMemorySigner PhantomKeysManager_derive_channel_keys(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_derive_channel_keys")] public static extern long PhantomKeysManagerDeriveChannelKeys(long _this_arg, long _channel_value_satoshis, long _params);
	// MUST_USE_RES struct LDKSecretKey PhantomKeysManager_get_node_secret_key(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_get_node_secret_key")] public static extern long PhantomKeysManagerGetNodeSecretKey(long _this_arg);
	// MUST_USE_RES struct LDKSecretKey PhantomKeysManager_get_phantom_node_secret_key(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_get_phantom_node_secret_key")] public static extern long PhantomKeysManagerGetPhantomNodeSecretKey(long _this_arg);
	// void EcdsaChannelSigner_free(struct LDKEcdsaChannelSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_free")] public static extern void EcdsaChannelSignerFree(long _this_ptr);
	// uint64_t WriteableEcdsaChannelSigner_clone_ptr(LDKWriteableEcdsaChannelSigner *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableEcdsaChannelSigner_clone_ptr")] public static extern long WriteableEcdsaChannelSignerClonePtr(long _arg);
	// struct LDKWriteableEcdsaChannelSigner WriteableEcdsaChannelSigner_clone(const struct LDKWriteableEcdsaChannelSigner *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableEcdsaChannelSigner_clone")] public static extern long WriteableEcdsaChannelSignerClone(long _orig);
	// void WriteableEcdsaChannelSigner_free(struct LDKWriteableEcdsaChannelSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableEcdsaChannelSigner_free")] public static extern void WriteableEcdsaChannelSignerFree(long _this_ptr);
	// void OnionMessenger_free(struct LDKOnionMessenger this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_free")] public static extern void OnionMessengerFree(long _this_obj);
	// void MessageRouter_free(struct LDKMessageRouter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_free")] public static extern void MessageRouterFree(long _this_ptr);
	// void DefaultMessageRouter_free(struct LDKDefaultMessageRouter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_free")] public static extern void DefaultMessageRouterFree(long _this_obj);
	// MUST_USE_RES struct LDKDefaultMessageRouter DefaultMessageRouter_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_new")] public static extern long DefaultMessageRouterNew(long _network_graph, long _entropy_source);
	// struct LDKMessageRouter DefaultMessageRouter_as_MessageRouter(const struct LDKDefaultMessageRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_as_MessageRouter")] public static extern long DefaultMessageRouterAsMessageRouter(long _this_arg);
	// void OnionMessagePath_free(struct LDKOnionMessagePath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_free")] public static extern void OnionMessagePathFree(long _this_obj);
	// struct LDKCVec_PublicKeyZ OnionMessagePath_get_intermediate_nodes(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_intermediate_nodes")] public static extern long OnionMessagePathGetIntermediateNodes(long _this_ptr);
	// void OnionMessagePath_set_intermediate_nodes(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKCVec_PublicKeyZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_intermediate_nodes")] public static extern void OnionMessagePathSetIntermediateNodes(long _this_ptr, long _val);
	// struct LDKDestination OnionMessagePath_get_destination(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_destination")] public static extern long OnionMessagePathGetDestination(long _this_ptr);
	// void OnionMessagePath_set_destination(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKDestination val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_destination")] public static extern void OnionMessagePathSetDestination(long _this_ptr, long _val);
	// struct LDKCOption_CVec_SocketAddressZZ OnionMessagePath_get_first_node_addresses(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_first_node_addresses")] public static extern long OnionMessagePathGetFirstNodeAddresses(long _this_ptr);
	// void OnionMessagePath_set_first_node_addresses(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKCOption_CVec_SocketAddressZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_first_node_addresses")] public static extern void OnionMessagePathSetFirstNodeAddresses(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOnionMessagePath OnionMessagePath_new(struct LDKCVec_PublicKeyZ intermediate_nodes_arg, struct LDKDestination destination_arg, struct LDKCOption_CVec_SocketAddressZZ first_node_addresses_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_new")] public static extern long OnionMessagePathNew(long _intermediate_nodes_arg, long _destination_arg, long _first_node_addresses_arg);
	// uint64_t OnionMessagePath_clone_ptr(LDKOnionMessagePath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_clone_ptr")] public static extern long OnionMessagePathClonePtr(long _arg);
	// struct LDKOnionMessagePath OnionMessagePath_clone(const struct LDKOnionMessagePath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_clone")] public static extern long OnionMessagePathClone(long _orig);
	// MUST_USE_RES struct LDKPublicKey OnionMessagePath_first_node(const struct LDKOnionMessagePath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_first_node")] public static extern long OnionMessagePathFirstNode(long _this_arg);
	// void Destination_free(struct LDKDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_free")] public static extern void DestinationFree(long _this_ptr);
	// uint64_t Destination_clone_ptr(LDKDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone_ptr")] public static extern long DestinationClonePtr(long _arg);
	// struct LDKDestination Destination_clone(const struct LDKDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone")] public static extern long DestinationClone(long _orig);
	// struct LDKDestination Destination_node(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_node")] public static extern long DestinationNode(long _a);
	// struct LDKDestination Destination_blinded_path(struct LDKBlindedPath a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_blinded_path")] public static extern long DestinationBlindedPath(long _a);
	// void SendSuccess_free(struct LDKSendSuccess this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_free")] public static extern void SendSuccessFree(long _this_ptr);
	// uint64_t SendSuccess_clone_ptr(LDKSendSuccess *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_clone_ptr")] public static extern long SendSuccessClonePtr(long _arg);
	// struct LDKSendSuccess SendSuccess_clone(const struct LDKSendSuccess *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_clone")] public static extern long SendSuccessClone(long _orig);
	// struct LDKSendSuccess SendSuccess_buffered(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_buffered")] public static extern long SendSuccessBuffered();
	// struct LDKSendSuccess SendSuccess_buffered_awaiting_connection(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_buffered_awaiting_connection")] public static extern long SendSuccessBufferedAwaitingConnection(long _a);
	// bool SendSuccess_eq(const struct LDKSendSuccess *NONNULL_PTR a, const struct LDKSendSuccess *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_eq")] public static extern bool SendSuccessEq(long _a, long _b);
	// void SendError_free(struct LDKSendError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_free")] public static extern void SendErrorFree(long _this_ptr);
	// uint64_t SendError_clone_ptr(LDKSendError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone_ptr")] public static extern long SendErrorClonePtr(long _arg);
	// struct LDKSendError SendError_clone(const struct LDKSendError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone")] public static extern long SendErrorClone(long _orig);
	// struct LDKSendError SendError_secp256k1(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_secp256k1")] public static extern long SendErrorSecp256K1(Secp256k1Error _a);
	// struct LDKSendError SendError_too_big_packet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_big_packet")] public static extern long SendErrorTooBigPacket();
	// struct LDKSendError SendError_too_few_blinded_hops(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_few_blinded_hops")] public static extern long SendErrorTooFewBlindedHops();
	// struct LDKSendError SendError_invalid_first_hop(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_first_hop")] public static extern long SendErrorInvalidFirstHop(long _a);
	// struct LDKSendError SendError_path_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_path_not_found")] public static extern long SendErrorPathNotFound();
	// struct LDKSendError SendError_invalid_message(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_message")] public static extern long SendErrorInvalidMessage();
	// struct LDKSendError SendError_buffer_full(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_buffer_full")] public static extern long SendErrorBufferFull();
	// struct LDKSendError SendError_get_node_id_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_get_node_id_failed")] public static extern long SendErrorGetNodeIdFailed();
	// struct LDKSendError SendError_blinded_path_advance_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_blinded_path_advance_failed")] public static extern long SendErrorBlindedPathAdvanceFailed();
	// bool SendError_eq(const struct LDKSendError *NONNULL_PTR a, const struct LDKSendError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_eq")] public static extern bool SendErrorEq(long _a, long _b);
	// void CustomOnionMessageHandler_free(struct LDKCustomOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_free")] public static extern void CustomOnionMessageHandlerFree(long _this_ptr);
	// void PeeledOnion_free(struct LDKPeeledOnion this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_free")] public static extern void PeeledOnionFree(long _this_ptr);
	// uint64_t PeeledOnion_clone_ptr(LDKPeeledOnion *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_clone_ptr")] public static extern long PeeledOnionClonePtr(long _arg);
	// struct LDKPeeledOnion PeeledOnion_clone(const struct LDKPeeledOnion *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_clone")] public static extern long PeeledOnionClone(long _orig);
	// struct LDKPeeledOnion PeeledOnion_forward(struct LDKPublicKey a, struct LDKOnionMessage b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_forward")] public static extern long PeeledOnionForward(long _a, long _b);
	// struct LDKPeeledOnion PeeledOnion_receive(struct LDKParsedOnionMessageContents a, struct LDKThirtyTwoBytes b, struct LDKBlindedPath c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_receive")] public static extern long PeeledOnionReceive(long _a, long _b, long _c);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ create_onion_message(const struct LDKEntropySource *NONNULL_PTR entropy_source, const struct LDKNodeSigner *NONNULL_PTR node_signer, struct LDKOnionMessagePath path, struct LDKOnionMessageContents contents, struct LDKBlindedPath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_onion_message")] public static extern long CreateOnionMessage(long _entropy_source, long _node_signer, long _path, long _contents, long _reply_path);
	// struct LDKCResult_PeeledOnionNoneZ peel_onion_message(const struct LDKOnionMessage *NONNULL_PTR msg, struct LDKNodeSigner node_signer, struct LDKLogger logger, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_peel_onion_message")] public static extern long PeelOnionMessage(long _msg, long _node_signer, long _logger, long _custom_handler);
	// MUST_USE_RES struct LDKOnionMessenger OnionMessenger_new(struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, struct LDKMessageRouter message_router, struct LDKOffersMessageHandler offers_handler, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_new")] public static extern long OnionMessengerNew(long _entropy_source, long _node_signer, long _logger, long _message_router, long _offers_handler, long _custom_handler);
	// MUST_USE_RES struct LDKCResult_SendSuccessSendErrorZ OnionMessenger_send_onion_message(const struct LDKOnionMessenger *NONNULL_PTR this_arg, struct LDKOnionMessageContents contents, struct LDKDestination destination, struct LDKBlindedPath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_send_onion_message")] public static extern long OnionMessengerSendOnionMessage(long _this_arg, long _contents, long _destination, long _reply_path);
	// struct LDKOnionMessageHandler OnionMessenger_as_OnionMessageHandler(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_as_OnionMessageHandler")] public static extern long OnionMessengerAsOnionMessageHandler(long _this_arg);
	// void OffersMessageHandler_free(struct LDKOffersMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_free")] public static extern void OffersMessageHandlerFree(long _this_ptr);
	// void OffersMessage_free(struct LDKOffersMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_free")] public static extern void OffersMessageFree(long _this_ptr);
	// uint64_t OffersMessage_clone_ptr(LDKOffersMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_clone_ptr")] public static extern long OffersMessageClonePtr(long _arg);
	// struct LDKOffersMessage OffersMessage_clone(const struct LDKOffersMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_clone")] public static extern long OffersMessageClone(long _orig);
	// struct LDKOffersMessage OffersMessage_invoice_request(struct LDKInvoiceRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice_request")] public static extern long OffersMessageInvoiceRequest(long _a);
	// struct LDKOffersMessage OffersMessage_invoice(struct LDKBolt12Invoice a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice")] public static extern long OffersMessageInvoice(long _a);
	// struct LDKOffersMessage OffersMessage_invoice_error(struct LDKInvoiceError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice_error")] public static extern long OffersMessageInvoiceError(long _a);
	// MUST_USE_RES bool OffersMessage_is_known_type(uint64_t tlv_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_is_known_type")] public static extern bool OffersMessageIsKnownType(long _tlv_type);
	// struct LDKOnionMessageContents OffersMessage_as_OnionMessageContents(const struct LDKOffersMessage *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_as_OnionMessageContents")] public static extern long OffersMessageAsOnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z OffersMessage_write(const struct LDKOffersMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_write")] public static extern long OffersMessageWrite(long _obj);
	// struct LDKCResult_OffersMessageDecodeErrorZ OffersMessage_read(struct LDKu8slice ser, uint64_t arg_a, const struct LDKLogger *NONNULL_PTR arg_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_read")] public static extern long OffersMessageRead(long _ser, long _arg_a, long _arg_b);
	// void Packet_free(struct LDKPacket this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_free")] public static extern void PacketFree(long _this_obj);
	// uint8_t Packet_get_version(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_version")] public static extern byte PacketGetVersion(long _this_ptr);
	// void Packet_set_version(struct LDKPacket *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_version")] public static extern void PacketSetVersion(long _this_ptr, byte _val);
	// struct LDKPublicKey Packet_get_public_key(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_public_key")] public static extern long PacketGetPublicKey(long _this_ptr);
	// void Packet_set_public_key(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_public_key")] public static extern void PacketSetPublicKey(long _this_ptr, long _val);
	// struct LDKCVec_u8Z Packet_get_hop_data(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_hop_data")] public static extern long PacketGetHopData(long _this_ptr);
	// void Packet_set_hop_data(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_hop_data")] public static extern void PacketSetHopData(long _this_ptr, long _val);
	// const uint8_t (*Packet_get_hmac(const struct LDKPacket *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_hmac")] public static extern long PacketGetHmac(long _this_ptr);
	// void Packet_set_hmac(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_hmac")] public static extern void PacketSetHmac(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPacket Packet_new(uint8_t version_arg, struct LDKPublicKey public_key_arg, struct LDKCVec_u8Z hop_data_arg, struct LDKThirtyTwoBytes hmac_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_new")] public static extern long PacketNew(byte _version_arg, long _public_key_arg, long _hop_data_arg, long _hmac_arg);
	// uint64_t Packet_clone_ptr(LDKPacket *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_clone_ptr")] public static extern long PacketClonePtr(long _arg);
	// struct LDKPacket Packet_clone(const struct LDKPacket *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_clone")] public static extern long PacketClone(long _orig);
	// uint64_t Packet_hash(const struct LDKPacket *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_hash")] public static extern long PacketHash(long _o);
	// bool Packet_eq(const struct LDKPacket *NONNULL_PTR a, const struct LDKPacket *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_eq")] public static extern bool PacketEq(long _a, long _b);
	// struct LDKCVec_u8Z Packet_write(const struct LDKPacket *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_write")] public static extern long PacketWrite(long _obj);
	// void ParsedOnionMessageContents_free(struct LDKParsedOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_free")] public static extern void ParsedOnionMessageContentsFree(long _this_ptr);
	// uint64_t ParsedOnionMessageContents_clone_ptr(LDKParsedOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_clone_ptr")] public static extern long ParsedOnionMessageContentsClonePtr(long _arg);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_clone(const struct LDKParsedOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_clone")] public static extern long ParsedOnionMessageContentsClone(long _orig);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_offers(struct LDKOffersMessage a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_offers")] public static extern long ParsedOnionMessageContentsOffers(long _a);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_custom(struct LDKOnionMessageContents a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_custom")] public static extern long ParsedOnionMessageContentsCustom(long _a);
	// struct LDKOnionMessageContents ParsedOnionMessageContents_as_OnionMessageContents(const struct LDKParsedOnionMessageContents *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_as_OnionMessageContents")] public static extern long ParsedOnionMessageContentsAsOnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z ParsedOnionMessageContents_write(const struct LDKParsedOnionMessageContents *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_write")] public static extern long ParsedOnionMessageContentsWrite(long _obj);
	// uint64_t OnionMessageContents_clone_ptr(LDKOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone_ptr")] public static extern long OnionMessageContentsClonePtr(long _arg);
	// struct LDKOnionMessageContents OnionMessageContents_clone(const struct LDKOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone")] public static extern long OnionMessageContentsClone(long _orig);
	// void OnionMessageContents_free(struct LDKOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_free")] public static extern void OnionMessageContentsFree(long _this_ptr);
	// void BlindedPath_free(struct LDKBlindedPath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_free")] public static extern void BlindedPathFree(long _this_obj);
	// struct LDKPublicKey BlindedPath_get_introduction_node_id(const struct LDKBlindedPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_get_introduction_node_id")] public static extern long BlindedPathGetIntroductionNodeId(long _this_ptr);
	// void BlindedPath_set_introduction_node_id(struct LDKBlindedPath *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_set_introduction_node_id")] public static extern void BlindedPathSetIntroductionNodeId(long _this_ptr, long _val);
	// struct LDKPublicKey BlindedPath_get_blinding_point(const struct LDKBlindedPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_get_blinding_point")] public static extern long BlindedPathGetBlindingPoint(long _this_ptr);
	// void BlindedPath_set_blinding_point(struct LDKBlindedPath *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_set_blinding_point")] public static extern void BlindedPathSetBlindingPoint(long _this_ptr, long _val);
	// struct LDKCVec_BlindedHopZ BlindedPath_get_blinded_hops(const struct LDKBlindedPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_get_blinded_hops")] public static extern long BlindedPathGetBlindedHops(long _this_ptr);
	// void BlindedPath_set_blinded_hops(struct LDKBlindedPath *NONNULL_PTR this_ptr, struct LDKCVec_BlindedHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_set_blinded_hops")] public static extern void BlindedPathSetBlindedHops(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedPath BlindedPath_new(struct LDKPublicKey introduction_node_id_arg, struct LDKPublicKey blinding_point_arg, struct LDKCVec_BlindedHopZ blinded_hops_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_new")] public static extern long BlindedPathNew(long _introduction_node_id_arg, long _blinding_point_arg, long _blinded_hops_arg);
	// uint64_t BlindedPath_clone_ptr(LDKBlindedPath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_clone_ptr")] public static extern long BlindedPathClonePtr(long _arg);
	// struct LDKBlindedPath BlindedPath_clone(const struct LDKBlindedPath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_clone")] public static extern long BlindedPathClone(long _orig);
	// uint64_t BlindedPath_hash(const struct LDKBlindedPath *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_hash")] public static extern long BlindedPathHash(long _o);
	// bool BlindedPath_eq(const struct LDKBlindedPath *NONNULL_PTR a, const struct LDKBlindedPath *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_eq")] public static extern bool BlindedPathEq(long _a, long _b);
	// void BlindedHop_free(struct LDKBlindedHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_free")] public static extern void BlindedHopFree(long _this_obj);
	// struct LDKPublicKey BlindedHop_get_blinded_node_id(const struct LDKBlindedHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_get_blinded_node_id")] public static extern long BlindedHopGetBlindedNodeId(long _this_ptr);
	// void BlindedHop_set_blinded_node_id(struct LDKBlindedHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_set_blinded_node_id")] public static extern void BlindedHopSetBlindedNodeId(long _this_ptr, long _val);
	// struct LDKCVec_u8Z BlindedHop_get_encrypted_payload(const struct LDKBlindedHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_get_encrypted_payload")] public static extern long BlindedHopGetEncryptedPayload(long _this_ptr);
	// void BlindedHop_set_encrypted_payload(struct LDKBlindedHop *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_set_encrypted_payload")] public static extern void BlindedHopSetEncryptedPayload(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedHop BlindedHop_new(struct LDKPublicKey blinded_node_id_arg, struct LDKCVec_u8Z encrypted_payload_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_new")] public static extern long BlindedHopNew(long _blinded_node_id_arg, long _encrypted_payload_arg);
	// uint64_t BlindedHop_clone_ptr(LDKBlindedHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone_ptr")] public static extern long BlindedHopClonePtr(long _arg);
	// struct LDKBlindedHop BlindedHop_clone(const struct LDKBlindedHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone")] public static extern long BlindedHopClone(long _orig);
	// uint64_t BlindedHop_hash(const struct LDKBlindedHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_hash")] public static extern long BlindedHopHash(long _o);
	// bool BlindedHop_eq(const struct LDKBlindedHop *NONNULL_PTR a, const struct LDKBlindedHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_eq")] public static extern bool BlindedHopEq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_BlindedPathNoneZ BlindedPath_one_hop_for_message(struct LDKPublicKey recipient_node_id, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_one_hop_for_message")] public static extern long BlindedPathOneHopForMessage(long _recipient_node_id, long _entropy_source);
	// MUST_USE_RES struct LDKCResult_BlindedPathNoneZ BlindedPath_new_for_message(struct LDKCVec_PublicKeyZ node_pks, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_new_for_message")] public static extern long BlindedPathNewForMessage(long _node_pks, long _entropy_source);
	// MUST_USE_RES struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ BlindedPath_one_hop_for_payment(struct LDKPublicKey payee_node_id, struct LDKReceiveTlvs payee_tlvs, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_one_hop_for_payment")] public static extern long BlindedPathOneHopForPayment(long _payee_node_id, long _payee_tlvs, long _entropy_source);
	// MUST_USE_RES struct LDKCResult_C2Tuple_BlindedPayInfoBlindedPathZNoneZ BlindedPath_new_for_payment(struct LDKCVec_ForwardNodeZ intermediate_nodes, struct LDKPublicKey payee_node_id, struct LDKReceiveTlvs payee_tlvs, uint64_t htlc_maximum_msat, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_new_for_payment")] public static extern long BlindedPathNewForPayment(long _intermediate_nodes, long _payee_node_id, long _payee_tlvs, long _htlc_maximum_msat, long _entropy_source);
	// struct LDKCVec_u8Z BlindedPath_write(const struct LDKBlindedPath *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_write")] public static extern long BlindedPathWrite(long _obj);
	// struct LDKCResult_BlindedPathDecodeErrorZ BlindedPath_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPath_read")] public static extern long BlindedPathRead(long _ser);
	// struct LDKCVec_u8Z BlindedHop_write(const struct LDKBlindedHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_write")] public static extern long BlindedHopWrite(long _obj);
	// struct LDKCResult_BlindedHopDecodeErrorZ BlindedHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_read")] public static extern long BlindedHopRead(long _ser);
	// void ForwardNode_free(struct LDKForwardNode this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_free")] public static extern void ForwardNodeFree(long _this_obj);
	// struct LDKForwardTlvs ForwardNode_get_tlvs(const struct LDKForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_get_tlvs")] public static extern long ForwardNodeGetTlvs(long _this_ptr);
	// void ForwardNode_set_tlvs(struct LDKForwardNode *NONNULL_PTR this_ptr, struct LDKForwardTlvs val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_set_tlvs")] public static extern void ForwardNodeSetTlvs(long _this_ptr, long _val);
	// struct LDKPublicKey ForwardNode_get_node_id(const struct LDKForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_get_node_id")] public static extern long ForwardNodeGetNodeId(long _this_ptr);
	// void ForwardNode_set_node_id(struct LDKForwardNode *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_set_node_id")] public static extern void ForwardNodeSetNodeId(long _this_ptr, long _val);
	// uint64_t ForwardNode_get_htlc_maximum_msat(const struct LDKForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_get_htlc_maximum_msat")] public static extern long ForwardNodeGetHtlcMaximumMsat(long _this_ptr);
	// void ForwardNode_set_htlc_maximum_msat(struct LDKForwardNode *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_set_htlc_maximum_msat")] public static extern void ForwardNodeSetHtlcMaximumMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKForwardNode ForwardNode_new(struct LDKForwardTlvs tlvs_arg, struct LDKPublicKey node_id_arg, uint64_t htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_new")] public static extern long ForwardNodeNew(long _tlvs_arg, long _node_id_arg, long _htlc_maximum_msat_arg);
	// uint64_t ForwardNode_clone_ptr(LDKForwardNode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_clone_ptr")] public static extern long ForwardNodeClonePtr(long _arg);
	// struct LDKForwardNode ForwardNode_clone(const struct LDKForwardNode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardNode_clone")] public static extern long ForwardNodeClone(long _orig);
	// void ForwardTlvs_free(struct LDKForwardTlvs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_free")] public static extern void ForwardTlvsFree(long _this_obj);
	// uint64_t ForwardTlvs_get_short_channel_id(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_short_channel_id")] public static extern long ForwardTlvsGetShortChannelId(long _this_ptr);
	// void ForwardTlvs_set_short_channel_id(struct LDKForwardTlvs *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_short_channel_id")] public static extern void ForwardTlvsSetShortChannelId(long _this_ptr, long _val);
	// struct LDKPaymentRelay ForwardTlvs_get_payment_relay(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_payment_relay")] public static extern long ForwardTlvsGetPaymentRelay(long _this_ptr);
	// void ForwardTlvs_set_payment_relay(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKPaymentRelay val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_payment_relay")] public static extern void ForwardTlvsSetPaymentRelay(long _this_ptr, long _val);
	// struct LDKPaymentConstraints ForwardTlvs_get_payment_constraints(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_payment_constraints")] public static extern long ForwardTlvsGetPaymentConstraints(long _this_ptr);
	// void ForwardTlvs_set_payment_constraints(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKPaymentConstraints val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_payment_constraints")] public static extern void ForwardTlvsSetPaymentConstraints(long _this_ptr, long _val);
	// struct LDKBlindedHopFeatures ForwardTlvs_get_features(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_features")] public static extern long ForwardTlvsGetFeatures(long _this_ptr);
	// void ForwardTlvs_set_features(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKBlindedHopFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_features")] public static extern void ForwardTlvsSetFeatures(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKForwardTlvs ForwardTlvs_new(uint64_t short_channel_id_arg, struct LDKPaymentRelay payment_relay_arg, struct LDKPaymentConstraints payment_constraints_arg, struct LDKBlindedHopFeatures features_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_new")] public static extern long ForwardTlvsNew(long _short_channel_id_arg, long _payment_relay_arg, long _payment_constraints_arg, long _features_arg);
	// uint64_t ForwardTlvs_clone_ptr(LDKForwardTlvs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_clone_ptr")] public static extern long ForwardTlvsClonePtr(long _arg);
	// struct LDKForwardTlvs ForwardTlvs_clone(const struct LDKForwardTlvs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_clone")] public static extern long ForwardTlvsClone(long _orig);
	// void ReceiveTlvs_free(struct LDKReceiveTlvs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_free")] public static extern void ReceiveTlvsFree(long _this_obj);
	// const uint8_t (*ReceiveTlvs_get_payment_secret(const struct LDKReceiveTlvs *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_get_payment_secret")] public static extern long ReceiveTlvsGetPaymentSecret(long _this_ptr);
	// void ReceiveTlvs_set_payment_secret(struct LDKReceiveTlvs *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_set_payment_secret")] public static extern void ReceiveTlvsSetPaymentSecret(long _this_ptr, long _val);
	// struct LDKPaymentConstraints ReceiveTlvs_get_payment_constraints(const struct LDKReceiveTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_get_payment_constraints")] public static extern long ReceiveTlvsGetPaymentConstraints(long _this_ptr);
	// void ReceiveTlvs_set_payment_constraints(struct LDKReceiveTlvs *NONNULL_PTR this_ptr, struct LDKPaymentConstraints val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_set_payment_constraints")] public static extern void ReceiveTlvsSetPaymentConstraints(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKReceiveTlvs ReceiveTlvs_new(struct LDKThirtyTwoBytes payment_secret_arg, struct LDKPaymentConstraints payment_constraints_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_new")] public static extern long ReceiveTlvsNew(long _payment_secret_arg, long _payment_constraints_arg);
	// uint64_t ReceiveTlvs_clone_ptr(LDKReceiveTlvs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_clone_ptr")] public static extern long ReceiveTlvsClonePtr(long _arg);
	// struct LDKReceiveTlvs ReceiveTlvs_clone(const struct LDKReceiveTlvs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_clone")] public static extern long ReceiveTlvsClone(long _orig);
	// void PaymentRelay_free(struct LDKPaymentRelay this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_free")] public static extern void PaymentRelayFree(long _this_obj);
	// uint16_t PaymentRelay_get_cltv_expiry_delta(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_cltv_expiry_delta")] public static extern short PaymentRelayGetCltvExpiryDelta(long _this_ptr);
	// void PaymentRelay_set_cltv_expiry_delta(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_cltv_expiry_delta")] public static extern void PaymentRelaySetCltvExpiryDelta(long _this_ptr, short _val);
	// uint32_t PaymentRelay_get_fee_proportional_millionths(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_fee_proportional_millionths")] public static extern int PaymentRelayGetFeeProportionalMillionths(long _this_ptr);
	// void PaymentRelay_set_fee_proportional_millionths(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_fee_proportional_millionths")] public static extern void PaymentRelaySetFeeProportionalMillionths(long _this_ptr, int _val);
	// uint32_t PaymentRelay_get_fee_base_msat(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_fee_base_msat")] public static extern int PaymentRelayGetFeeBaseMsat(long _this_ptr);
	// void PaymentRelay_set_fee_base_msat(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_fee_base_msat")] public static extern void PaymentRelaySetFeeBaseMsat(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKPaymentRelay PaymentRelay_new(uint16_t cltv_expiry_delta_arg, uint32_t fee_proportional_millionths_arg, uint32_t fee_base_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_new")] public static extern long PaymentRelayNew(short _cltv_expiry_delta_arg, int _fee_proportional_millionths_arg, int _fee_base_msat_arg);
	// uint64_t PaymentRelay_clone_ptr(LDKPaymentRelay *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_clone_ptr")] public static extern long PaymentRelayClonePtr(long _arg);
	// struct LDKPaymentRelay PaymentRelay_clone(const struct LDKPaymentRelay *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_clone")] public static extern long PaymentRelayClone(long _orig);
	// void PaymentConstraints_free(struct LDKPaymentConstraints this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_free")] public static extern void PaymentConstraintsFree(long _this_obj);
	// uint32_t PaymentConstraints_get_max_cltv_expiry(const struct LDKPaymentConstraints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_get_max_cltv_expiry")] public static extern int PaymentConstraintsGetMaxCltvExpiry(long _this_ptr);
	// void PaymentConstraints_set_max_cltv_expiry(struct LDKPaymentConstraints *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_set_max_cltv_expiry")] public static extern void PaymentConstraintsSetMaxCltvExpiry(long _this_ptr, int _val);
	// uint64_t PaymentConstraints_get_htlc_minimum_msat(const struct LDKPaymentConstraints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_get_htlc_minimum_msat")] public static extern long PaymentConstraintsGetHtlcMinimumMsat(long _this_ptr);
	// void PaymentConstraints_set_htlc_minimum_msat(struct LDKPaymentConstraints *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_set_htlc_minimum_msat")] public static extern void PaymentConstraintsSetHtlcMinimumMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPaymentConstraints PaymentConstraints_new(uint32_t max_cltv_expiry_arg, uint64_t htlc_minimum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_new")] public static extern long PaymentConstraintsNew(int _max_cltv_expiry_arg, long _htlc_minimum_msat_arg);
	// uint64_t PaymentConstraints_clone_ptr(LDKPaymentConstraints *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_clone_ptr")] public static extern long PaymentConstraintsClonePtr(long _arg);
	// struct LDKPaymentConstraints PaymentConstraints_clone(const struct LDKPaymentConstraints *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_clone")] public static extern long PaymentConstraintsClone(long _orig);
	// struct LDKCVec_u8Z ForwardTlvs_write(const struct LDKForwardTlvs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_write")] public static extern long ForwardTlvsWrite(long _obj);
	// struct LDKCVec_u8Z ReceiveTlvs_write(const struct LDKReceiveTlvs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_write")] public static extern long ReceiveTlvsWrite(long _obj);
	// struct LDKCVec_u8Z PaymentRelay_write(const struct LDKPaymentRelay *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_write")] public static extern long PaymentRelayWrite(long _obj);
	// struct LDKCResult_PaymentRelayDecodeErrorZ PaymentRelay_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_read")] public static extern long PaymentRelayRead(long _ser);
	// struct LDKCVec_u8Z PaymentConstraints_write(const struct LDKPaymentConstraints *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_write")] public static extern long PaymentConstraintsWrite(long _obj);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ PaymentConstraints_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_read")] public static extern long PaymentConstraintsRead(long _ser);
	// void PaymentPurpose_free(struct LDKPaymentPurpose this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_free")] public static extern void PaymentPurposeFree(long _this_ptr);
	// uint64_t PaymentPurpose_clone_ptr(LDKPaymentPurpose *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone_ptr")] public static extern long PaymentPurposeClonePtr(long _arg);
	// struct LDKPaymentPurpose PaymentPurpose_clone(const struct LDKPaymentPurpose *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone")] public static extern long PaymentPurposeClone(long _orig);
	// struct LDKPaymentPurpose PaymentPurpose_invoice_payment(struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_invoice_payment")] public static extern long PaymentPurposeInvoicePayment(long _payment_preimage, long _payment_secret);
	// struct LDKPaymentPurpose PaymentPurpose_spontaneous_payment(struct LDKThirtyTwoBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_spontaneous_payment")] public static extern long PaymentPurposeSpontaneousPayment(long _a);
	// bool PaymentPurpose_eq(const struct LDKPaymentPurpose *NONNULL_PTR a, const struct LDKPaymentPurpose *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_eq")] public static extern bool PaymentPurposeEq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_ThirtyTwoBytesZ PaymentPurpose_preimage(const struct LDKPaymentPurpose *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_preimage")] public static extern long PaymentPurposePreimage(long _this_arg);
	// struct LDKCVec_u8Z PaymentPurpose_write(const struct LDKPaymentPurpose *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_write")] public static extern long PaymentPurposeWrite(long _obj);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ PaymentPurpose_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_read")] public static extern long PaymentPurposeRead(long _ser);
	// void ClaimedHTLC_free(struct LDKClaimedHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_free")] public static extern void ClaimedHTLCFree(long _this_obj);
	// const uint8_t (*ClaimedHTLC_get_channel_id(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_channel_id")] public static extern long ClaimedHTLCGetChannelId(long _this_ptr);
	// void ClaimedHTLC_set_channel_id(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_channel_id")] public static extern void ClaimedHTLCSetChannelId(long _this_ptr, long _val);
	// struct LDKU128 ClaimedHTLC_get_user_channel_id(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_user_channel_id")] public static extern long ClaimedHTLCGetUserChannelId(long _this_ptr);
	// void ClaimedHTLC_set_user_channel_id(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_user_channel_id")] public static extern void ClaimedHTLCSetUserChannelId(long _this_ptr, long _val);
	// uint32_t ClaimedHTLC_get_cltv_expiry(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_cltv_expiry")] public static extern int ClaimedHTLCGetCltvExpiry(long _this_ptr);
	// void ClaimedHTLC_set_cltv_expiry(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_cltv_expiry")] public static extern void ClaimedHTLCSetCltvExpiry(long _this_ptr, int _val);
	// uint64_t ClaimedHTLC_get_value_msat(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_value_msat")] public static extern long ClaimedHTLCGetValueMsat(long _this_ptr);
	// void ClaimedHTLC_set_value_msat(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_value_msat")] public static extern void ClaimedHTLCSetValueMsat(long _this_ptr, long _val);
	// uint64_t ClaimedHTLC_get_counterparty_skimmed_fee_msat(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_counterparty_skimmed_fee_msat")] public static extern long ClaimedHTLCGetCounterpartySkimmedFeeMsat(long _this_ptr);
	// void ClaimedHTLC_set_counterparty_skimmed_fee_msat(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_counterparty_skimmed_fee_msat")] public static extern void ClaimedHTLCSetCounterpartySkimmedFeeMsat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClaimedHTLC ClaimedHTLC_new(struct LDKThirtyTwoBytes channel_id_arg, struct LDKU128 user_channel_id_arg, uint32_t cltv_expiry_arg, uint64_t value_msat_arg, uint64_t counterparty_skimmed_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_new")] public static extern long ClaimedHTLCNew(long _channel_id_arg, long _user_channel_id_arg, int _cltv_expiry_arg, long _value_msat_arg, long _counterparty_skimmed_fee_msat_arg);
	// uint64_t ClaimedHTLC_clone_ptr(LDKClaimedHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_clone_ptr")] public static extern long ClaimedHTLCClonePtr(long _arg);
	// struct LDKClaimedHTLC ClaimedHTLC_clone(const struct LDKClaimedHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_clone")] public static extern long ClaimedHTLCClone(long _orig);
	// bool ClaimedHTLC_eq(const struct LDKClaimedHTLC *NONNULL_PTR a, const struct LDKClaimedHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_eq")] public static extern bool ClaimedHTLCEq(long _a, long _b);
	// struct LDKCVec_u8Z ClaimedHTLC_write(const struct LDKClaimedHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_write")] public static extern long ClaimedHTLCWrite(long _obj);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ ClaimedHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_read")] public static extern long ClaimedHTLCRead(long _ser);
	// void PathFailure_free(struct LDKPathFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_free")] public static extern void PathFailureFree(long _this_ptr);
	// uint64_t PathFailure_clone_ptr(LDKPathFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_clone_ptr")] public static extern long PathFailureClonePtr(long _arg);
	// struct LDKPathFailure PathFailure_clone(const struct LDKPathFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_clone")] public static extern long PathFailureClone(long _orig);
	// struct LDKPathFailure PathFailure_initial_send(struct LDKAPIError err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_initial_send")] public static extern long PathFailureInitialSend(long _err);
	// struct LDKPathFailure PathFailure_on_path(struct LDKCOption_NetworkUpdateZ network_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_on_path")] public static extern long PathFailureOnPath(long _network_update);
	// bool PathFailure_eq(const struct LDKPathFailure *NONNULL_PTR a, const struct LDKPathFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_eq")] public static extern bool PathFailureEq(long _a, long _b);
	// struct LDKCVec_u8Z PathFailure_write(const struct LDKPathFailure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_write")] public static extern long PathFailureWrite(long _obj);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ PathFailure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_read")] public static extern long PathFailureRead(long _ser);
	// void ClosureReason_free(struct LDKClosureReason this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_free")] public static extern void ClosureReasonFree(long _this_ptr);
	// uint64_t ClosureReason_clone_ptr(LDKClosureReason *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone_ptr")] public static extern long ClosureReasonClonePtr(long _arg);
	// struct LDKClosureReason ClosureReason_clone(const struct LDKClosureReason *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone")] public static extern long ClosureReasonClone(long _orig);
	// struct LDKClosureReason ClosureReason_counterparty_force_closed(struct LDKUntrustedString peer_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_force_closed")] public static extern long ClosureReasonCounterpartyForceClosed(long _peer_msg);
	// struct LDKClosureReason ClosureReason_holder_force_closed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_holder_force_closed")] public static extern long ClosureReasonHolderForceClosed();
	// struct LDKClosureReason ClosureReason_cooperative_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_cooperative_closure")] public static extern long ClosureReasonCooperativeClosure();
	// struct LDKClosureReason ClosureReason_commitment_tx_confirmed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_commitment_tx_confirmed")] public static extern long ClosureReasonCommitmentTxConfirmed();
	// struct LDKClosureReason ClosureReason_funding_timed_out(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_funding_timed_out")] public static extern long ClosureReasonFundingTimedOut();
	// struct LDKClosureReason ClosureReason_processing_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_processing_error")] public static extern long ClosureReasonProcessingError(long _err);
	// struct LDKClosureReason ClosureReason_disconnected_peer(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_disconnected_peer")] public static extern long ClosureReasonDisconnectedPeer();
	// struct LDKClosureReason ClosureReason_outdated_channel_manager(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_outdated_channel_manager")] public static extern long ClosureReasonOutdatedChannelManager();
	// struct LDKClosureReason ClosureReason_counterparty_coop_closed_unfunded_channel(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_coop_closed_unfunded_channel")] public static extern long ClosureReasonCounterpartyCoopClosedUnfundedChannel();
	// struct LDKClosureReason ClosureReason_funding_batch_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_funding_batch_closure")] public static extern long ClosureReasonFundingBatchClosure();
	// bool ClosureReason_eq(const struct LDKClosureReason *NONNULL_PTR a, const struct LDKClosureReason *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_eq")] public static extern bool ClosureReasonEq(long _a, long _b);
	// struct LDKCVec_u8Z ClosureReason_write(const struct LDKClosureReason *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_write")] public static extern long ClosureReasonWrite(long _obj);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ ClosureReason_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_read")] public static extern long ClosureReasonRead(long _ser);
	// void HTLCDestination_free(struct LDKHTLCDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_free")] public static extern void HTLCDestinationFree(long _this_ptr);
	// uint64_t HTLCDestination_clone_ptr(LDKHTLCDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone_ptr")] public static extern long HTLCDestinationClonePtr(long _arg);
	// struct LDKHTLCDestination HTLCDestination_clone(const struct LDKHTLCDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone")] public static extern long HTLCDestinationClone(long _orig);
	// struct LDKHTLCDestination HTLCDestination_next_hop_channel(struct LDKPublicKey node_id, struct LDKThirtyTwoBytes channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_next_hop_channel")] public static extern long HTLCDestinationNextHopChannel(long _node_id, long _channel_id);
	// struct LDKHTLCDestination HTLCDestination_unknown_next_hop(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_unknown_next_hop")] public static extern long HTLCDestinationUnknownNextHop(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_invalid_forward(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_invalid_forward")] public static extern long HTLCDestinationInvalidForward(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_failed_payment(struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_failed_payment")] public static extern long HTLCDestinationFailedPayment(long _payment_hash);
	// bool HTLCDestination_eq(const struct LDKHTLCDestination *NONNULL_PTR a, const struct LDKHTLCDestination *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_eq")] public static extern bool HTLCDestinationEq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCDestination_write(const struct LDKHTLCDestination *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_write")] public static extern long HTLCDestinationWrite(long _obj);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ HTLCDestination_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_read")] public static extern long HTLCDestinationRead(long _ser);
	// enum LDKPaymentFailureReason PaymentFailureReason_clone(const enum LDKPaymentFailureReason *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_clone")] public static extern PaymentFailureReason PaymentFailureReasonClone(long _orig);
	// enum LDKPaymentFailureReason PaymentFailureReason_recipient_rejected(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_recipient_rejected")] public static extern PaymentFailureReason PaymentFailureReasonRecipientRejected();
	// enum LDKPaymentFailureReason PaymentFailureReason_user_abandoned(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_user_abandoned")] public static extern PaymentFailureReason PaymentFailureReasonUserAbandoned();
	// enum LDKPaymentFailureReason PaymentFailureReason_retries_exhausted(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_retries_exhausted")] public static extern PaymentFailureReason PaymentFailureReasonRetriesExhausted();
	// enum LDKPaymentFailureReason PaymentFailureReason_payment_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_payment_expired")] public static extern PaymentFailureReason PaymentFailureReasonPaymentExpired();
	// enum LDKPaymentFailureReason PaymentFailureReason_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_route_not_found")] public static extern PaymentFailureReason PaymentFailureReasonRouteNotFound();
	// enum LDKPaymentFailureReason PaymentFailureReason_unexpected_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_unexpected_error")] public static extern PaymentFailureReason PaymentFailureReasonUnexpectedError();
	// bool PaymentFailureReason_eq(const enum LDKPaymentFailureReason *NONNULL_PTR a, const enum LDKPaymentFailureReason *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_eq")] public static extern bool PaymentFailureReasonEq(long _a, long _b);
	// struct LDKCVec_u8Z PaymentFailureReason_write(const enum LDKPaymentFailureReason *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_write")] public static extern long PaymentFailureReasonWrite(long _obj);
	// struct LDKCResult_PaymentFailureReasonDecodeErrorZ PaymentFailureReason_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_read")] public static extern long PaymentFailureReasonRead(long _ser);
	// void Event_free(struct LDKEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_free")] public static extern void EventFree(long _this_ptr);
	// uint64_t Event_clone_ptr(LDKEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone_ptr")] public static extern long EventClonePtr(long _arg);
	// struct LDKEvent Event_clone(const struct LDKEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone")] public static extern long EventClone(long _orig);
	// struct LDKEvent Event_funding_generation_ready(struct LDKThirtyTwoBytes temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t channel_value_satoshis, struct LDKCVec_u8Z output_script, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_funding_generation_ready")] public static extern long EventFundingGenerationReady(long _temporary_channel_id, long _counterparty_node_id, long _channel_value_satoshis, long _output_script, long _user_channel_id);
	// struct LDKEvent Event_payment_claimable(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields onion_fields, uint64_t amount_msat, uint64_t counterparty_skimmed_fee_msat, struct LDKPaymentPurpose purpose, struct LDKCOption_ThirtyTwoBytesZ via_channel_id, struct LDKCOption_U128Z via_user_channel_id, struct LDKCOption_u32Z claim_deadline);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimable")] public static extern long EventPaymentClaimable(long _receiver_node_id, long _payment_hash, long _onion_fields, long _amount_msat, long _counterparty_skimmed_fee_msat, long _purpose, long _via_channel_id, long _via_user_channel_id, long _claim_deadline);
	// struct LDKEvent Event_payment_claimed(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, uint64_t amount_msat, struct LDKPaymentPurpose purpose, struct LDKCVec_ClaimedHTLCZ htlcs, struct LDKCOption_u64Z sender_intended_total_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimed")] public static extern long EventPaymentClaimed(long _receiver_node_id, long _payment_hash, long _amount_msat, long _purpose, long _htlcs, long _sender_intended_total_msat);
	// struct LDKEvent Event_connection_needed(struct LDKPublicKey node_id, struct LDKCVec_SocketAddressZ addresses);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_connection_needed")] public static extern long EventConnectionNeeded(long _node_id, long _addresses);
	// struct LDKEvent Event_invoice_request_failed(struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_invoice_request_failed")] public static extern long EventInvoiceRequestFailed(long _payment_id);
	// struct LDKEvent Event_payment_sent(struct LDKCOption_ThirtyTwoBytesZ payment_id, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z fee_paid_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_sent")] public static extern long EventPaymentSent(long _payment_id, long _payment_preimage, long _payment_hash, long _fee_paid_msat);
	// struct LDKEvent Event_payment_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_PaymentFailureReasonZ reason);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_failed")] public static extern long EventPaymentFailed(long _payment_id, long _payment_hash, long _reason);
	// struct LDKEvent Event_payment_path_successful(struct LDKThirtyTwoBytes payment_id, struct LDKCOption_ThirtyTwoBytesZ payment_hash, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_successful")] public static extern long EventPaymentPathSuccessful(long _payment_id, long _payment_hash, long _path);
	// struct LDKEvent Event_payment_path_failed(struct LDKCOption_ThirtyTwoBytesZ payment_id, struct LDKThirtyTwoBytes payment_hash, bool payment_failed_permanently, struct LDKPathFailure failure, struct LDKPath path, struct LDKCOption_u64Z short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_failed")] public static extern long EventPaymentPathFailed(long _payment_id, long _payment_hash, bool _payment_failed_permanently, long _failure, long _path, long _short_channel_id);
	// struct LDKEvent Event_probe_successful(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_successful")] public static extern long EventProbeSuccessful(long _payment_id, long _payment_hash, long _path);
	// struct LDKEvent Event_probe_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKPath path, struct LDKCOption_u64Z short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_failed")] public static extern long EventProbeFailed(long _payment_id, long _payment_hash, long _path, long _short_channel_id);
	// struct LDKEvent Event_pending_htlcs_forwardable(uint64_t time_forwardable);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_pending_htlcs_forwardable")] public static extern long EventPendingHtlcsForwardable(long _time_forwardable);
	// struct LDKEvent Event_htlcintercepted(struct LDKThirtyTwoBytes intercept_id, uint64_t requested_next_hop_scid, struct LDKThirtyTwoBytes payment_hash, uint64_t inbound_amount_msat, uint64_t expected_outbound_amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlcintercepted")] public static extern long EventHtlcintercepted(long _intercept_id, long _requested_next_hop_scid, long _payment_hash, long _inbound_amount_msat, long _expected_outbound_amount_msat);
	// struct LDKEvent Event_spendable_outputs(struct LDKCVec_SpendableOutputDescriptorZ outputs, struct LDKCOption_ThirtyTwoBytesZ channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_spendable_outputs")] public static extern long EventSpendableOutputs(long _outputs, long _channel_id);
	// struct LDKEvent Event_payment_forwarded(struct LDKCOption_ThirtyTwoBytesZ prev_channel_id, struct LDKCOption_ThirtyTwoBytesZ next_channel_id, struct LDKCOption_u64Z fee_earned_msat, bool claim_from_onchain_tx, struct LDKCOption_u64Z outbound_amount_forwarded_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_forwarded")] public static extern long EventPaymentForwarded(long _prev_channel_id, long _next_channel_id, long _fee_earned_msat, bool _claim_from_onchain_tx, long _outbound_amount_forwarded_msat);
	// struct LDKEvent Event_channel_pending(struct LDKThirtyTwoBytes channel_id, struct LDKU128 user_channel_id, struct LDKCOption_ThirtyTwoBytesZ former_temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKOutPoint funding_txo);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_pending")] public static extern long EventChannelPending(long _channel_id, long _user_channel_id, long _former_temporary_channel_id, long _counterparty_node_id, long _funding_txo);
	// struct LDKEvent Event_channel_ready(struct LDKThirtyTwoBytes channel_id, struct LDKU128 user_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_ready")] public static extern long EventChannelReady(long _channel_id, long _user_channel_id, long _counterparty_node_id, long _channel_type);
	// struct LDKEvent Event_channel_closed(struct LDKThirtyTwoBytes channel_id, struct LDKU128 user_channel_id, struct LDKClosureReason reason, struct LDKPublicKey counterparty_node_id, struct LDKCOption_u64Z channel_capacity_sats, struct LDKOutPoint channel_funding_txo);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_closed")] public static extern long EventChannelClosed(long _channel_id, long _user_channel_id, long _reason, long _counterparty_node_id, long _channel_capacity_sats, long _channel_funding_txo);
	// struct LDKEvent Event_discard_funding(struct LDKThirtyTwoBytes channel_id, struct LDKTransaction transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_discard_funding")] public static extern long EventDiscardFunding(long _channel_id, long _transaction);
	// struct LDKEvent Event_open_channel_request(struct LDKThirtyTwoBytes temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t funding_satoshis, uint64_t push_msat, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_open_channel_request")] public static extern long EventOpenChannelRequest(long _temporary_channel_id, long _counterparty_node_id, long _funding_satoshis, long _push_msat, long _channel_type);
	// struct LDKEvent Event_htlchandling_failed(struct LDKThirtyTwoBytes prev_channel_id, struct LDKHTLCDestination failed_next_destination);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlchandling_failed")] public static extern long EventHtlchandlingFailed(long _prev_channel_id, long _failed_next_destination);
	// struct LDKEvent Event_bump_transaction(struct LDKBumpTransactionEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_bump_transaction")] public static extern long EventBumpTransaction(long _a);
	// bool Event_eq(const struct LDKEvent *NONNULL_PTR a, const struct LDKEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_eq")] public static extern bool EventEq(long _a, long _b);
	// struct LDKCVec_u8Z Event_write(const struct LDKEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_write")] public static extern long EventWrite(long _obj);
	// struct LDKCResult_COption_EventZDecodeErrorZ Event_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_read")] public static extern long EventRead(long _ser);
	// void MessageSendEvent_free(struct LDKMessageSendEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_free")] public static extern void MessageSendEventFree(long _this_ptr);
	// uint64_t MessageSendEvent_clone_ptr(LDKMessageSendEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone_ptr")] public static extern long MessageSendEventClonePtr(long _arg);
	// struct LDKMessageSendEvent MessageSendEvent_clone(const struct LDKMessageSendEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone")] public static extern long MessageSendEventClone(long _orig);
	// struct LDKMessageSendEvent MessageSendEvent_send_accept_channel(struct LDKPublicKey node_id, struct LDKAcceptChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_accept_channel")] public static extern long MessageSendEventSendAcceptChannel(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_accept_channel_v2(struct LDKPublicKey node_id, struct LDKAcceptChannelV2 msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_accept_channel_v2")] public static extern long MessageSendEventSendAcceptChannelV2(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_open_channel(struct LDKPublicKey node_id, struct LDKOpenChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_open_channel")] public static extern long MessageSendEventSendOpenChannel(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_open_channel_v2(struct LDKPublicKey node_id, struct LDKOpenChannelV2 msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_open_channel_v2")] public static extern long MessageSendEventSendOpenChannelV2(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_created(struct LDKPublicKey node_id, struct LDKFundingCreated msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_created")] public static extern long MessageSendEventSendFundingCreated(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_signed(struct LDKPublicKey node_id, struct LDKFundingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_signed")] public static extern long MessageSendEventSendFundingSigned(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_stfu(struct LDKPublicKey node_id, struct LDKStfu msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_stfu")] public static extern long MessageSendEventSendStfu(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice(struct LDKPublicKey node_id, struct LDKSplice msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice")] public static extern long MessageSendEventSendSplice(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice_ack(struct LDKPublicKey node_id, struct LDKSpliceAck msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice_ack")] public static extern long MessageSendEventSendSpliceAck(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice_locked(struct LDKPublicKey node_id, struct LDKSpliceLocked msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice_locked")] public static extern long MessageSendEventSendSpliceLocked(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_add_input(struct LDKPublicKey node_id, struct LDKTxAddInput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_add_input")] public static extern long MessageSendEventSendTxAddInput(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_add_output(struct LDKPublicKey node_id, struct LDKTxAddOutput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_add_output")] public static extern long MessageSendEventSendTxAddOutput(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_remove_input(struct LDKPublicKey node_id, struct LDKTxRemoveInput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_remove_input")] public static extern long MessageSendEventSendTxRemoveInput(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_remove_output(struct LDKPublicKey node_id, struct LDKTxRemoveOutput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_remove_output")] public static extern long MessageSendEventSendTxRemoveOutput(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_complete(struct LDKPublicKey node_id, struct LDKTxComplete msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_complete")] public static extern long MessageSendEventSendTxComplete(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_signatures(struct LDKPublicKey node_id, struct LDKTxSignatures msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_signatures")] public static extern long MessageSendEventSendTxSignatures(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_init_rbf(struct LDKPublicKey node_id, struct LDKTxInitRbf msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_init_rbf")] public static extern long MessageSendEventSendTxInitRbf(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_ack_rbf(struct LDKPublicKey node_id, struct LDKTxAckRbf msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_ack_rbf")] public static extern long MessageSendEventSendTxAckRbf(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_abort(struct LDKPublicKey node_id, struct LDKTxAbort msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_abort")] public static extern long MessageSendEventSendTxAbort(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_ready(struct LDKPublicKey node_id, struct LDKChannelReady msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_ready")] public static extern long MessageSendEventSendChannelReady(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_announcement_signatures(struct LDKPublicKey node_id, struct LDKAnnouncementSignatures msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_announcement_signatures")] public static extern long MessageSendEventSendAnnouncementSignatures(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_update_htlcs(struct LDKPublicKey node_id, struct LDKCommitmentUpdate updates);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_update_htlcs")] public static extern long MessageSendEventUpdateHtlcs(long _node_id, long _updates);
	// struct LDKMessageSendEvent MessageSendEvent_send_revoke_and_ack(struct LDKPublicKey node_id, struct LDKRevokeAndACK msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_revoke_and_ack")] public static extern long MessageSendEventSendRevokeAndAck(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_closing_signed(struct LDKPublicKey node_id, struct LDKClosingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_closing_signed")] public static extern long MessageSendEventSendClosingSigned(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_shutdown(struct LDKPublicKey node_id, struct LDKShutdown msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_shutdown")] public static extern long MessageSendEventSendShutdown(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_reestablish(struct LDKPublicKey node_id, struct LDKChannelReestablish msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_reestablish")] public static extern long MessageSendEventSendChannelReestablish(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_announcement(struct LDKPublicKey node_id, struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_announcement")] public static extern long MessageSendEventSendChannelAnnouncement(long _node_id, long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_announcement(struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_announcement")] public static extern long MessageSendEventBroadcastChannelAnnouncement(long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_update(struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_update")] public static extern long MessageSendEventBroadcastChannelUpdate(long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_node_announcement(struct LDKNodeAnnouncement msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_node_announcement")] public static extern long MessageSendEventBroadcastNodeAnnouncement(long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_update(struct LDKPublicKey node_id, struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_update")] public static extern long MessageSendEventSendChannelUpdate(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_handle_error(struct LDKPublicKey node_id, struct LDKErrorAction action);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_handle_error")] public static extern long MessageSendEventHandleError(long _node_id, long _action);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_range_query(struct LDKPublicKey node_id, struct LDKQueryChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_range_query")] public static extern long MessageSendEventSendChannelRangeQuery(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_short_ids_query(struct LDKPublicKey node_id, struct LDKQueryShortChannelIds msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_short_ids_query")] public static extern long MessageSendEventSendShortIdsQuery(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_reply_channel_range(struct LDKPublicKey node_id, struct LDKReplyChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_reply_channel_range")] public static extern long MessageSendEventSendReplyChannelRange(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_gossip_timestamp_filter(struct LDKPublicKey node_id, struct LDKGossipTimestampFilter msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_gossip_timestamp_filter")] public static extern long MessageSendEventSendGossipTimestampFilter(long _node_id, long _msg);
	// void MessageSendEventsProvider_free(struct LDKMessageSendEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_free")] public static extern void MessageSendEventsProviderFree(long _this_ptr);
	// void EventsProvider_free(struct LDKEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_free")] public static extern void EventsProviderFree(long _this_ptr);
	// void EventHandler_free(struct LDKEventHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_free")] public static extern void EventHandlerFree(long _this_ptr);
	// void AnchorDescriptor_free(struct LDKAnchorDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_free")] public static extern void AnchorDescriptorFree(long _this_obj);
	// struct LDKChannelDerivationParameters AnchorDescriptor_get_channel_derivation_parameters(const struct LDKAnchorDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_get_channel_derivation_parameters")] public static extern long AnchorDescriptorGetChannelDerivationParameters(long _this_ptr);
	// void AnchorDescriptor_set_channel_derivation_parameters(struct LDKAnchorDescriptor *NONNULL_PTR this_ptr, struct LDKChannelDerivationParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_set_channel_derivation_parameters")] public static extern void AnchorDescriptorSetChannelDerivationParameters(long _this_ptr, long _val);
	// struct LDKOutPoint AnchorDescriptor_get_outpoint(const struct LDKAnchorDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_get_outpoint")] public static extern long AnchorDescriptorGetOutpoint(long _this_ptr);
	// void AnchorDescriptor_set_outpoint(struct LDKAnchorDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_set_outpoint")] public static extern void AnchorDescriptorSetOutpoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAnchorDescriptor AnchorDescriptor_new(struct LDKChannelDerivationParameters channel_derivation_parameters_arg, struct LDKOutPoint outpoint_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_new")] public static extern long AnchorDescriptorNew(long _channel_derivation_parameters_arg, long _outpoint_arg);
	// uint64_t AnchorDescriptor_clone_ptr(LDKAnchorDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_clone_ptr")] public static extern long AnchorDescriptorClonePtr(long _arg);
	// struct LDKAnchorDescriptor AnchorDescriptor_clone(const struct LDKAnchorDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_clone")] public static extern long AnchorDescriptorClone(long _orig);
	// bool AnchorDescriptor_eq(const struct LDKAnchorDescriptor *NONNULL_PTR a, const struct LDKAnchorDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_eq")] public static extern bool AnchorDescriptorEq(long _a, long _b);
	// MUST_USE_RES struct LDKTxOut AnchorDescriptor_previous_utxo(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_previous_utxo")] public static extern long AnchorDescriptorPreviousUtxo(long _this_arg);
	// MUST_USE_RES struct LDKTxIn AnchorDescriptor_unsigned_tx_input(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_unsigned_tx_input")] public static extern long AnchorDescriptorUnsignedTxInput(long _this_arg);
	// MUST_USE_RES struct LDKCVec_u8Z AnchorDescriptor_witness_script(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_witness_script")] public static extern long AnchorDescriptorWitnessScript(long _this_arg);
	// MUST_USE_RES struct LDKWitness AnchorDescriptor_tx_input_witness(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg, struct LDKECDSASignature signature);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_tx_input_witness")] public static extern long AnchorDescriptorTxInputWitness(long _this_arg, long _signature);
	// MUST_USE_RES struct LDKWriteableEcdsaChannelSigner AnchorDescriptor_derive_channel_signer(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg, const struct LDKSignerProvider *NONNULL_PTR signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_derive_channel_signer")] public static extern long AnchorDescriptorDeriveChannelSigner(long _this_arg, long _signer_provider);
	// void BumpTransactionEvent_free(struct LDKBumpTransactionEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_free")] public static extern void BumpTransactionEventFree(long _this_ptr);
	// uint64_t BumpTransactionEvent_clone_ptr(LDKBumpTransactionEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_clone_ptr")] public static extern long BumpTransactionEventClonePtr(long _arg);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_clone(const struct LDKBumpTransactionEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_clone")] public static extern long BumpTransactionEventClone(long _orig);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_channel_close(struct LDKThirtyTwoBytes claim_id, uint32_t package_target_feerate_sat_per_1000_weight, struct LDKTransaction commitment_tx, uint64_t commitment_tx_fee_satoshis, struct LDKAnchorDescriptor anchor_descriptor, struct LDKCVec_HTLCOutputInCommitmentZ pending_htlcs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_channel_close")] public static extern long BumpTransactionEventChannelClose(long _claim_id, int _package_target_feerate_sat_per_1000_weight, long _commitment_tx, long _commitment_tx_fee_satoshis, long _anchor_descriptor, long _pending_htlcs);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_htlcresolution(struct LDKThirtyTwoBytes claim_id, uint32_t target_feerate_sat_per_1000_weight, struct LDKCVec_HTLCDescriptorZ htlc_descriptors, uint32_t tx_lock_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_htlcresolution")] public static extern long BumpTransactionEventHtlcresolution(long _claim_id, int _target_feerate_sat_per_1000_weight, long _htlc_descriptors, int _tx_lock_time);
	// bool BumpTransactionEvent_eq(const struct LDKBumpTransactionEvent *NONNULL_PTR a, const struct LDKBumpTransactionEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_eq")] public static extern bool BumpTransactionEventEq(long _a, long _b);
	// void Input_free(struct LDKInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_free")] public static extern void InputFree(long _this_obj);
	// struct LDKOutPoint Input_get_outpoint(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_outpoint")] public static extern long InputGetOutpoint(long _this_ptr);
	// void Input_set_outpoint(struct LDKInput *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_outpoint")] public static extern void InputSetOutpoint(long _this_ptr, long _val);
	// struct LDKTxOut Input_get_previous_utxo(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_previous_utxo")] public static extern long InputGetPreviousUtxo(long _this_ptr);
	// void Input_set_previous_utxo(struct LDKInput *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_previous_utxo")] public static extern void InputSetPreviousUtxo(long _this_ptr, long _val);
	// uint64_t Input_get_satisfaction_weight(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_satisfaction_weight")] public static extern long InputGetSatisfactionWeight(long _this_ptr);
	// void Input_set_satisfaction_weight(struct LDKInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_satisfaction_weight")] public static extern void InputSetSatisfactionWeight(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInput Input_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut previous_utxo_arg, uint64_t satisfaction_weight_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_new")] public static extern long InputNew(long _outpoint_arg, long _previous_utxo_arg, long _satisfaction_weight_arg);
	// uint64_t Input_clone_ptr(LDKInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_clone_ptr")] public static extern long InputClonePtr(long _arg);
	// struct LDKInput Input_clone(const struct LDKInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_clone")] public static extern long InputClone(long _orig);
	// uint64_t Input_hash(const struct LDKInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_hash")] public static extern long InputHash(long _o);
	// bool Input_eq(const struct LDKInput *NONNULL_PTR a, const struct LDKInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_eq")] public static extern bool InputEq(long _a, long _b);
	// void Utxo_free(struct LDKUtxo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_free")] public static extern void UtxoFree(long _this_obj);
	// struct LDKOutPoint Utxo_get_outpoint(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_outpoint")] public static extern long UtxoGetOutpoint(long _this_ptr);
	// void Utxo_set_outpoint(struct LDKUtxo *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_outpoint")] public static extern void UtxoSetOutpoint(long _this_ptr, long _val);
	// struct LDKTxOut Utxo_get_output(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_output")] public static extern long UtxoGetOutput(long _this_ptr);
	// void Utxo_set_output(struct LDKUtxo *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_output")] public static extern void UtxoSetOutput(long _this_ptr, long _val);
	// uint64_t Utxo_get_satisfaction_weight(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_satisfaction_weight")] public static extern long UtxoGetSatisfactionWeight(long _this_ptr);
	// void Utxo_set_satisfaction_weight(struct LDKUtxo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_satisfaction_weight")] public static extern void UtxoSetSatisfactionWeight(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUtxo Utxo_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut output_arg, uint64_t satisfaction_weight_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_new")] public static extern long UtxoNew(long _outpoint_arg, long _output_arg, long _satisfaction_weight_arg);
	// uint64_t Utxo_clone_ptr(LDKUtxo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_clone_ptr")] public static extern long UtxoClonePtr(long _arg);
	// struct LDKUtxo Utxo_clone(const struct LDKUtxo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_clone")] public static extern long UtxoClone(long _orig);
	// uint64_t Utxo_hash(const struct LDKUtxo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_hash")] public static extern long UtxoHash(long _o);
	// bool Utxo_eq(const struct LDKUtxo *NONNULL_PTR a, const struct LDKUtxo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_eq")] public static extern bool UtxoEq(long _a, long _b);
	// MUST_USE_RES struct LDKUtxo Utxo_new_p2pkh(struct LDKOutPoint outpoint, uint64_t value, const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_new_p2pkh")] public static extern long UtxoNewP2Pkh(long _outpoint, long _value, long _pubkey_hash);
	// void CoinSelection_free(struct LDKCoinSelection this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_free")] public static extern void CoinSelectionFree(long _this_obj);
	// struct LDKCVec_UtxoZ CoinSelection_get_confirmed_utxos(const struct LDKCoinSelection *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_get_confirmed_utxos")] public static extern long CoinSelectionGetConfirmedUtxos(long _this_ptr);
	// void CoinSelection_set_confirmed_utxos(struct LDKCoinSelection *NONNULL_PTR this_ptr, struct LDKCVec_UtxoZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_set_confirmed_utxos")] public static extern void CoinSelectionSetConfirmedUtxos(long _this_ptr, long _val);
	// struct LDKCOption_TxOutZ CoinSelection_get_change_output(const struct LDKCoinSelection *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_get_change_output")] public static extern long CoinSelectionGetChangeOutput(long _this_ptr);
	// void CoinSelection_set_change_output(struct LDKCoinSelection *NONNULL_PTR this_ptr, struct LDKCOption_TxOutZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_set_change_output")] public static extern void CoinSelectionSetChangeOutput(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCoinSelection CoinSelection_new(struct LDKCVec_UtxoZ confirmed_utxos_arg, struct LDKCOption_TxOutZ change_output_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_new")] public static extern long CoinSelectionNew(long _confirmed_utxos_arg, long _change_output_arg);
	// uint64_t CoinSelection_clone_ptr(LDKCoinSelection *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_clone_ptr")] public static extern long CoinSelectionClonePtr(long _arg);
	// struct LDKCoinSelection CoinSelection_clone(const struct LDKCoinSelection *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_clone")] public static extern long CoinSelectionClone(long _orig);
	// void CoinSelectionSource_free(struct LDKCoinSelectionSource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_free")] public static extern void CoinSelectionSourceFree(long _this_ptr);
	// void WalletSource_free(struct LDKWalletSource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_free")] public static extern void WalletSourceFree(long _this_ptr);
	// void Wallet_free(struct LDKWallet this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_free")] public static extern void WalletFree(long _this_obj);
	// MUST_USE_RES struct LDKWallet Wallet_new(struct LDKWalletSource source, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_new")] public static extern long WalletNew(long _source, long _logger);
	// struct LDKCoinSelectionSource Wallet_as_CoinSelectionSource(const struct LDKWallet *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_as_CoinSelectionSource")] public static extern long WalletAsCoinSelectionSource(long _this_arg);
	// void BumpTransactionEventHandler_free(struct LDKBumpTransactionEventHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_free")] public static extern void BumpTransactionEventHandlerFree(long _this_obj);
	// MUST_USE_RES struct LDKBumpTransactionEventHandler BumpTransactionEventHandler_new(struct LDKBroadcasterInterface broadcaster, struct LDKCoinSelectionSource utxo_source, struct LDKSignerProvider signer_provider, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_new")] public static extern long BumpTransactionEventHandlerNew(long _broadcaster, long _utxo_source, long _signer_provider, long _logger);
	// void BumpTransactionEventHandler_handle_event(const struct LDKBumpTransactionEventHandler *NONNULL_PTR this_arg, const struct LDKBumpTransactionEvent *NONNULL_PTR event);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_handle_event")] public static extern void BumpTransactionEventHandlerHandleEvent(long _this_arg, long _event);
	// void FilesystemStore_free(struct LDKFilesystemStore this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_free")] public static extern void FilesystemStoreFree(long _this_obj);
	// MUST_USE_RES struct LDKFilesystemStore FilesystemStore_new(struct LDKStr data_dir);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_new")] public static extern long FilesystemStoreNew(long _data_dir);
	// MUST_USE_RES struct LDKStr FilesystemStore_get_data_dir(const struct LDKFilesystemStore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_get_data_dir")] public static extern long FilesystemStoreGetDataDir(long _this_arg);
	// struct LDKKVStore FilesystemStore_as_KVStore(const struct LDKFilesystemStore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_as_KVStore")] public static extern long FilesystemStoreAsKVStore(long _this_arg);
	// void BackgroundProcessor_free(struct LDKBackgroundProcessor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_free")] public static extern void BackgroundProcessorFree(long _this_obj);
	// void GossipSync_free(struct LDKGossipSync this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_free")] public static extern void GossipSyncFree(long _this_ptr);
	// struct LDKGossipSync GossipSync_p2_p(const struct LDKP2PGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_p2_p")] public static extern long GossipSyncP2P(long _a);
	// struct LDKGossipSync GossipSync_rapid(const struct LDKRapidGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_rapid")] public static extern long GossipSyncRapid(long _a);
	// struct LDKGossipSync GossipSync_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_none")] public static extern long GossipSyncNone();
	// MUST_USE_RES struct LDKBackgroundProcessor BackgroundProcessor_start(struct LDKPersister persister, struct LDKEventHandler event_handler, const struct LDKChainMonitor *NONNULL_PTR chain_monitor, const struct LDKChannelManager *NONNULL_PTR channel_manager, struct LDKGossipSync gossip_sync, const struct LDKPeerManager *NONNULL_PTR peer_manager, struct LDKLogger logger, struct LDKCOption_WriteableScoreZ scorer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_start")] public static extern long BackgroundProcessorStart(long _persister, long _event_handler, long _chain_monitor, long _channel_manager, long _gossip_sync, long _peer_manager, long _logger, long _scorer);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ BackgroundProcessor_join(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_join")] public static extern long BackgroundProcessorJoin(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ BackgroundProcessor_stop(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_stop")] public static extern long BackgroundProcessorStop(long _this_arg);
	// void Bolt11ParseError_free(struct LDKBolt11ParseError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_free")] public static extern void Bolt11ParseErrorFree(long _this_ptr);
	// uint64_t Bolt11ParseError_clone_ptr(LDKBolt11ParseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_clone_ptr")] public static extern long Bolt11ParseErrorClonePtr(long _arg);
	// struct LDKBolt11ParseError Bolt11ParseError_clone(const struct LDKBolt11ParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_clone")] public static extern long Bolt11ParseErrorClone(long _orig);
	// struct LDKBolt11ParseError Bolt11ParseError_bech32_error(struct LDKBech32Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_bech32_error")] public static extern long Bolt11ParseErrorBech32Error(long _a);
	// struct LDKBolt11ParseError Bolt11ParseError_parse_amount_error(struct LDKError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_parse_amount_error")] public static extern long Bolt11ParseErrorParseAmountError(int _a);
	// struct LDKBolt11ParseError Bolt11ParseError_malformed_signature(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_malformed_signature")] public static extern long Bolt11ParseErrorMalformedSignature(Secp256k1Error _a);
	// struct LDKBolt11ParseError Bolt11ParseError_bad_prefix(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_bad_prefix")] public static extern long Bolt11ParseErrorBadPrefix();
	// struct LDKBolt11ParseError Bolt11ParseError_unknown_currency(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_unknown_currency")] public static extern long Bolt11ParseErrorUnknownCurrency();
	// struct LDKBolt11ParseError Bolt11ParseError_unknown_si_prefix(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_unknown_si_prefix")] public static extern long Bolt11ParseErrorUnknownSiPrefix();
	// struct LDKBolt11ParseError Bolt11ParseError_malformed_hrp(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_malformed_hrp")] public static extern long Bolt11ParseErrorMalformedHrp();
	// struct LDKBolt11ParseError Bolt11ParseError_too_short_data_part(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_too_short_data_part")] public static extern long Bolt11ParseErrorTooShortDataPart();
	// struct LDKBolt11ParseError Bolt11ParseError_unexpected_end_of_tagged_fields(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_unexpected_end_of_tagged_fields")] public static extern long Bolt11ParseErrorUnexpectedEndOfTaggedFields();
	// struct LDKBolt11ParseError Bolt11ParseError_description_decode_error(struct LDKError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_description_decode_error")] public static extern long Bolt11ParseErrorDescriptionDecodeError(int _a);
	// struct LDKBolt11ParseError Bolt11ParseError_padding_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_padding_error")] public static extern long Bolt11ParseErrorPaddingError();
	// struct LDKBolt11ParseError Bolt11ParseError_integer_overflow_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_integer_overflow_error")] public static extern long Bolt11ParseErrorIntegerOverflowError();
	// struct LDKBolt11ParseError Bolt11ParseError_invalid_seg_wit_program_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_invalid_seg_wit_program_length")] public static extern long Bolt11ParseErrorInvalidSegWitProgramLength();
	// struct LDKBolt11ParseError Bolt11ParseError_invalid_pub_key_hash_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_invalid_pub_key_hash_length")] public static extern long Bolt11ParseErrorInvalidPubKeyHashLength();
	// struct LDKBolt11ParseError Bolt11ParseError_invalid_script_hash_length(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_invalid_script_hash_length")] public static extern long Bolt11ParseErrorInvalidScriptHashLength();
	// struct LDKBolt11ParseError Bolt11ParseError_invalid_recovery_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_invalid_recovery_id")] public static extern long Bolt11ParseErrorInvalidRecoveryId();
	// struct LDKBolt11ParseError Bolt11ParseError_invalid_slice_length(struct LDKStr a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_invalid_slice_length")] public static extern long Bolt11ParseErrorInvalidSliceLength(long _a);
	// struct LDKBolt11ParseError Bolt11ParseError_skip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_skip")] public static extern long Bolt11ParseErrorSkip();
	// bool Bolt11ParseError_eq(const struct LDKBolt11ParseError *NONNULL_PTR a, const struct LDKBolt11ParseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_eq")] public static extern bool Bolt11ParseErrorEq(long _a, long _b);
	// void ParseOrSemanticError_free(struct LDKParseOrSemanticError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_free")] public static extern void ParseOrSemanticErrorFree(long _this_ptr);
	// uint64_t ParseOrSemanticError_clone_ptr(LDKParseOrSemanticError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone_ptr")] public static extern long ParseOrSemanticErrorClonePtr(long _arg);
	// struct LDKParseOrSemanticError ParseOrSemanticError_clone(const struct LDKParseOrSemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone")] public static extern long ParseOrSemanticErrorClone(long _orig);
	// struct LDKParseOrSemanticError ParseOrSemanticError_parse_error(struct LDKBolt11ParseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_parse_error")] public static extern long ParseOrSemanticErrorParseError(long _a);
	// struct LDKParseOrSemanticError ParseOrSemanticError_semantic_error(enum LDKBolt11SemanticError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_semantic_error")] public static extern long ParseOrSemanticErrorSemanticError(Bolt11SemanticError _a);
	// bool ParseOrSemanticError_eq(const struct LDKParseOrSemanticError *NONNULL_PTR a, const struct LDKParseOrSemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_eq")] public static extern bool ParseOrSemanticErrorEq(long _a, long _b);
	// void Bolt11Invoice_free(struct LDKBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_free")] public static extern void Bolt11InvoiceFree(long _this_obj);
	// bool Bolt11Invoice_eq(const struct LDKBolt11Invoice *NONNULL_PTR a, const struct LDKBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_eq")] public static extern bool Bolt11InvoiceEq(long _a, long _b);
	// uint64_t Bolt11Invoice_clone_ptr(LDKBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_clone_ptr")] public static extern long Bolt11InvoiceClonePtr(long _arg);
	// struct LDKBolt11Invoice Bolt11Invoice_clone(const struct LDKBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_clone")] public static extern long Bolt11InvoiceClone(long _orig);
	// uint64_t Bolt11Invoice_hash(const struct LDKBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_hash")] public static extern long Bolt11InvoiceHash(long _o);
	// void SignedRawBolt11Invoice_free(struct LDKSignedRawBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_free")] public static extern void SignedRawBolt11InvoiceFree(long _this_obj);
	// bool SignedRawBolt11Invoice_eq(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR a, const struct LDKSignedRawBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_eq")] public static extern bool SignedRawBolt11InvoiceEq(long _a, long _b);
	// uint64_t SignedRawBolt11Invoice_clone_ptr(LDKSignedRawBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_clone_ptr")] public static extern long SignedRawBolt11InvoiceClonePtr(long _arg);
	// struct LDKSignedRawBolt11Invoice SignedRawBolt11Invoice_clone(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_clone")] public static extern long SignedRawBolt11InvoiceClone(long _orig);
	// uint64_t SignedRawBolt11Invoice_hash(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_hash")] public static extern long SignedRawBolt11InvoiceHash(long _o);
	// void RawBolt11Invoice_free(struct LDKRawBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_free")] public static extern void RawBolt11InvoiceFree(long _this_obj);
	// struct LDKRawDataPart RawBolt11Invoice_get_data(const struct LDKRawBolt11Invoice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_get_data")] public static extern long RawBolt11InvoiceGetData(long _this_ptr);
	// void RawBolt11Invoice_set_data(struct LDKRawBolt11Invoice *NONNULL_PTR this_ptr, struct LDKRawDataPart val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_set_data")] public static extern void RawBolt11InvoiceSetData(long _this_ptr, long _val);
	// bool RawBolt11Invoice_eq(const struct LDKRawBolt11Invoice *NONNULL_PTR a, const struct LDKRawBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_eq")] public static extern bool RawBolt11InvoiceEq(long _a, long _b);
	// uint64_t RawBolt11Invoice_clone_ptr(LDKRawBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_clone_ptr")] public static extern long RawBolt11InvoiceClonePtr(long _arg);
	// struct LDKRawBolt11Invoice RawBolt11Invoice_clone(const struct LDKRawBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_clone")] public static extern long RawBolt11InvoiceClone(long _orig);
	// uint64_t RawBolt11Invoice_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_hash")] public static extern long RawBolt11InvoiceHash(long _o);
	// void RawDataPart_free(struct LDKRawDataPart this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_free")] public static extern void RawDataPartFree(long _this_obj);
	// struct LDKPositiveTimestamp RawDataPart_get_timestamp(const struct LDKRawDataPart *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_get_timestamp")] public static extern long RawDataPartGetTimestamp(long _this_ptr);
	// void RawDataPart_set_timestamp(struct LDKRawDataPart *NONNULL_PTR this_ptr, struct LDKPositiveTimestamp val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_set_timestamp")] public static extern void RawDataPartSetTimestamp(long _this_ptr, long _val);
	// bool RawDataPart_eq(const struct LDKRawDataPart *NONNULL_PTR a, const struct LDKRawDataPart *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_eq")] public static extern bool RawDataPartEq(long _a, long _b);
	// uint64_t RawDataPart_clone_ptr(LDKRawDataPart *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone_ptr")] public static extern long RawDataPartClonePtr(long _arg);
	// struct LDKRawDataPart RawDataPart_clone(const struct LDKRawDataPart *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone")] public static extern long RawDataPartClone(long _orig);
	// uint64_t RawDataPart_hash(const struct LDKRawDataPart *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_hash")] public static extern long RawDataPartHash(long _o);
	// void PositiveTimestamp_free(struct LDKPositiveTimestamp this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_free")] public static extern void PositiveTimestampFree(long _this_obj);
	// bool PositiveTimestamp_eq(const struct LDKPositiveTimestamp *NONNULL_PTR a, const struct LDKPositiveTimestamp *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_eq")] public static extern bool PositiveTimestampEq(long _a, long _b);
	// uint64_t PositiveTimestamp_clone_ptr(LDKPositiveTimestamp *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone_ptr")] public static extern long PositiveTimestampClonePtr(long _arg);
	// struct LDKPositiveTimestamp PositiveTimestamp_clone(const struct LDKPositiveTimestamp *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone")] public static extern long PositiveTimestampClone(long _orig);
	// uint64_t PositiveTimestamp_hash(const struct LDKPositiveTimestamp *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_hash")] public static extern long PositiveTimestampHash(long _o);
	// enum LDKSiPrefix SiPrefix_clone(const enum LDKSiPrefix *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_clone")] public static extern SiPrefix SiPrefixClone(long _orig);
	// enum LDKSiPrefix SiPrefix_milli(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_milli")] public static extern SiPrefix SiPrefixMilli();
	// enum LDKSiPrefix SiPrefix_micro(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_micro")] public static extern SiPrefix SiPrefixMicro();
	// enum LDKSiPrefix SiPrefix_nano(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_nano")] public static extern SiPrefix SiPrefixNano();
	// enum LDKSiPrefix SiPrefix_pico(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_pico")] public static extern SiPrefix SiPrefixPico();
	// bool SiPrefix_eq(const enum LDKSiPrefix *NONNULL_PTR a, const enum LDKSiPrefix *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_eq")] public static extern bool SiPrefixEq(long _a, long _b);
	// uint64_t SiPrefix_hash(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_hash")] public static extern long SiPrefixHash(long _o);
	// MUST_USE_RES uint64_t SiPrefix_multiplier(const enum LDKSiPrefix *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_multiplier")] public static extern long SiPrefixMultiplier(long _this_arg);
	// enum LDKCurrency Currency_clone(const enum LDKCurrency *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_clone")] public static extern Currency CurrencyClone(long _orig);
	// enum LDKCurrency Currency_bitcoin(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin")] public static extern Currency CurrencyBitcoin();
	// enum LDKCurrency Currency_bitcoin_testnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin_testnet")] public static extern Currency CurrencyBitcoinTestnet();
	// enum LDKCurrency Currency_regtest(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_regtest")] public static extern Currency CurrencyRegtest();
	// enum LDKCurrency Currency_simnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_simnet")] public static extern Currency CurrencySimnet();
	// enum LDKCurrency Currency_signet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_signet")] public static extern Currency CurrencySignet();
	// uint64_t Currency_hash(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_hash")] public static extern long CurrencyHash(long _o);
	// bool Currency_eq(const enum LDKCurrency *NONNULL_PTR a, const enum LDKCurrency *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_eq")] public static extern bool CurrencyEq(long _a, long _b);
	// void Sha256_free(struct LDKSha256 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_free")] public static extern void Sha256Free(long _this_obj);
	// uint64_t Sha256_clone_ptr(LDKSha256 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone_ptr")] public static extern long Sha256ClonePtr(long _arg);
	// struct LDKSha256 Sha256_clone(const struct LDKSha256 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone")] public static extern long Sha256Clone(long _orig);
	// uint64_t Sha256_hash(const struct LDKSha256 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_hash")] public static extern long Sha256Hash(long _o);
	// bool Sha256_eq(const struct LDKSha256 *NONNULL_PTR a, const struct LDKSha256 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_eq")] public static extern bool Sha256Eq(long _a, long _b);
	// MUST_USE_RES struct LDKSha256 Sha256_from_bytes(const uint8_t (*bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_from_bytes")] public static extern long Sha256FromBytes(long _bytes);
	// void Description_free(struct LDKDescription this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_free")] public static extern void DescriptionFree(long _this_obj);
	// uint64_t Description_clone_ptr(LDKDescription *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone_ptr")] public static extern long DescriptionClonePtr(long _arg);
	// struct LDKDescription Description_clone(const struct LDKDescription *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone")] public static extern long DescriptionClone(long _orig);
	// uint64_t Description_hash(const struct LDKDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_hash")] public static extern long DescriptionHash(long _o);
	// bool Description_eq(const struct LDKDescription *NONNULL_PTR a, const struct LDKDescription *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_eq")] public static extern bool DescriptionEq(long _a, long _b);
	// void PayeePubKey_free(struct LDKPayeePubKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_free")] public static extern void PayeePubKeyFree(long _this_obj);
	// struct LDKPublicKey PayeePubKey_get_a(const struct LDKPayeePubKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_get_a")] public static extern long PayeePubKeyGetA(long _this_ptr);
	// void PayeePubKey_set_a(struct LDKPayeePubKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_set_a")] public static extern void PayeePubKeySetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPayeePubKey PayeePubKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_new")] public static extern long PayeePubKeyNew(long _a_arg);
	// uint64_t PayeePubKey_clone_ptr(LDKPayeePubKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone_ptr")] public static extern long PayeePubKeyClonePtr(long _arg);
	// struct LDKPayeePubKey PayeePubKey_clone(const struct LDKPayeePubKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone")] public static extern long PayeePubKeyClone(long _orig);
	// uint64_t PayeePubKey_hash(const struct LDKPayeePubKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_hash")] public static extern long PayeePubKeyHash(long _o);
	// bool PayeePubKey_eq(const struct LDKPayeePubKey *NONNULL_PTR a, const struct LDKPayeePubKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_eq")] public static extern bool PayeePubKeyEq(long _a, long _b);
	// void ExpiryTime_free(struct LDKExpiryTime this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_free")] public static extern void ExpiryTimeFree(long _this_obj);
	// uint64_t ExpiryTime_clone_ptr(LDKExpiryTime *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone_ptr")] public static extern long ExpiryTimeClonePtr(long _arg);
	// struct LDKExpiryTime ExpiryTime_clone(const struct LDKExpiryTime *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone")] public static extern long ExpiryTimeClone(long _orig);
	// uint64_t ExpiryTime_hash(const struct LDKExpiryTime *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_hash")] public static extern long ExpiryTimeHash(long _o);
	// bool ExpiryTime_eq(const struct LDKExpiryTime *NONNULL_PTR a, const struct LDKExpiryTime *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_eq")] public static extern bool ExpiryTimeEq(long _a, long _b);
	// void MinFinalCltvExpiryDelta_free(struct LDKMinFinalCltvExpiryDelta this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_free")] public static extern void MinFinalCltvExpiryDeltaFree(long _this_obj);
	// uint64_t MinFinalCltvExpiryDelta_get_a(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_get_a")] public static extern long MinFinalCltvExpiryDeltaGetA(long _this_ptr);
	// void MinFinalCltvExpiryDelta_set_a(struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_set_a")] public static extern void MinFinalCltvExpiryDeltaSetA(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMinFinalCltvExpiryDelta MinFinalCltvExpiryDelta_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_new")] public static extern long MinFinalCltvExpiryDeltaNew(long _a_arg);
	// uint64_t MinFinalCltvExpiryDelta_clone_ptr(LDKMinFinalCltvExpiryDelta *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_clone_ptr")] public static extern long MinFinalCltvExpiryDeltaClonePtr(long _arg);
	// struct LDKMinFinalCltvExpiryDelta MinFinalCltvExpiryDelta_clone(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_clone")] public static extern long MinFinalCltvExpiryDeltaClone(long _orig);
	// uint64_t MinFinalCltvExpiryDelta_hash(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_hash")] public static extern long MinFinalCltvExpiryDeltaHash(long _o);
	// bool MinFinalCltvExpiryDelta_eq(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR a, const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_eq")] public static extern bool MinFinalCltvExpiryDeltaEq(long _a, long _b);
	// void Fallback_free(struct LDKFallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_free")] public static extern void FallbackFree(long _this_ptr);
	// uint64_t Fallback_clone_ptr(LDKFallback *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone_ptr")] public static extern long FallbackClonePtr(long _arg);
	// struct LDKFallback Fallback_clone(const struct LDKFallback *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone")] public static extern long FallbackClone(long _orig);
	// struct LDKFallback Fallback_seg_wit_program(struct LDKWitnessVersion version, struct LDKCVec_u8Z program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_seg_wit_program")] public static extern long FallbackSegWitProgram(byte _version, long _program);
	// struct LDKFallback Fallback_pub_key_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_pub_key_hash")] public static extern long FallbackPubKeyHash(long _a);
	// struct LDKFallback Fallback_script_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_script_hash")] public static extern long FallbackScriptHash(long _a);
	// uint64_t Fallback_hash(const struct LDKFallback *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_hash")] public static extern long FallbackHash(long _o);
	// bool Fallback_eq(const struct LDKFallback *NONNULL_PTR a, const struct LDKFallback *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_eq")] public static extern bool FallbackEq(long _a, long _b);
	// void Bolt11InvoiceSignature_free(struct LDKBolt11InvoiceSignature this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_free")] public static extern void Bolt11InvoiceSignatureFree(long _this_obj);
	// uint64_t Bolt11InvoiceSignature_clone_ptr(LDKBolt11InvoiceSignature *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_clone_ptr")] public static extern long Bolt11InvoiceSignatureClonePtr(long _arg);
	// struct LDKBolt11InvoiceSignature Bolt11InvoiceSignature_clone(const struct LDKBolt11InvoiceSignature *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_clone")] public static extern long Bolt11InvoiceSignatureClone(long _orig);
	// uint64_t Bolt11InvoiceSignature_hash(const struct LDKBolt11InvoiceSignature *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_hash")] public static extern long Bolt11InvoiceSignatureHash(long _o);
	// bool Bolt11InvoiceSignature_eq(const struct LDKBolt11InvoiceSignature *NONNULL_PTR a, const struct LDKBolt11InvoiceSignature *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_eq")] public static extern bool Bolt11InvoiceSignatureEq(long _a, long _b);
	// void PrivateRoute_free(struct LDKPrivateRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_free")] public static extern void PrivateRouteFree(long _this_obj);
	// uint64_t PrivateRoute_clone_ptr(LDKPrivateRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone_ptr")] public static extern long PrivateRouteClonePtr(long _arg);
	// struct LDKPrivateRoute PrivateRoute_clone(const struct LDKPrivateRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone")] public static extern long PrivateRouteClone(long _orig);
	// uint64_t PrivateRoute_hash(const struct LDKPrivateRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_hash")] public static extern long PrivateRouteHash(long _o);
	// bool PrivateRoute_eq(const struct LDKPrivateRoute *NONNULL_PTR a, const struct LDKPrivateRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_eq")] public static extern bool PrivateRouteEq(long _a, long _b);
	// MUST_USE_RES struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ SignedRawBolt11Invoice_into_parts(struct LDKSignedRawBolt11Invoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_into_parts")] public static extern long SignedRawBolt11InvoiceIntoParts(long _this_arg);
	// MUST_USE_RES struct LDKRawBolt11Invoice SignedRawBolt11Invoice_raw_invoice(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_raw_invoice")] public static extern long SignedRawBolt11InvoiceRawInvoice(long _this_arg);
	// MUST_USE_RES const uint8_t (*SignedRawBolt11Invoice_signable_hash(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_signable_hash")] public static extern long SignedRawBolt11InvoiceSignableHash(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceSignature SignedRawBolt11Invoice_signature(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_signature")] public static extern long SignedRawBolt11InvoiceSignature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PayeePubKeySecp256k1ErrorZ SignedRawBolt11Invoice_recover_payee_pub_key(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_recover_payee_pub_key")] public static extern long SignedRawBolt11InvoiceRecoverPayeePubKey(long _this_arg);
	// MUST_USE_RES bool SignedRawBolt11Invoice_check_signature(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_check_signature")] public static extern bool SignedRawBolt11InvoiceCheckSignature(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes RawBolt11Invoice_signable_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_signable_hash")] public static extern long RawBolt11InvoiceSignableHash(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawBolt11Invoice_payment_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_hash")] public static extern long RawBolt11InvoicePaymentHash(long _this_arg);
	// MUST_USE_RES struct LDKDescription RawBolt11Invoice_description(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_description")] public static extern long RawBolt11InvoiceDescription(long _this_arg);
	// MUST_USE_RES struct LDKPayeePubKey RawBolt11Invoice_payee_pub_key(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payee_pub_key")] public static extern long RawBolt11InvoicePayeePubKey(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawBolt11Invoice_description_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_description_hash")] public static extern long RawBolt11InvoiceDescriptionHash(long _this_arg);
	// MUST_USE_RES struct LDKExpiryTime RawBolt11Invoice_expiry_time(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_expiry_time")] public static extern long RawBolt11InvoiceExpiryTime(long _this_arg);
	// MUST_USE_RES struct LDKMinFinalCltvExpiryDelta RawBolt11Invoice_min_final_cltv_expiry_delta(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_min_final_cltv_expiry_delta")] public static extern long RawBolt11InvoiceMinFinalCltvExpiryDelta(long _this_arg);
	// MUST_USE_RES struct LDKCOption_ThirtyTwoBytesZ RawBolt11Invoice_payment_secret(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_secret")] public static extern long RawBolt11InvoicePaymentSecret(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ RawBolt11Invoice_payment_metadata(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_metadata")] public static extern long RawBolt11InvoicePaymentMetadata(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures RawBolt11Invoice_features(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_features")] public static extern long RawBolt11InvoiceFeatures(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ RawBolt11Invoice_private_routes(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_private_routes")] public static extern long RawBolt11InvoicePrivateRoutes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z RawBolt11Invoice_amount_pico_btc(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_amount_pico_btc")] public static extern long RawBolt11InvoiceAmountPicoBtc(long _this_arg);
	// MUST_USE_RES enum LDKCurrency RawBolt11Invoice_currency(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_currency")] public static extern Currency RawBolt11InvoiceCurrency(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_unix_timestamp(uint64_t unix_seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_unix_timestamp")] public static extern long PositiveTimestampFromUnixTimestamp(long _unix_seconds);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_system_time(uint64_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_system_time")] public static extern long PositiveTimestampFromSystemTime(long _time);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_duration_since_epoch(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_duration_since_epoch")] public static extern long PositiveTimestampFromDurationSinceEpoch(long _duration);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_unix_timestamp(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_unix_timestamp")] public static extern long PositiveTimestampAsUnixTimestamp(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_duration_since_epoch(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_duration_since_epoch")] public static extern long PositiveTimestampAsDurationSinceEpoch(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_time(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_time")] public static extern long PositiveTimestampAsTime(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt11Invoice_signable_hash(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_signable_hash")] public static extern long Bolt11InvoiceSignableHash(long _this_arg);
	// MUST_USE_RES struct LDKSignedRawBolt11Invoice Bolt11Invoice_into_signed_raw(struct LDKBolt11Invoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_into_signed_raw")] public static extern long Bolt11InvoiceIntoSignedRaw(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneBolt11SemanticErrorZ Bolt11Invoice_check_signature(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_check_signature")] public static extern long Bolt11InvoiceCheckSignature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ Bolt11Invoice_from_signed(struct LDKSignedRawBolt11Invoice signed_invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_from_signed")] public static extern long Bolt11InvoiceFromSigned(long _signed_invoice);
	// MUST_USE_RES uint64_t Bolt11Invoice_timestamp(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_timestamp")] public static extern long Bolt11InvoiceTimestamp(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_duration_since_epoch(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_duration_since_epoch")] public static extern long Bolt11InvoiceDurationSinceEpoch(long _this_arg);
	// MUST_USE_RES const uint8_t (*Bolt11Invoice_payment_hash(const struct LDKBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_hash")] public static extern long Bolt11InvoicePaymentHash(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt11Invoice_payee_pub_key(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payee_pub_key")] public static extern long Bolt11InvoicePayeePubKey(long _this_arg);
	// MUST_USE_RES const uint8_t (*Bolt11Invoice_payment_secret(const struct LDKBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_secret")] public static extern long Bolt11InvoicePaymentSecret(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Bolt11Invoice_payment_metadata(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_metadata")] public static extern long Bolt11InvoicePaymentMetadata(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures Bolt11Invoice_features(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_features")] public static extern long Bolt11InvoiceFeatures(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt11Invoice_recover_payee_pub_key(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_recover_payee_pub_key")] public static extern long Bolt11InvoiceRecoverPayeePubKey(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt11Invoice_expires_at(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expires_at")] public static extern long Bolt11InvoiceExpiresAt(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_expiry_time(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expiry_time")] public static extern long Bolt11InvoiceExpiryTime(long _this_arg);
	// MUST_USE_RES bool Bolt11Invoice_is_expired(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_is_expired")] public static extern bool Bolt11InvoiceIsExpired(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_duration_until_expiry(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_duration_until_expiry")] public static extern long Bolt11InvoiceDurationUntilExpiry(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_expiration_remaining_from_epoch(const struct LDKBolt11Invoice *NONNULL_PTR this_arg, uint64_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expiration_remaining_from_epoch")] public static extern long Bolt11InvoiceExpirationRemainingFromEpoch(long _this_arg, long _time);
	// MUST_USE_RES bool Bolt11Invoice_would_expire(const struct LDKBolt11Invoice *NONNULL_PTR this_arg, uint64_t at_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_would_expire")] public static extern bool Bolt11InvoiceWouldExpire(long _this_arg, long _at_time);
	// MUST_USE_RES uint64_t Bolt11Invoice_min_final_cltv_expiry_delta(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_min_final_cltv_expiry_delta")] public static extern long Bolt11InvoiceMinFinalCltvExpiryDelta(long _this_arg);
	// MUST_USE_RES struct LDKCVec_StrZ Bolt11Invoice_fallback_addresses(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_fallback_addresses")] public static extern long Bolt11InvoiceFallbackAddresses(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ Bolt11Invoice_private_routes(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_private_routes")] public static extern long Bolt11InvoicePrivateRoutes(long _this_arg);
	// MUST_USE_RES struct LDKCVec_RouteHintZ Bolt11Invoice_route_hints(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_route_hints")] public static extern long Bolt11InvoiceRouteHints(long _this_arg);
	// MUST_USE_RES enum LDKCurrency Bolt11Invoice_currency(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_currency")] public static extern Currency Bolt11InvoiceCurrency(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt11Invoice_amount_milli_satoshis(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_amount_milli_satoshis")] public static extern long Bolt11InvoiceAmountMilliSatoshis(long _this_arg);
	// MUST_USE_RES struct LDKCResult_DescriptionCreationErrorZ Description_new(struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_new")] public static extern long DescriptionNew(long _description);
	// MUST_USE_RES struct LDKUntrustedString Description_into_inner(struct LDKDescription this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_into_inner")] public static extern long DescriptionIntoInner(long _this_arg);
	// struct LDKStr Description_to_str(const struct LDKDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_to_str")] public static extern long DescriptionToStr(long _o);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_seconds(uint64_t seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_seconds")] public static extern long ExpiryTimeFromSeconds(long _seconds);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_duration(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_duration")] public static extern long ExpiryTimeFromDuration(long _duration);
	// MUST_USE_RES uint64_t ExpiryTime_as_seconds(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_seconds")] public static extern long ExpiryTimeAsSeconds(long _this_arg);
	// MUST_USE_RES uint64_t ExpiryTime_as_duration(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_duration")] public static extern long ExpiryTimeAsDuration(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PrivateRouteCreationErrorZ PrivateRoute_new(struct LDKRouteHint hops);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_new")] public static extern long PrivateRouteNew(long _hops);
	// MUST_USE_RES struct LDKRouteHint PrivateRoute_into_inner(struct LDKPrivateRoute this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_into_inner")] public static extern long PrivateRouteIntoInner(long _this_arg);
	// enum LDKCreationError CreationError_clone(const enum LDKCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_clone")] public static extern CreationError CreationErrorClone(long _orig);
	// enum LDKCreationError CreationError_description_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_description_too_long")] public static extern CreationError CreationErrorDescriptionTooLong();
	// enum LDKCreationError CreationError_route_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_route_too_long")] public static extern CreationError CreationErrorRouteTooLong();
	// enum LDKCreationError CreationError_timestamp_out_of_bounds(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_timestamp_out_of_bounds")] public static extern CreationError CreationErrorTimestampOutOfBounds();
	// enum LDKCreationError CreationError_invalid_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_invalid_amount")] public static extern CreationError CreationErrorInvalidAmount();
	// enum LDKCreationError CreationError_missing_route_hints(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_missing_route_hints")] public static extern CreationError CreationErrorMissingRouteHints();
	// enum LDKCreationError CreationError_min_final_cltv_expiry_delta_too_short(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_min_final_cltv_expiry_delta_too_short")] public static extern CreationError CreationErrorMinFinalCltvExpiryDeltaTooShort();
	// bool CreationError_eq(const enum LDKCreationError *NONNULL_PTR a, const enum LDKCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_eq")] public static extern bool CreationErrorEq(long _a, long _b);
	// struct LDKStr CreationError_to_str(const enum LDKCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_to_str")] public static extern long CreationErrorToStr(long _o);
	// enum LDKBolt11SemanticError Bolt11SemanticError_clone(const enum LDKBolt11SemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_clone")] public static extern Bolt11SemanticError Bolt11SemanticErrorClone(long _orig);
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_payment_hash")] public static extern Bolt11SemanticError Bolt11SemanticErrorNoPaymentHash();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_payment_hashes(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_payment_hashes")] public static extern Bolt11SemanticError Bolt11SemanticErrorMultiplePaymentHashes();
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_description(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_description")] public static extern Bolt11SemanticError Bolt11SemanticErrorNoDescription();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_descriptions(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_descriptions")] public static extern Bolt11SemanticError Bolt11SemanticErrorMultipleDescriptions();
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_payment_secret(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_payment_secret")] public static extern Bolt11SemanticError Bolt11SemanticErrorNoPaymentSecret();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_payment_secrets(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_payment_secrets")] public static extern Bolt11SemanticError Bolt11SemanticErrorMultiplePaymentSecrets();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_features")] public static extern Bolt11SemanticError Bolt11SemanticErrorInvalidFeatures();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_recovery_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_recovery_id")] public static extern Bolt11SemanticError Bolt11SemanticErrorInvalidRecoveryId();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_signature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_signature")] public static extern Bolt11SemanticError Bolt11SemanticErrorInvalidSignature();
	// enum LDKBolt11SemanticError Bolt11SemanticError_imprecise_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_imprecise_amount")] public static extern Bolt11SemanticError Bolt11SemanticErrorImpreciseAmount();
	// bool Bolt11SemanticError_eq(const enum LDKBolt11SemanticError *NONNULL_PTR a, const enum LDKBolt11SemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_eq")] public static extern bool Bolt11SemanticErrorEq(long _a, long _b);
	// struct LDKStr Bolt11SemanticError_to_str(const enum LDKBolt11SemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_to_str")] public static extern long Bolt11SemanticErrorToStr(long _o);
	// void SignOrCreationError_free(struct LDKSignOrCreationError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_free")] public static extern void SignOrCreationErrorFree(long _this_ptr);
	// uint64_t SignOrCreationError_clone_ptr(LDKSignOrCreationError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone_ptr")] public static extern long SignOrCreationErrorClonePtr(long _arg);
	// struct LDKSignOrCreationError SignOrCreationError_clone(const struct LDKSignOrCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone")] public static extern long SignOrCreationErrorClone(long _orig);
	// struct LDKSignOrCreationError SignOrCreationError_sign_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_sign_error")] public static extern long SignOrCreationErrorSignError();
	// struct LDKSignOrCreationError SignOrCreationError_creation_error(enum LDKCreationError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_creation_error")] public static extern long SignOrCreationErrorCreationError(CreationError _a);
	// bool SignOrCreationError_eq(const struct LDKSignOrCreationError *NONNULL_PTR a, const struct LDKSignOrCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_eq")] public static extern bool SignOrCreationErrorEq(long _a, long _b);
	// struct LDKStr SignOrCreationError_to_str(const struct LDKSignOrCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_to_str")] public static extern long SignOrCreationErrorToStr(long _o);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ payment_parameters_from_zero_amount_invoice(const struct LDKBolt11Invoice *NONNULL_PTR invoice, uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_payment_parameters_from_zero_amount_invoice")] public static extern long PaymentParametersFromZeroAmountInvoice(long _invoice, long _amount_msat);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ payment_parameters_from_invoice(const struct LDKBolt11Invoice *NONNULL_PTR invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_payment_parameters_from_invoice")] public static extern long PaymentParametersFromInvoice(long _invoice);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_phantom_invoice(struct LDKCOption_u64Z amt_msat, struct LDKCOption_ThirtyTwoBytesZ payment_hash, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u16Z min_final_cltv_expiry_delta, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice")] public static extern long CreatePhantomInvoice(long _amt_msat, long _payment_hash, long _description, int _invoice_expiry_delta_secs, long _phantom_route_hints, long _entropy_source, long _node_signer, long _logger, Currency _network, long _min_final_cltv_expiry_delta, long _duration_since_epoch);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_phantom_invoice_with_description_hash(struct LDKCOption_u64Z amt_msat, struct LDKCOption_ThirtyTwoBytesZ payment_hash, uint32_t invoice_expiry_delta_secs, struct LDKSha256 description_hash, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u16Z min_final_cltv_expiry_delta, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice_with_description_hash")] public static extern long CreatePhantomInvoiceWithDescriptionHash(long _amt_msat, long _payment_hash, int _invoice_expiry_delta_secs, long _description_hash, long _phantom_route_hints, long _entropy_source, long _node_signer, long _logger, Currency _network, long _min_final_cltv_expiry_delta, long _duration_since_epoch);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager")] public static extern long CreateInvoiceFromChannelmanager(long _channelmanager, long _node_signer, long _logger, Currency _network, long _amt_msat, long _description, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash")] public static extern long CreateInvoiceFromChannelmanagerWithDescriptionHash(long _channelmanager, long _node_signer, long _logger, Currency _network, long _amt_msat, long _description_hash, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash_and_duration_since_epoch")] public static extern long CreateInvoiceFromChannelmanagerWithDescriptionHashAndDurationSinceEpoch(long _channelmanager, long _node_signer, long _logger, Currency _network, long _amt_msat, long _description_hash, long _duration_since_epoch, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_and_duration_since_epoch(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_and_duration_since_epoch")] public static extern long CreateInvoiceFromChannelmanagerAndDurationSinceEpoch(long _channelmanager, long _node_signer, long _logger, Currency _network, long _amt_msat, long _description, long _duration_since_epoch, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint64_t duration_since_epoch, uint32_t invoice_expiry_delta_secs, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_and_duration_since_epoch_with_payment_hash")] public static extern long CreateInvoiceFromChannelmanagerAndDurationSinceEpochWithPaymentHash(long _channelmanager, long _node_signer, long _logger, Currency _network, long _amt_msat, long _description, long _duration_since_epoch, int _invoice_expiry_delta_secs, long _payment_hash, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ SiPrefix_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_from_str")] public static extern long SiPrefixFromStr(long _s);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ Bolt11Invoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_from_str")] public static extern long Bolt11InvoiceFromStr(long _s);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ SignedRawBolt11Invoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_from_str")] public static extern long SignedRawBolt11InvoiceFromStr(long _s);
	// struct LDKStr Bolt11ParseError_to_str(const struct LDKBolt11ParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_to_str")] public static extern long Bolt11ParseErrorToStr(long _o);
	// struct LDKStr ParseOrSemanticError_to_str(const struct LDKParseOrSemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_to_str")] public static extern long ParseOrSemanticErrorToStr(long _o);
	// struct LDKStr Bolt11Invoice_to_str(const struct LDKBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_to_str")] public static extern long Bolt11InvoiceToStr(long _o);
	// struct LDKStr SignedRawBolt11Invoice_to_str(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_to_str")] public static extern long SignedRawBolt11InvoiceToStr(long _o);
	// struct LDKStr Currency_to_str(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_to_str")] public static extern long CurrencyToStr(long _o);
	// struct LDKStr SiPrefix_to_str(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_to_str")] public static extern long SiPrefixToStr(long _o);
	// void GraphSyncError_free(struct LDKGraphSyncError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_free")] public static extern void GraphSyncErrorFree(long _this_ptr);
	// uint64_t GraphSyncError_clone_ptr(LDKGraphSyncError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone_ptr")] public static extern long GraphSyncErrorClonePtr(long _arg);
	// struct LDKGraphSyncError GraphSyncError_clone(const struct LDKGraphSyncError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone")] public static extern long GraphSyncErrorClone(long _orig);
	// struct LDKGraphSyncError GraphSyncError_decode_error(struct LDKDecodeError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_decode_error")] public static extern long GraphSyncErrorDecodeError(long _a);
	// struct LDKGraphSyncError GraphSyncError_lightning_error(struct LDKLightningError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_lightning_error")] public static extern long GraphSyncErrorLightningError(long _a);
	// void RapidGossipSync_free(struct LDKRapidGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_free")] public static extern void RapidGossipSyncFree(long _this_obj);
	// MUST_USE_RES struct LDKRapidGossipSync RapidGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_new")] public static extern long RapidGossipSyncNew(long _network_graph, long _logger);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_sync_network_graph_with_file_path(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKStr sync_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_sync_network_graph_with_file_path")] public static extern long RapidGossipSyncSyncNetworkGraphWithFilePath(long _this_arg, long _sync_path);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_update_network_graph(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKu8slice update_data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_update_network_graph")] public static extern long RapidGossipSyncUpdateNetworkGraph(long _this_arg, long _update_data);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_update_network_graph_no_std(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKu8slice update_data, struct LDKCOption_u64Z current_time_unix);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_update_network_graph_no_std")] public static extern long RapidGossipSyncUpdateNetworkGraphNoStd(long _this_arg, long _update_data, long _current_time_unix);
	// MUST_USE_RES bool RapidGossipSync_is_initial_sync_complete(const struct LDKRapidGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_is_initial_sync_complete")] public static extern bool RapidGossipSyncIsInitialSyncComplete(long _this_arg);

	static long CCallbackLL(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LL");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LL");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 0:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).GetPerCommitmentPoint(a);
			case 1:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).ReleaseCommitmentSecret(a);
			case 7:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignHolderCommitment(a);
			case 12:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignClosingTransaction(a);
			case 14:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignChannelAnnouncementWithFundingKey(a);
			case 36:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).SignBolt12InvoiceRequest(a);
			case 37:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).SignBolt12Invoice(a);
			case 38:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).SignGossipMessage(a);
			case 41:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).ReadChanSigner(a);
			case 42:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).GetDestinationScript(a);
			case 62:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).PersistManager(a);
			case 63:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).PersistGraph(a);
			case 64:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).PersistScorer(a);
			case 114:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).ProvidedInitFeatures(a);
			case 116:
				if (!(obj is LDKOffersMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOffersMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOffersMessageHandler)obj).HandleMessage(a);
			case 118:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleNodeAnnouncement(a);
			case 119:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleChannelAnnouncement(a);
			case 120:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleChannelUpdate(a);
			case 121:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).GetNextChannelAnnouncement(a);
			case 122:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).GetNextNodeAnnouncement(a);
			case 130:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).ProvidedInitFeatures(a);
			case 133:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).NextOnionMessageForPeer(a);
			case 138:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).ProvidedInitFeatures(a);
			case 143:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).ProvidedInitFeatures(a);
			case 144:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).HandleCustomMessage(a);
			case 153:
				if (!(obj is LDKCoinSelectionSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCoinSelectionSource in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCoinSelectionSource)obj).SignPsbt(a);
			case 156:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).SignPsbt(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LL");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLCallback(int obj_ptr, int fn_id, long a);
	static LLCallback LLCallbackInst = CCallbackLL;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_l_invoker")] public static extern int RegisterLLInvoker(LLCallback callee);
	static int _run_l_l_registration = RegisterLLInvoker(LLCallbackInst);
	static long CCallbackLLl(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLl");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLl");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 2:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).ValidateHolderCommitment(a, b);
			case 3:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).ValidateCounterpartyRevocation(a, b);
			case 13:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignHolderAnchorInput(a, b);
			case 26:
				if (!(obj is LDKUtxoLookup)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKUtxoLookup in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKUtxoLookup)obj).GetUtxo(a, b);
			case 27:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).WatchChannel(a, b);
			case 40:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).DeriveChannelSigner(a, b);
			case 46:
				if (!(obj is LDKMessageRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageRouter in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageRouter)obj).CreateBlindedPaths(a, b);
			case 61:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).List(a, b);
			case 124:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleReplyChannelRange(a, b);
			case 125:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleReplyShortChannelIdsEnd(a, b);
			case 126:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleQueryChannelRange(a, b);
			case 127:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).HandleQueryShortChannelIds(a, b);
			case 140:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).HandleCustomMessage(a, b);
			case 145:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).ReadCustomMessage(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLl");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlCallback(int obj_ptr, int fn_id, long a, long b);
	static LLlCallback LLlCallbackInst = CCallbackLLl;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_ll_invoker")] public static extern int RegisterLLlInvoker(LLlCallback callee);
	static int _run_l_ll_registration = RegisterLLlInvoker(LLlCallbackInst);
	static long CCallbackL(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in L");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in L");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 4:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).ChannelKeysId();
			case 15:
				if (!(obj is LDKWriteableEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWriteableEcdsaChannelSigner in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWriteableEcdsaChannelSigner)obj).Write();
			case 22:
				if (!(obj is LDKLockableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLockableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKLockableScore)obj).ReadLock();
			case 23:
				if (!(obj is LDKLockableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLockableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKLockableScore)obj).WriteLock();
			case 24:
				if (!(obj is LDKWriteableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWriteableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWriteableScore)obj).Write();
			case 29:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).ReleasePendingMonitorEvents();
			case 31:
				if (!(obj is LDKEntropySource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEntropySource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEntropySource)obj).GetSecureRandomBytes();
			case 32:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).GetInboundPaymentKeyMaterial();
			case 43:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).GetShutdownScriptpubkey();
			case 51:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).DebugStr();
			case 52:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).Write();
			case 53:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).TlvType();
			case 54:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).Write();
			case 55:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).DebugStr();
			case 74:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKConfirm)obj).GetRelevantTxids();
			case 77:
				if (!(obj is LDKMessageSendEventsProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageSendEventsProvider in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageSendEventsProvider)obj).GetAndClearPendingMsgEvents();
			case 113:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).ProvidedNodeFeatures();
			case 115:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).GetChainHashes();
			case 117:
				if (!(obj is LDKOffersMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOffersMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOffersMessageHandler)obj).ReleasePendingMessages();
			case 129:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).ProvidedNodeFeatures();
			case 131:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).GetAndClearConnectionsNeeded();
			case 137:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).ProvidedNodeFeatures();
			case 141:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).GetAndClearPendingMsg();
			case 142:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).ProvidedNodeFeatures();
			case 146:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).ReleasePendingCustomMessages();
			case 150:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).Hash();
			case 151:
				if (!(obj is LDKScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKScore)obj).Write();
			case 154:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).ListConfirmedUtxos();
			case 155:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).GetChangeScript();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in L");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LCallback(int obj_ptr, int fn_id);
	static LCallback LCallbackInst = CCallbackL;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l__invoker")] public static extern int RegisterLInvoker(LCallback callee);
	static int _run_l__registration = RegisterLInvoker(LCallbackInst);
	static void CCallbackVoidL(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in VoidL");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in VoidL");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 5:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelSigner)obj).ProvideChannelParameters(a);
				return;
			case 21:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).TimePassed(a);
				return;
			case 25:
				if (!(obj is LDKLogger)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLogger in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKLogger)obj).Log(a);
				return;
			case 30:
				if (!(obj is LDKBroadcasterInterface)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKBroadcasterInterface in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKBroadcasterInterface)obj).BroadcastTransactions(a);
				return;
			case 57:
				if (!(obj is LDKFilter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFilter in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFilter)obj).RegisterOutput(a);
				return;
			case 72:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).TransactionUnconfirmed(a);
				return;
			case 75:
				if (!(obj is LDKEventHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEventHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKEventHandler)obj).HandleEvent(a);
				return;
			case 76:
				if (!(obj is LDKEventsProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEventsProvider in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKEventsProvider)obj).ProcessPendingEvents(a);
				return;
			case 108:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).PeerDisconnected(a);
				return;
			case 135:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).PeerDisconnected(a);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in VoidL");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidLCallback(int obj_ptr, int fn_id, long a);
	static VoidLCallback VoidLCallbackInst = CCallbackVoidL;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_l_invoker")] public static extern int RegisterVoidLInvoker(VoidLCallback callee);
	static int _run_void_l_registration = RegisterVoidLInvoker(VoidLCallbackInst);
	static long CCallbackLLll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 6:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignCounterpartyCommitment(a, b, c);
			case 10:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignHolderHtlcTransaction(a, b, c);
			case 16:
				if (!(obj is LDKScoreLookUp)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreLookUp in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKScoreLookUp)obj).ChannelPenaltyMsat(a, b, c);
			case 45:
				if (!(obj is LDKMessageRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageRouter in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageRouter)obj).FindPath(a, b, c);
			case 58:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).Read(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLllCallback(int obj_ptr, int fn_id, long a, long b, long c);
	static LLllCallback LLllCallbackInst = CCallbackLLll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lll_invoker")] public static extern int RegisterLLllInvoker(LLllCallback callee);
	static int _run_l_lll_registration = RegisterLLllInvoker(LLllCallbackInst);
	static long CCallbackLLlll(int obj_ptr, int fn_id, long a, long b, long c, long d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLlll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLlll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 8:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignJusticeRevokedOutput(a, b, c, d);
			case 47:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).FindRoute(a, b, c, d);
			case 49:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).CreateBlindedPaymentPaths(a, b, c, d);
			case 59:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).Write(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLlll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlllCallback(int obj_ptr, int fn_id, long a, long b, long c, long d);
	static LLlllCallback LLlllCallbackInst = CCallbackLLlll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llll_invoker")] public static extern int RegisterLLlllInvoker(LLlllCallback callee);
	static int _run_l_llll_registration = RegisterLLlllInvoker(LLlllCallbackInst);
	static long CCallbackLLllll(int obj_ptr, int fn_id, long a, long b, long c, long d, long e) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLllll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLllll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 9:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignJusticeRevokedHtlc(a, b, c, d, e);
			case 11:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).SignCounterpartyHtlcTransaction(a, b, c, d, e);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLllll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLllllCallback(int obj_ptr, int fn_id, long a, long b, long c, long d, long e);
	static LLllllCallback LLllllCallbackInst = CCallbackLLllll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lllll_invoker")] public static extern int RegisterLLllllInvoker(LLllllCallback callee);
	static int _run_l_lllll_registration = RegisterLLllllInvoker(LLllllCallbackInst);
	static void CCallbackVoidLll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in VoidLll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in VoidLll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 17:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).PaymentPathFailed(a, b, c);
				return;
			case 19:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).ProbeFailed(a, b, c);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in VoidLll");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidLllCallback(int obj_ptr, int fn_id, long a, long b, long c);
	static VoidLllCallback VoidLllCallbackInst = CCallbackVoidLll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_lll_invoker")] public static extern int RegisterVoidLllInvoker(VoidLllCallback callee);
	static int _run_void_lll_registration = RegisterVoidLllInvoker(VoidLllCallbackInst);
	static void CCallbackVoidLl(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in VoidLl");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in VoidLl");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 18:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).PaymentPathSuccessful(a, b);
				return;
			case 20:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).ProbeSuccessful(a, b);
				return;
			case 56:
				if (!(obj is LDKFilter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFilter in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFilter)obj).RegisterTx(a, b);
				return;
			case 78:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleOpenChannel(a, b);
				return;
			case 79:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleOpenChannelV2(a, b);
				return;
			case 80:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleAcceptChannel(a, b);
				return;
			case 81:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleAcceptChannelV2(a, b);
				return;
			case 82:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleFundingCreated(a, b);
				return;
			case 83:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleFundingSigned(a, b);
				return;
			case 84:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleChannelReady(a, b);
				return;
			case 85:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleShutdown(a, b);
				return;
			case 86:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleClosingSigned(a, b);
				return;
			case 87:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleStfu(a, b);
				return;
			case 88:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleSplice(a, b);
				return;
			case 89:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleSpliceAck(a, b);
				return;
			case 90:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleSpliceLocked(a, b);
				return;
			case 91:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxAddInput(a, b);
				return;
			case 92:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxAddOutput(a, b);
				return;
			case 93:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxRemoveInput(a, b);
				return;
			case 94:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxRemoveOutput(a, b);
				return;
			case 95:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxComplete(a, b);
				return;
			case 96:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxSignatures(a, b);
				return;
			case 97:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxInitRbf(a, b);
				return;
			case 98:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxAckRbf(a, b);
				return;
			case 99:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleTxAbort(a, b);
				return;
			case 100:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleUpdateAddHtlc(a, b);
				return;
			case 101:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleUpdateFulfillHtlc(a, b);
				return;
			case 102:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleUpdateFailHtlc(a, b);
				return;
			case 103:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleUpdateFailMalformedHtlc(a, b);
				return;
			case 104:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleCommitmentSigned(a, b);
				return;
			case 105:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleRevokeAndAck(a, b);
				return;
			case 106:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleUpdateFee(a, b);
				return;
			case 107:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleAnnouncementSignatures(a, b);
				return;
			case 110:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleChannelReestablish(a, b);
				return;
			case 111:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleChannelUpdate(a, b);
				return;
			case 112:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).HandleError(a, b);
				return;
			case 132:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).HandleOnionMessage(a, b);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in VoidLl");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidLlCallback(int obj_ptr, int fn_id, long a, long b);
	static VoidLlCallback VoidLlCallbackInst = CCallbackVoidLl;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_ll_invoker")] public static extern int RegisterVoidLlInvoker(VoidLlCallback callee);
	static int _run_void_ll_registration = RegisterVoidLlInvoker(VoidLlCallbackInst);
	static ChannelMonitorUpdateStatus CCallbackChannelMonitorUpdateStatusLl(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in ChannelMonitorUpdateStatusLl");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in ChannelMonitorUpdateStatusLl");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 28:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in ChannelMonitorUpdateStatus_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).UpdateChannel(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in ChannelMonitorUpdateStatusLl");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusLlCallback(int obj_ptr, int fn_id, long a, long b);
	static ChannelMonitorUpdateStatusLlCallback ChannelMonitorUpdateStatusLlCallbackInst = CCallbackChannelMonitorUpdateStatusLl;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_ChannelMonitorUpdateStatus_ll_invoker")] public static extern int RegisterChannelMonitorUpdateStatusLlInvoker(ChannelMonitorUpdateStatusLlCallback callee);
	static int _run_ChannelMonitorUpdateStatus_ll_registration = RegisterChannelMonitorUpdateStatusLlInvoker(ChannelMonitorUpdateStatusLlCallbackInst);
	static long CCallbackLRecipient(int obj_ptr, int fn_id, Recipient a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LRecipient");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LRecipient");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 33:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_Recipient");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).GetNodeId(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LRecipient");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LRecipientCallback(int obj_ptr, int fn_id, Recipient a);
	static LRecipientCallback LRecipientCallbackInst = CCallbackLRecipient;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_Recipient_invoker")] public static extern int RegisterLRecipientInvoker(LRecipientCallback callee);
	static int _run_l_Recipient_registration = RegisterLRecipientInvoker(LRecipientCallbackInst);
	static long CCallbackLRecipientll(int obj_ptr, int fn_id, Recipient a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LRecipientll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LRecipientll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 34:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_Recipientll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).Ecdh(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LRecipientll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LRecipientllCallback(int obj_ptr, int fn_id, Recipient a, long b, long c);
	static LRecipientllCallback LRecipientllCallbackInst = CCallbackLRecipientll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_Recipientll_invoker")] public static extern int RegisterLRecipientllInvoker(LRecipientllCallback callee);
	static int _run_l_Recipientll_registration = RegisterLRecipientllInvoker(LRecipientllCallbackInst);
	static long CCallbackLLlrecipient(int obj_ptr, int fn_id, long a, long b, Recipient c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLlrecipient");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLlrecipient");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 35:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_llRecipient");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).SignInvoice(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLlrecipient");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlrecipientCallback(int obj_ptr, int fn_id, long a, long b, Recipient c);
	static LLlrecipientCallback LLlrecipientCallbackInst = CCallbackLLlrecipient;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llRecipient_invoker")] public static extern int RegisterLLlrecipientInvoker(LLlrecipientCallback callee);
	static int _run_l_llRecipient_registration = RegisterLLlrecipientInvoker(LLlrecipientCallbackInst);
	static long CCallbackLBll(int obj_ptr, int fn_id, bool a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LBll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LBll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 39:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_bll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).GenerateChannelKeysId(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LBll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LBllCallback(int obj_ptr, int fn_id, bool a, long b, long c);
	static LBllCallback LBllCallbackInst = CCallbackLBll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_bll_invoker")] public static extern int RegisterLBllInvoker(LBllCallback callee);
	static int _run_l_bll_registration = RegisterLBllInvoker(LBllCallbackInst);
	static int CCallbackIConfirmationTarget(int obj_ptr, int fn_id, ConfirmationTarget a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in IConfirmationTarget");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in IConfirmationTarget");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 44:
				if (!(obj is LDKFeeEstimator)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFeeEstimator in i_ConfirmationTarget");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKFeeEstimator)obj).GetEstSatPer1000Weight(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in IConfirmationTarget");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate int IConfirmationTargetCallback(int obj_ptr, int fn_id, ConfirmationTarget a);
	static IConfirmationTargetCallback IConfirmationTargetCallbackInst = CCallbackIConfirmationTarget;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_i_ConfirmationTarget_invoker")] public static extern int RegisterIConfirmationTargetInvoker(IConfirmationTargetCallback callee);
	static int _run_i_ConfirmationTarget_registration = RegisterIConfirmationTargetInvoker(IConfirmationTargetCallbackInst);
	static long CCallbackLLlllll(int obj_ptr, int fn_id, long a, long b, long c, long d, long e, long f) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLlllll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLlllll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 48:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).FindRouteWithId(a, b, c, d, e, f);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLlllll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlllllCallback(int obj_ptr, int fn_id, long a, long b, long c, long d, long e, long f);
	static LLlllllCallback LLlllllCallbackInst = CCallbackLLlllll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llllll_invoker")] public static extern int RegisterLLlllllInvoker(LLlllllCallback callee);
	static int _run_l_llllll_registration = RegisterLLlllllInvoker(LLlllllCallbackInst);
	static short CCallbackS(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in S");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in S");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 50:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in s_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).TypeId();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in S");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate short SCallback(int obj_ptr, int fn_id);
	static SCallback SCallbackInst = CCallbackS;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_s__invoker")] public static extern int RegisterSInvoker(SCallback callee);
	static int _run_s__registration = RegisterSInvoker(SCallbackInst);
	static long CCallbackLLllb(int obj_ptr, int fn_id, long a, long b, long c, bool d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLllb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLllb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 60:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_lllb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).Remove(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLllb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLllbCallback(int obj_ptr, int fn_id, long a, long b, long c, bool d);
	static LLllbCallback LLllbCallbackInst = CCallbackLLllb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lllb_invoker")] public static extern int RegisterLLllbInvoker(LLllbCallback callee);
	static int _run_l_lllb_registration = RegisterLLllbInvoker(LLllbCallbackInst);
	static ChannelMonitorUpdateStatus CCallbackChannelMonitorUpdateStatusLll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in ChannelMonitorUpdateStatusLll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in ChannelMonitorUpdateStatusLll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 65:
				if (!(obj is LDKPersist)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersist in ChannelMonitorUpdateStatus_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersist)obj).PersistNewChannel(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in ChannelMonitorUpdateStatusLll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusLllCallback(int obj_ptr, int fn_id, long a, long b, long c);
	static ChannelMonitorUpdateStatusLllCallback ChannelMonitorUpdateStatusLllCallbackInst = CCallbackChannelMonitorUpdateStatusLll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_ChannelMonitorUpdateStatus_lll_invoker")] public static extern int RegisterChannelMonitorUpdateStatusLllInvoker(ChannelMonitorUpdateStatusLllCallback callee);
	static int _run_ChannelMonitorUpdateStatus_lll_registration = RegisterChannelMonitorUpdateStatusLllInvoker(ChannelMonitorUpdateStatusLllCallbackInst);
	static ChannelMonitorUpdateStatus CCallbackChannelMonitorUpdateStatusLlll(int obj_ptr, int fn_id, long a, long b, long c, long d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in ChannelMonitorUpdateStatusLlll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in ChannelMonitorUpdateStatusLlll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 66:
				if (!(obj is LDKPersist)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersist in ChannelMonitorUpdateStatus_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersist)obj).UpdatePersistedChannel(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in ChannelMonitorUpdateStatusLlll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate ChannelMonitorUpdateStatus ChannelMonitorUpdateStatusLlllCallback(int obj_ptr, int fn_id, long a, long b, long c, long d);
	static ChannelMonitorUpdateStatusLlllCallback ChannelMonitorUpdateStatusLlllCallbackInst = CCallbackChannelMonitorUpdateStatusLlll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_ChannelMonitorUpdateStatus_llll_invoker")] public static extern int RegisterChannelMonitorUpdateStatusLlllInvoker(ChannelMonitorUpdateStatusLlllCallback callee);
	static int _run_ChannelMonitorUpdateStatus_llll_registration = RegisterChannelMonitorUpdateStatusLlllInvoker(ChannelMonitorUpdateStatusLlllCallbackInst);
	static void CCallbackVoid(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in Void");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in Void");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 67:
				if (!(obj is LDKFutureCallback)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFutureCallback in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFutureCallback)obj).Call();
				return;
			case 136:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).TimerTickOccurred();
				return;
			case 148:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKSocketDescriptor)obj).DisconnectSocket();
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in Void");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidCallback(int obj_ptr, int fn_id);
	static VoidCallback VoidCallbackInst = CCallbackVoid;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void__invoker")] public static extern int RegisterVoidInvoker(VoidCallback callee);
	static int _run_void__registration = RegisterVoidInvoker(VoidCallbackInst);
	static void CCallbackVoidLli(int obj_ptr, int fn_id, long a, long b, int c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in VoidLli");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in VoidLli");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 68:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_lli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).FilteredBlockConnected(a, b, c);
				return;
			case 71:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_lli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).TransactionsConfirmed(a, b, c);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in VoidLli");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidLliCallback(int obj_ptr, int fn_id, long a, long b, int c);
	static VoidLliCallback VoidLliCallbackInst = CCallbackVoidLli;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_lli_invoker")] public static extern int RegisterVoidLliInvoker(VoidLliCallback callee);
	static int _run_void_lli_registration = RegisterVoidLliInvoker(VoidLliCallbackInst);
	static void CCallbackVoidLi(int obj_ptr, int fn_id, long a, int b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in VoidLi");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in VoidLi");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 69:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).BlockConnected(a, b);
				return;
			case 70:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).BlockDisconnected(a, b);
				return;
			case 73:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).BestBlockUpdated(a, b);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in VoidLi");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void VoidLiCallback(int obj_ptr, int fn_id, long a, int b);
	static VoidLiCallback VoidLiCallbackInst = CCallbackVoidLi;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_li_invoker")] public static extern int RegisterVoidLiInvoker(VoidLiCallback callee);
	static int _run_void_li_registration = RegisterVoidLiInvoker(VoidLiCallbackInst);
	static long CCallbackLLlb(int obj_ptr, int fn_id, long a, long b, bool c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLlb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLlb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 109:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).PeerConnected(a, b, c);
			case 123:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).PeerConnected(a, b, c);
			case 134:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).PeerConnected(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLlb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlbCallback(int obj_ptr, int fn_id, long a, long b, bool c);
	static LLlbCallback LLlbCallbackInst = CCallbackLLlb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llb_invoker")] public static extern int RegisterLLlbInvoker(LLlbCallback callee);
	static int _run_l_llb_registration = RegisterLLlbInvoker(LLlbCallbackInst);
	static bool CCallbackB(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in B");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in B");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 128:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in b_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).ProcessingQueueHigh();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in B");
				Console.Error.Flush();
				Environment.Exit(45);
				return false;
		}
	}
	public delegate bool BCallback(int obj_ptr, int fn_id);
	static BCallback BCallbackInst = CCallbackB;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_b__invoker")] public static extern int RegisterBInvoker(BCallback callee);
	static int _run_b__registration = RegisterBInvoker(BCallbackInst);
	static long CCallbackLSl(int obj_ptr, int fn_id, short a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LSl");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LSl");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 139:
				if (!(obj is LDKCustomMessageReader)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageReader in l_sl");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageReader)obj).Read(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LSl");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LSlCallback(int obj_ptr, int fn_id, short a, long b);
	static LSlCallback LSlCallbackInst = CCallbackLSl;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_sl_invoker")] public static extern int RegisterLSlInvoker(LSlCallback callee);
	static int _run_l_sl_registration = RegisterLSlInvoker(LSlCallbackInst);
	static long CCallbackLLb(int obj_ptr, int fn_id, long a, bool b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 147:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in l_lb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).SendData(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLbCallback(int obj_ptr, int fn_id, long a, bool b);
	static LLbCallback LLbCallbackInst = CCallbackLLb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lb_invoker")] public static extern int RegisterLLbInvoker(LLbCallback callee);
	static int _run_l_lb_registration = RegisterLLbInvoker(LLbCallbackInst);
	static bool CCallbackBL(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in BL");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in BL");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 149:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in b_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).Eq(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in BL");
				Console.Error.Flush();
				Environment.Exit(45);
				return false;
		}
	}
	public delegate bool BLCallback(int obj_ptr, int fn_id, long a);
	static BLCallback BLCallbackInst = CCallbackBL;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_b_l_invoker")] public static extern int RegisterBLInvoker(BLCallback callee);
	static int _run_b_l_registration = RegisterBLInvoker(BLCallbackInst);
	static long CCallbackLLlli(int obj_ptr, int fn_id, long a, long b, long c, int d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in LLlli");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in LLlli");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 152:
				if (!(obj is LDKCoinSelectionSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCoinSelectionSource in l_llli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCoinSelectionSource)obj).SelectConfirmedUtxos(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in LLlli");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long LLlliCallback(int obj_ptr, int fn_id, long a, long b, long c, int d);
	static LLlliCallback LLlliCallbackInst = CCallbackLLlli;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llli_invoker")] public static extern int RegisterLLlliInvoker(LLlliCallback callee);
	static int _run_l_llli_registration = RegisterLLlliInvoker(LLlliCallbackInst);
}
} } }